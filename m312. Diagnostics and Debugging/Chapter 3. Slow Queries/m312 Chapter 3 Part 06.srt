
1
00:00:00.000 --> 00:00:00.499


2
00:00:00.499 --> 00:00:03.690
Another issue that can come
up is write contention.

3
00:00:03.690 --> 00:00:04.950
This is a complicated issue.

4
00:00:04.950 --> 00:00:07.140
So let's draw it out.

5
00:00:07.140 --> 00:00:10.800
When a document is updated in
the WiredTiger storage engine,

6
00:00:10.800 --> 00:00:13.470
it uses a
copy-on-write approach.

7
00:00:13.470 --> 00:00:16.470
First, a new version of
the document is prepared.

8
00:00:16.470 --> 00:00:19.050
During this process, only
the original document

9
00:00:19.050 --> 00:00:21.540
is visible to any applications.

10
00:00:21.540 --> 00:00:24.030
Then the update is committed
by switching a pointer

11
00:00:24.030 --> 00:00:26.670
in a single CPU operation.

12
00:00:26.670 --> 00:00:28.650
And suddenly, the old
version of the document

13
00:00:28.650 --> 00:00:32.185
is no longer available,
but the new version is.

14
00:00:32.185 --> 00:00:34.560
This is how things work when
everything's going smoothly.

15
00:00:34.560 --> 00:00:36.300
And it's how you
can simultaneously

16
00:00:36.300 --> 00:00:39.750
both read from and write to the
same document at the same time.

17
00:00:39.750 --> 00:00:42.300
You simply read
from the old version

18
00:00:42.300 --> 00:00:44.580
while the new version
is being prepared.

19
00:00:44.580 --> 00:00:46.980
And once the new
version is in place,

20
00:00:46.980 --> 00:00:49.020
queries will read from that.

21
00:00:49.020 --> 00:00:51.420
This method, known as
multiversion concurrency

22
00:00:51.420 --> 00:00:53.340
control, is also how
the storage engine

23
00:00:53.340 --> 00:00:55.890
is able to achieve
so much throughput.

24
00:00:55.890 --> 00:00:57.450
However, an issue
occurs when you

25
00:00:57.450 --> 00:01:00.300
have multiple writers all trying
to update the same document

26
00:01:00.300 --> 00:01:02.310
at the same time.

27
00:01:02.310 --> 00:01:04.950
In this case, the writers
don't realize that other writes

28
00:01:04.950 --> 00:01:06.510
are updating the document.

29
00:01:06.510 --> 00:01:08.010
There aren't any locks.

30
00:01:08.010 --> 00:01:11.800
It just uses optimistic
concurrency protocols.

31
00:01:11.800 --> 00:01:13.080
So what happens?

32
00:01:13.080 --> 00:01:14.820
Here, I'm drawing
what would happen

33
00:01:14.820 --> 00:01:17.550
if three writers were trying
to simultaneously update

34
00:01:17.550 --> 00:01:19.260
the same document.

35
00:01:19.260 --> 00:01:22.140
Each of them would begin
preparing a new document

36
00:01:22.140 --> 00:01:23.980
on its own.

37
00:01:23.980 --> 00:01:26.070
They all devote system
resources to the update,

38
00:01:26.070 --> 00:01:29.300
including CPU cycles
and allocation of RAM.

39
00:01:29.300 --> 00:01:31.680
But only one update can happen.

40
00:01:31.680 --> 00:01:34.640
Maybe in this
example, it's v2-3.

41
00:01:34.640 --> 00:01:38.100
The pointer is flipped
and these versions fail.

42
00:01:38.100 --> 00:01:40.390
But those writes
still need to occur.

43
00:01:40.390 --> 00:01:43.140
So if they're valid, they'll
write to this version

44
00:01:43.140 --> 00:01:44.170
of the document.

45
00:01:44.170 --> 00:01:47.500
Now, in this example, two
writes had to be repeated.

46
00:01:47.500 --> 00:01:49.830
But you can imagine a scenario
where you have 20 writes

47
00:01:49.830 --> 00:01:52.670
and 19 of them have
to be repeated.