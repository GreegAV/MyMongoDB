
1
00:00:00.000 --> 00:00:00.500


2
00:00:00.500 --> 00:00:04.410
Two useful database methods are
dB.currentOp, and dB.killOp.

3
00:00:04.410 --> 00:00:06.990
Let's go into the shell and
take a look at currentOp.

4
00:00:06.990 --> 00:00:09.510
First, we'll spin
up our cluster--

5
00:00:09.510 --> 00:00:10.140
great.

6
00:00:10.140 --> 00:00:13.530
We'll go into the shell,
and we'll run currentOp.

7
00:00:13.530 --> 00:00:16.710
This is a large document,
so let's scroll to the top.

8
00:00:16.710 --> 00:00:19.080
CurrentOp will tell you
what the server is doing,

9
00:00:19.080 --> 00:00:21.210
that is, what its
current operations are.

10
00:00:21.210 --> 00:00:23.550
You can scroll down
to this inprog array,

11
00:00:23.550 --> 00:00:27.300
and you can see that each
operation has its own document.

12
00:00:27.300 --> 00:00:29.400
The document tells you
all kinds of information

13
00:00:29.400 --> 00:00:32.700
about the operation, but let's
focus on just a few fields.

14
00:00:32.700 --> 00:00:35.230
First, you've got this
"seconds running" field.

15
00:00:35.230 --> 00:00:37.740
That'll let you know how long
the thread has been operating.

16
00:00:37.740 --> 00:00:39.840
Here, it's basically zero.

17
00:00:39.840 --> 00:00:42.030
Next, you've got
this "op" field,

18
00:00:42.030 --> 00:00:44.370
which is telling us that
we're looking at a command.

19
00:00:44.370 --> 00:00:47.980
And you've got your "opID"
field, which is a number.

20
00:00:47.980 --> 00:00:50.620
If you have an operation
that's running for a long time,

21
00:00:50.620 --> 00:00:52.150
and you'd like to
kill it, you can

22
00:00:52.150 --> 00:00:55.300
pass that opID to dB.killOp.

23
00:00:55.300 --> 00:00:56.470
let's do an example.

24
00:00:56.470 --> 00:00:58.910
I'm going to need three
shell connections to do this.

25
00:00:58.910 --> 00:01:02.440
So let's open up a few
terminal tabs and VagrantSSH

26
00:01:02.440 --> 00:01:03.910
on each of them.

27
00:01:03.910 --> 00:01:08.050
OK, so now I have one,
two, three shell instances

28
00:01:08.050 --> 00:01:11.260
connected, and I'm
back at the first one.

29
00:01:11.260 --> 00:01:12.969
I've written this
function, insertDocs,

30
00:01:12.969 --> 00:01:15.010
and what it's going to do
is it's going to hammer

31
00:01:15.010 --> 00:01:16.300
the database with inserts.

32
00:01:16.300 --> 00:01:19.900
Each document containing a
string full of filler text.

33
00:01:19.900 --> 00:01:22.690
Each document is going to be
just a hair over 80 kilobytes,

34
00:01:22.690 --> 00:01:25.660
and most of that is
just this filler field.

35
00:01:25.660 --> 00:01:26.980
Let's get it started.

36
00:01:26.980 --> 00:01:28.780
We'll let that run
for a few seconds,

37
00:01:28.780 --> 00:01:30.550
and then we're going
to do a find query

38
00:01:30.550 --> 00:01:32.770
that is really inefficient.

39
00:01:32.770 --> 00:01:35.740
Let's go to a different shell
terminal and run it there.

40
00:01:35.740 --> 00:01:37.360
All this function
is going to do is

41
00:01:37.360 --> 00:01:41.270
it's going to run this find
query, which uses regex.

42
00:01:41.270 --> 00:01:43.900
It's going to search
for the ASDF string

43
00:01:43.900 --> 00:01:46.870
somewhere in that
big filler field,

44
00:01:46.870 --> 00:01:48.310
and it's not going to find it.

45
00:01:48.310 --> 00:01:50.500
I have this little
try except clause,

46
00:01:50.500 --> 00:01:53.500
so that we can print out
the error that we get,

47
00:01:53.500 --> 00:01:54.850
and that's all that it does.

48
00:01:54.850 --> 00:01:56.310
Let's start it up.

49
00:01:56.310 --> 00:01:58.900
While those are going on--

50
00:01:58.900 --> 00:02:01.695
our document insertion
and our query--

51
00:02:01.695 --> 00:02:05.110
I'm going to go to a third
connection to the database,

52
00:02:05.110 --> 00:02:07.830
and I'm going to
use dB.currentOp.

53
00:02:07.830 --> 00:02:13.100
OK, I have this "op"
query on this namespace.

54
00:02:13.100 --> 00:02:18.130
It's a collections scan,
filler ASDF, regex.

55
00:02:18.130 --> 00:02:20.800
Great, it's been
running for 29 seconds,

56
00:02:20.800 --> 00:02:23.920
and it's opID is 25963.

57
00:02:23.920 --> 00:02:25.440
Let's kill it.

58
00:02:25.440 --> 00:02:29.770
OK, and if I go back to my
query, that long-running find

59
00:02:29.770 --> 00:02:31.540
is no longer being executed.

60
00:02:31.540 --> 00:02:34.480
Instead, I've got this
"operation was interrupted"

61
00:02:34.480 --> 00:02:37.030
error, and the query is done.

62
00:02:37.030 --> 00:02:40.170
And that's how you use
currentOp and killOp.