
1
00:00:00.560 --> 00:00:03.920
MongoDB runs on a
distributed cluster.

2
00:00:03.920 --> 00:00:07.484
A replica set is composed
by different hosts,

3
00:00:07.484 --> 00:00:08.900
and inside those
hosts we're going

4
00:00:08.900 --> 00:00:13.550
to have instances of mongod
that belong to a replica set.

5
00:00:13.550 --> 00:00:16.520
The same applies to sharded
cluster which also can

6
00:00:16.520 --> 00:00:18.620
be composed of different nodes.

7
00:00:18.620 --> 00:00:21.200
Now any of these hosts
might have different ways

8
00:00:21.200 --> 00:00:22.880
by which you can reach them.

9
00:00:22.880 --> 00:00:27.530
They can have different NICs,
network interface controllers,

10
00:00:27.530 --> 00:00:29.820
or network interface cards.

11
00:00:29.820 --> 00:00:31.580
They can have
different DNS names

12
00:00:31.580 --> 00:00:35.930
provided by a DNS server
inside of your network.

13
00:00:35.930 --> 00:00:39.890
Or it also can have different
established, fully qualified

14
00:00:39.890 --> 00:00:44.240
domain names also
established by your DNS,

15
00:00:44.240 --> 00:00:47.690
or even just configured
on your host files,

16
00:00:47.690 --> 00:00:50.530
a manual to find
list of addresses

17
00:00:50.530 --> 00:00:54.290
that will contain which
IP address complies

18
00:00:54.290 --> 00:00:56.330
with each machine name.

19
00:00:56.330 --> 00:00:59.600
Now once we have a configuration
of a replica set where

20
00:00:59.600 --> 00:01:03.320
one of the hosts is a primary
and then the following ones are

21
00:01:03.320 --> 00:01:07.070
secondaries, if we don't
configure things well given

22
00:01:07.070 --> 00:01:10.610
this set of different
names by which we can reach

23
00:01:10.610 --> 00:01:13.460
the machines and the
different interface cards

24
00:01:13.460 --> 00:01:16.520
that we might have in
our different hosts,

25
00:01:16.520 --> 00:01:18.890
things can get a little messy.

26
00:01:18.890 --> 00:01:21.310
And in this lesson,
we will be looking

27
00:01:21.310 --> 00:01:24.680
to how to get us out
of a messy situation,

28
00:01:24.680 --> 00:01:30.650
and how to identify clusters
which are poorly configured

29
00:01:30.650 --> 00:01:32.630
given the different
ways that we have

30
00:01:32.630 --> 00:01:35.040
to reach to those machines.

31
00:01:35.040 --> 00:01:38.730
To help us out here with
the handouts of this lesson,

32
00:01:38.730 --> 00:01:42.080
you will find this nodes
vagrant environment.

33
00:01:42.080 --> 00:01:43.730
So go ahead.

34
00:01:43.730 --> 00:01:45.500
I generally put
it on some folder

35
00:01:45.500 --> 00:01:48.680
like this, where I have my
home folder, university,

36
00:01:48.680 --> 00:01:52.130
the course I'm in, and obviously
all the handouts and material

37
00:01:52.130 --> 00:01:53.480
that were made available.

38
00:01:53.480 --> 00:01:55.063
So in this environment,
what I'm going

39
00:01:55.063 --> 00:01:56.660
to have is three
different machines,

40
00:01:56.660 --> 00:01:59.330
three different virtual
machines, each one of them

41
00:01:59.330 --> 00:02:02.540
having a mongod in
them, and they all

42
00:02:02.540 --> 00:02:05.150
belong to the same replica set.

43
00:02:05.150 --> 00:02:07.790
If I connect one of the machines
and ask for the replica set

44
00:02:07.790 --> 00:02:11.180
status, I can see
the fully configured

45
00:02:11.180 --> 00:02:15.980
three-node configuration
of that replica set.

46
00:02:15.980 --> 00:02:18.860
There will be a secondary,
a primary, and finally

47
00:02:18.860 --> 00:02:20.510
another secondary.

48
00:02:20.510 --> 00:02:23.120
Now the way that I'm
connecting to this machine

49
00:02:23.120 --> 00:02:27.710
is by simply knowing an IP
address of one of the hosts

50
00:02:27.710 --> 00:02:30.290
and connecting to
the default port.

51
00:02:30.290 --> 00:02:35.010
Here we'll just ask
for the rs.status,

52
00:02:35.010 --> 00:02:38.720
and that will give me the
status of the nodes that

53
00:02:38.720 --> 00:02:41.540
belong to the replica set, which
include this particular machine

54
00:02:41.540 --> 00:02:44.140
that I know of.

55
00:02:44.140 --> 00:02:46.580
But I also know that
this particular node

56
00:02:46.580 --> 00:02:49.850
belongs to M312, the
name of the replica set.

57
00:02:49.850 --> 00:02:52.640
So a good way of
connecting to this machine,

58
00:02:52.640 --> 00:02:54.560
or a proper way to
connect to this machine,

59
00:02:54.560 --> 00:02:57.110
is by appending the
name of the replica set.

60
00:02:57.110 --> 00:03:01.204
Therefore I will have the
list of different nodes

61
00:03:01.204 --> 00:03:02.870
that belong to the
replica set, and I'll

62
00:03:02.870 --> 00:03:06.020
be able to connect directly
to the primary machine

63
00:03:06.020 --> 00:03:08.560
of that particular set.

64
00:03:08.560 --> 00:03:13.130
So if I do so, I end
up in a bad state.

65
00:03:13.130 --> 00:03:16.640
Here my local machine,
my local laptop,

66
00:03:16.640 --> 00:03:20.000
is trying to connect to a
virtual machine that basically

67
00:03:20.000 --> 00:03:21.680
doesn't know who it is.

68
00:03:21.680 --> 00:03:24.730
I am able to connect
to one of the members

69
00:03:24.730 --> 00:03:27.600
by a [? cell's ?]
direct connection.

70
00:03:27.600 --> 00:03:31.580
But once I want to connect
using the replicas set,

71
00:03:31.580 --> 00:03:36.440
since I do not know or I cannot
reach by the name defined

72
00:03:36.440 --> 00:03:39.740
in the replica set,
the primary node,

73
00:03:39.740 --> 00:03:42.980
I cannot establish
it during connection.

74
00:03:42.980 --> 00:03:46.070
If I look into the
replica set status again,

75
00:03:46.070 --> 00:03:49.760
and if I look for the
configuration of my primary,

76
00:03:49.760 --> 00:03:52.670
I will see that
my primary node is

77
00:03:52.670 --> 00:03:56.750
configured using
m2.university.mongodb

78
00:03:56.750 --> 00:04:00.170
at port 27017.

79
00:04:00.170 --> 00:04:03.680
For me to understand if
I can reach this machine

80
00:04:03.680 --> 00:04:08.240
or not, by simply
pinging the box

81
00:04:08.240 --> 00:04:11.630
I would be able to
check that I do not

82
00:04:11.630 --> 00:04:15.650
in fact know who this node is.

83
00:04:15.650 --> 00:04:19.670
And that will bring us to
the important question here.

84
00:04:19.670 --> 00:04:24.020
How well should my local
machine be connected

85
00:04:24.020 --> 00:04:26.090
to that replica set in place?

86
00:04:26.090 --> 00:04:28.100
Do I need just one
node or should I

87
00:04:28.100 --> 00:04:31.940
know all of the nodes of
the replica set in its own?

88
00:04:31.940 --> 00:04:33.680
Because if I connect
directly to the node

89
00:04:33.680 --> 00:04:37.880
that I know of, which
in my case is my m1 box,

90
00:04:37.880 --> 00:04:41.030
and if I tried to connect
to my replica set,

91
00:04:41.030 --> 00:04:43.640
I'm able to connect
with no frills.

92
00:04:43.640 --> 00:04:46.940
System connects, all
things worked well.

93
00:04:46.940 --> 00:04:52.760
If I use the machine
itself, my m1 itself,

94
00:04:52.760 --> 00:04:56.060
I'm still able to be
correctly redirected

95
00:04:56.060 --> 00:04:58.730
to the primary,
which in this case

96
00:04:58.730 --> 00:05:01.780
is my m2 university.mongodb.

97
00:05:01.780 --> 00:05:05.620
If I want one application to
be able to connect correctly

98
00:05:05.620 --> 00:05:08.560
to this replica set
in place, it should

99
00:05:08.560 --> 00:05:13.930
be able to connect to all
configured nodes of the replica

100
00:05:13.930 --> 00:05:17.350
set itself, which in
this particular case

101
00:05:17.350 --> 00:05:21.460
are configured by
their simple name, m3,

102
00:05:21.460 --> 00:05:27.100
by their fully qualified
name, m2 university mongodb,

103
00:05:27.100 --> 00:05:29.620
and even by their
own IP address,

104
00:05:29.620 --> 00:05:32.500
in this case will be m1.

105
00:05:32.500 --> 00:05:38.000
Now as you can see here,
these three different ways

106
00:05:38.000 --> 00:05:42.130
which this host can be
reached can cause problems

107
00:05:42.130 --> 00:05:46.840
for your applications
to connect to.

108
00:05:46.840 --> 00:05:51.850
Because if one of the nodes
would eventually be primary

109
00:05:51.850 --> 00:05:54.730
and I would not know
how to reach them,

110
00:05:54.730 --> 00:05:59.110
my application will not
be able to connect to him

111
00:05:59.110 --> 00:06:01.990
while a failover is taking
place or a new election

112
00:06:01.990 --> 00:06:03.900
is taking place.