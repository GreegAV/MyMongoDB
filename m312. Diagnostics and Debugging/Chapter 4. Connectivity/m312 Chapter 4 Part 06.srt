
1
00:00:00.000 --> 00:00:00.110


2
00:00:00.110 --> 00:00:00.610
OK.

3
00:00:00.610 --> 00:00:02.980
So we see that
there's a correlation

4
00:00:02.980 --> 00:00:07.390
between number of connections
and virtual size being

5
00:00:07.390 --> 00:00:08.840
allocated.

6
00:00:08.840 --> 00:00:10.300
That's fine.

7
00:00:10.300 --> 00:00:14.390
So let's use a system
tool, in our case,

8
00:00:14.390 --> 00:00:17.100
we're going to be using
free command which gives us

9
00:00:17.100 --> 00:00:21.160
the indication of how is
our memory being used.

10
00:00:21.160 --> 00:00:22.780
A particular command
that I really

11
00:00:22.780 --> 00:00:25.750
like to use in conjunction
with free is watch.

12
00:00:25.750 --> 00:00:30.350
In this case, I'm going to watch
this output every two seconds.

13
00:00:30.350 --> 00:00:33.550
So I can see here, what's my
current utilization every two

14
00:00:33.550 --> 00:00:35.195
seconds of my memory.

15
00:00:35.195 --> 00:00:36.390
Which is great.

16
00:00:36.390 --> 00:00:40.060
Right now, I have nearly
four gigabytes in total,

17
00:00:40.060 --> 00:00:44.140
I'm using 1.2, and I have 2.73.

18
00:00:44.140 --> 00:00:44.710
Awesome!

19
00:00:44.710 --> 00:00:48.745
Once I run again my system
with the 600 different threads

20
00:00:48.745 --> 00:00:52.810
in it, and if I
watch my free again,

21
00:00:52.810 --> 00:00:55.570
I can see that the
values increase rapidly

22
00:00:55.570 --> 00:00:59.860
and they stick with that
increase for a while.

23
00:00:59.860 --> 00:01:05.550
So now instead of a few
1.2 gigabytes of memory,

24
00:01:05.550 --> 00:01:08.800
I'm actually allocating
three gigabytes of data

25
00:01:08.800 --> 00:01:12.190
because everything is
running on this same box.

26
00:01:12.190 --> 00:01:16.360
Python will require memory
to launch all the processes.

27
00:01:16.360 --> 00:01:19.360
MongoDB also runs on
memory, so we also

28
00:01:19.360 --> 00:01:21.580
need some memory
to be allocated,

29
00:01:21.580 --> 00:01:24.790
and then there's the per
connection allocation that will

30
00:01:24.790 --> 00:01:27.280
be reflected on this increase.

31
00:01:27.280 --> 00:01:29.860
Once the system
stops, after a minute,

32
00:01:29.860 --> 00:01:34.000
we go back to 1.2
gigabytes of utilization.

33
00:01:34.000 --> 00:01:36.340
Now if you're starting to
wonder if this is a good thing

34
00:01:36.340 --> 00:01:38.620
or not let me reassure
you one thing,

35
00:01:38.620 --> 00:01:42.380
this is not the normal behavior
for a well written application.

36
00:01:42.380 --> 00:01:45.130
What we need to realize is that
for each connection that we

37
00:01:45.130 --> 00:01:47.950
establish from our application
or from the threads

38
00:01:47.950 --> 00:01:51.400
of our application,
will require memory.

39
00:01:51.400 --> 00:01:54.160
And since everything in
our current demonstration

40
00:01:54.160 --> 00:01:57.100
runs on the same box,
it will be allocated

41
00:01:57.100 --> 00:01:59.830
on both sides, not only
on the MongoDB side

42
00:01:59.830 --> 00:02:01.840
but also in the
application side.

43
00:02:01.840 --> 00:02:05.440
So it's important to determine
how many connections you allow

44
00:02:05.440 --> 00:02:07.390
your applications to
establish considering

45
00:02:07.390 --> 00:02:10.240
that each connection
require resources

46
00:02:10.240 --> 00:02:12.520
and when you have
a lot of them, they

47
00:02:12.520 --> 00:02:15.070
can add up to a very
big number in terms

48
00:02:15.070 --> 00:02:17.216
of resource requirements.

49
00:02:17.216 --> 00:02:21.637
But I'm feeling bold so let's
not stick around with only 600,

50
00:02:21.637 --> 00:02:23.470
let's go ahead and try
and push the envelope

51
00:02:23.470 --> 00:02:26.830
to 2000 connections
and see what happens.

52
00:02:26.830 --> 00:02:29.860
Now obviously our memory
keeps on increasing

53
00:02:29.860 --> 00:02:33.790
at the dramatic stage,
and it would eventually

54
00:02:33.790 --> 00:02:37.930
be running into a couple
of nasty situations.

55
00:02:37.930 --> 00:02:40.330
Like, for example,
our processes not

56
00:02:40.330 --> 00:02:42.930
being able to be
allocated because there

57
00:02:42.930 --> 00:02:45.040
is no memory left.

58
00:02:45.040 --> 00:02:48.320
This will be done on
the application side.

59
00:02:48.320 --> 00:02:52.090
So next time we try to fork
the process and launch a new

60
00:02:52.090 --> 00:02:55.990
process from our main script,
the make lots of connection

61
00:02:55.990 --> 00:03:01.000
server, the OS will tell my
applications a no you cannot do

62
00:03:01.000 --> 00:03:05.890
that go away and launches OS
error saying that there is no

63
00:03:05.890 --> 00:03:08.620
memory available
for being allocated.

64
00:03:08.620 --> 00:03:12.160
So if you don't manage it
well the requirements in terms

65
00:03:12.160 --> 00:03:16.550
of your application
resources, especially memory,

66
00:03:16.550 --> 00:03:20.570
and if you keep your
connections for a long time

67
00:03:20.570 --> 00:03:24.140
without releasing them,
regardless of the paralyzation

68
00:03:24.140 --> 00:03:25.880
that you want to do
in your application,

69
00:03:25.880 --> 00:03:28.190
you might end up with problems.

70
00:03:28.190 --> 00:03:31.610
Where the server does not
have any memory or that

71
00:03:31.610 --> 00:03:35.780
your own MongoDB will
not be able to allocate

72
00:03:35.780 --> 00:03:39.530
more connections
than what is feasible

73
00:03:39.530 --> 00:03:42.230
for that particular box.

74
00:03:42.230 --> 00:03:46.070
Now, there's a particular
setting of your system

75
00:03:46.070 --> 00:03:50.990
that also interferes a lot
with the number of connections

76
00:03:50.990 --> 00:03:53.420
that you will be able
to set from your MongoDB

77
00:03:53.420 --> 00:03:56.250
and that's your ulimits.

78
00:03:56.250 --> 00:03:57.830
Now MongoDB allows
you by default

79
00:03:57.830 --> 00:04:04.790
to reach up to 65,536
connections per MongoDB

80
00:04:04.790 --> 00:04:08.870
if only your system is
actually capable of doing so.

81
00:04:08.870 --> 00:04:13.560
If your ulimits value
actually allows you to do so.

82
00:04:13.560 --> 00:04:15.680
Let's check out
this particular box

83
00:04:15.680 --> 00:04:18.320
that we've been using
the ulimits value.

84
00:04:18.320 --> 00:04:21.630
To do that, we
just need ulimit-a,

85
00:04:21.630 --> 00:04:25.370
give us all the different
ulimits that we can set up.

86
00:04:25.370 --> 00:04:29.480
And in particular, one
that is quite important,

87
00:04:29.480 --> 00:04:32.870
is my ulimits of open files.

88
00:04:32.870 --> 00:04:38.660
And here I can only open
up to 1,024 different files

89
00:04:38.660 --> 00:04:42.620
in this box for this
particular user.

90
00:04:42.620 --> 00:04:46.430
This value will impact the
number of allowed connections

91
00:04:46.430 --> 00:04:49.580
and the number of
collection and indexes

92
00:04:49.580 --> 00:04:51.650
that our system will
be able to have.

93
00:04:51.650 --> 00:04:56.000
Since every single connection,
index, and collection

94
00:04:56.000 --> 00:04:59.120
will be a file for
MongoDB to operate with

95
00:04:59.120 --> 00:05:03.500
or will be considered a file
that it needs to work with.

96
00:05:03.500 --> 00:05:06.860
We will reach a limit
if we have a bunch

97
00:05:06.860 --> 00:05:10.580
of different connections plus a
bunch of different collections

98
00:05:10.580 --> 00:05:13.400
and a bunch of different
indexes operating

99
00:05:13.400 --> 00:05:17.930
under the same MongoDB, under
the same user with this setting

100
00:05:17.930 --> 00:05:20.080
of ulimits.

101
00:05:20.080 --> 00:05:23.500
Now if I connect
to my MongoDB and I

102
00:05:23.500 --> 00:05:27.080
look for my service
status and in particular,

103
00:05:27.080 --> 00:05:30.250
the number of connections, I can
see a couple different values

104
00:05:30.250 --> 00:05:30.780
here.

105
00:05:30.780 --> 00:05:34.630
This MongoDB is allowed
to establish up to 800

106
00:05:34.630 --> 00:05:37.155
in 18 different connections.

107
00:05:37.155 --> 00:05:39.670
So the ulimits
configuration will

108
00:05:39.670 --> 00:05:42.520
affect the number of
available connections

109
00:05:42.520 --> 00:05:45.220
that your MongoDB will
be actually allowing

110
00:05:45.220 --> 00:05:49.380
you to set regardless of
the default maximum value

111
00:05:49.380 --> 00:05:53.830
and regardless of the number
of incoming maximum connections

112
00:05:53.830 --> 00:05:55.240
that you set.

113
00:05:55.240 --> 00:05:58.720
Given that we have
1,024, my MongoDB

114
00:05:58.720 --> 00:06:01.960
will only have available
818 because there's

115
00:06:01.960 --> 00:06:04.660
a bunch of other
files that MongoDB

116
00:06:04.660 --> 00:06:06.550
needs to operate
with that also are

117
00:06:06.550 --> 00:06:10.580
going to be reducing the number
of available connections.

118
00:06:10.580 --> 00:06:16.130
But then again, I think that
818 is a very small number.

119
00:06:16.130 --> 00:06:20.810
So what I'm going to do is shut
down my server for a second,

120
00:06:20.810 --> 00:06:24.820
bring it down, I'm going
to change my ulimit value.

121
00:06:24.820 --> 00:06:29.110
I'm going to set up the number
of allowed open files to 2,048

122
00:06:29.110 --> 00:06:34.090
duplicating this amount, I'm
going to bring back my MongoDB,

123
00:06:34.090 --> 00:06:37.980
and connect to get
into that instance.

124
00:06:37.980 --> 00:06:40.180
Once I connect it, If
I do my server status

125
00:06:40.180 --> 00:06:41.830
again looking for
the connections,

126
00:06:41.830 --> 00:06:45.010
I can see that my available
connections are also

127
00:06:45.010 --> 00:06:49.240
immediately increased as a
factor of the ulimits value.

128
00:06:49.240 --> 00:06:52.480
So keep track of your
ulimits because this

129
00:06:52.480 --> 00:06:56.410
might affect a lot the
amount of open files

130
00:06:56.410 --> 00:07:00.190
that a given process
is able to establish

131
00:07:00.190 --> 00:07:04.980
and therefore, limit your
connectivity of your system.