In this lesson, we're going to talk about the aggregation pipeline on a sharded cluster.

Specifically we're going to discuss how it works, where operations are completed, and we'll also look into how pipelines are optimized to perform well on sharded clusters.

Let's go ahead and talk about how aggregation works in a sharded cluster.

When we run aggregation queries on a replica set or standalone MongoDB, it's much easier for the server to reason about because all the data is located in one place.

In a sharded cluster, since our data is partitioned across different shards, this become slightly more difficult.

Fortunately, MongoDB has some good tricks up its sleeve to address these issues.

For example, here we have the simple aggregation query where I'm using match to find all the restaurants in New York state.

I'm then using group to group by each state and then average the amount of stars for that given state.

Since my shard key is on state, all of the restaurants in New York are going to be on the same shard.

This means that the server is able to simply route the aggregate query to that shard, where it can run the aggregation and return the results back to the Mongo S and then back to the client.

Very straightforward.

Now look at this example.

I've changed the query slightly so we're no longer using the match stage.

So now we're talking about all documents in our sharded collection.

Now since these documents are spread across multiple shards, we're going to need to do some computing on each shard, but then we'll also need to somehow get all of those results to one place, where we can merge the results together.

In this case, our pipeline needs to be split.

The server will determine which stages need to be executed on each shard, and then what stages need to be executed on a single shard where the results from the other shards will be merged together.

Generally, merging will happen on a random shard, but there are certain circumstances where this is not the case.

This isn't the case when we use $out or $facet or $lookup or $graphLookup.

For these queries, the primary shard will do the work of merging our results.

And this is important to understand because if we're running these operations very frequently, then one of our shards, the primary shard, will be under a lot more load than the rest of our cluster, degrading the benefits of our horizontal scaling.

Under these specific circumstances, you can mitigate this issue by using a machine with more resources for your primary shard.

There are also some cool optimizations that the server will try to perform that you should be aware of.

Most of these will also apply when you're not sharding, but are still helpful to know.

Take this example.

Here we have a sort followed by a match.

Now the query optimizer will move the match in front of the sort to reduce the number of documents that need to be sorted.

This is particularly useful in sharded clusters when we have a split in our pipeline and when you want to reduce the amount of data being transferred over the wire to our merging shard.

Similarly, we can reduce the number of documents that we need to examine by moving the limit after a skip in front of it.

Notice that the query planner updates the values accordingly to support this optimization.

Other than moving stages around, the server is also able to combine certain stages together.

Here we're going to see where we're combining two limits into one.

Same thing with skip.

And finally, we're seeing the same thing with match.

Now all these optimizations will automatically be attempted by the query optimizer.

That being said, I think it's important to point out these optimizations so that you can more carefully consider your own aggregation pipelines and the performance implications.

And that should give you a good overview of the aggregation pipeline on a sharded cluster.

Let's recap what we learned.

We discussed how the aggregation pipeline works on a sharded environment.

And specifically we looked at where the different operations happen when we're using sharding.

And finally, we looked at some optimizations that the server will try to do when running aggregation queries.