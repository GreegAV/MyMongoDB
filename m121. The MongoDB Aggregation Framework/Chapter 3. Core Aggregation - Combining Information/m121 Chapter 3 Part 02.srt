
1
00:00:00.000 --> 00:00:00.930


2
00:00:00.930 --> 00:00:03.240
Let's learn about another
useful aggregation

3
00:00:03.240 --> 00:00:06.300
stage, the $unwind stage.

4
00:00:06.300 --> 00:00:09.570
$unwind lists unwind
in an RA field,

5
00:00:09.570 --> 00:00:12.310
creating a new document for
every entry where the field

6
00:00:12.310 --> 00:00:14.850
value is now each entry.

7
00:00:14.850 --> 00:00:19.030
Let's visualize this
with an example.

8
00:00:19.030 --> 00:00:22.970
If I had the following schema
on the left, title and genres,

9
00:00:22.970 --> 00:00:25.830
and $unwind on the
genres field, I'll

10
00:00:25.830 --> 00:00:28.800
get back documents on the right.

11
00:00:28.800 --> 00:00:29.520
What?

12
00:00:29.520 --> 00:00:32.400
Am I saying that I'm generating
a document for each array

13
00:00:32.400 --> 00:00:35.640
entry, when it was all
tighten and well-embedded?

14
00:00:35.640 --> 00:00:38.440
Why might this be useful?

15
00:00:38.440 --> 00:00:42.270
One example is when we'd like
to group on individual entries.

16
00:00:42.270 --> 00:00:45.900
In the group lesson, we grouped
movies based on their year.

17
00:00:45.900 --> 00:00:48.480
And we tried to group
on year and genres,

18
00:00:48.480 --> 00:00:50.820
we would have gotten back
many distinct entries

19
00:00:50.820 --> 00:00:52.890
because, within
group, arrays are

20
00:00:52.890 --> 00:00:56.230
mashed on pure equality,
not equivalents.

21
00:00:56.230 --> 00:00:59.460
So this array of
Adventure Action

22
00:00:59.460 --> 00:01:04.480
would not match this
array of Action Adventure.

23
00:01:04.480 --> 00:01:06.780
Let's use $unwind
for something real.

24
00:01:06.780 --> 00:01:09.360
Let's find the most
popular genres by year

25
00:01:09.360 --> 00:01:13.052
from 2010 to 2015 within
the movie's collection.

26
00:01:13.052 --> 00:01:15.510
I'm going to go ahead and limit
this, and say that I'm only

27
00:01:15.510 --> 00:01:17.640
considering entries
with a runtime of 90

28
00:01:17.640 --> 00:01:18.920
minutes or greater.

29
00:01:18.920 --> 00:01:24.060
And for popularity, I'll use
a value in the imdb.rating.

30
00:01:24.060 --> 00:01:25.650
Let's break this down.

31
00:01:25.650 --> 00:01:28.350
Here, we begin with the
$match stage, ensuring

32
00:01:28.350 --> 00:01:31.500
we have an imdb.rating
value by specifying

33
00:01:31.500 --> 00:01:34.530
that it must be greater than
0, and filtering documents

34
00:01:34.530 --> 00:01:37.050
based on year and runtime.

35
00:01:37.050 --> 00:01:40.830
Then we unwind the genres
array, creating a new document

36
00:01:40.830 --> 00:01:43.860
for each entry in
the original array.

37
00:01:43.860 --> 00:01:47.400
Then we'll group on the year,
and the now single genre values

38
00:01:47.400 --> 00:01:49.830
field, and use the
average expression

39
00:01:49.830 --> 00:01:54.330
to calculate the average_rating
from imdb.rating.

40
00:01:54.330 --> 00:01:58.440
Finally, we sort, first
on the year descending,

41
00:01:58.440 --> 00:02:01.020
and then the
average_rating descending.

42
00:02:01.020 --> 00:02:03.800
Let's test it out.

43
00:02:03.800 --> 00:02:06.480
It's close, but not
quite there yet.

44
00:02:06.480 --> 00:02:09.570
We can see we're getting the
most popular genre by year,

45
00:02:09.570 --> 00:02:12.180
but we're getting
all results back.

46
00:02:12.180 --> 00:02:14.340
We just want a single
document per year,

47
00:02:14.340 --> 00:02:16.920
with the highest-rated genre.

48
00:02:16.920 --> 00:02:18.600
There are many ways
to accomplish this.

49
00:02:18.600 --> 00:02:22.480
We'll just look at one
of the most simple.

50
00:02:22.480 --> 00:02:24.540
Let's examine this new pipeline.

51
00:02:24.540 --> 00:02:26.460
It's identical to
the previous one,

52
00:02:26.460 --> 00:02:28.800
with the addition
of these two stages.

53
00:02:28.800 --> 00:02:30.720
The previous pipeline
was returning

54
00:02:30.720 --> 00:02:32.370
in the format we wanted.

55
00:02:32.370 --> 00:02:35.370
There were just too many
documents being returned.

56
00:02:35.370 --> 00:02:37.800
Here, in this
additional group stage,

57
00:02:37.800 --> 00:02:40.620
we group documents together
based on their year.

58
00:02:40.620 --> 00:02:43.260
And since they are already
sorted in the order we need,

59
00:02:43.260 --> 00:02:45.750
we just take the first
value we encounter

60
00:02:45.750 --> 00:02:48.510
for the genre and
the average rating.

61
00:02:48.510 --> 00:02:51.870
Then we finish with a $sort
to make sure that they're

62
00:02:51.870 --> 00:02:53.850
return and the order we want.

63
00:02:53.850 --> 00:02:57.090
Let's see if it works.

64
00:02:57.090 --> 00:02:58.110
Excellent.

65
00:02:58.110 --> 00:03:01.230
One document per year, with
the highest-rated genre

66
00:03:01.230 --> 00:03:03.660
in that year.

67
00:03:03.660 --> 00:03:05.370
We've seen how $unwind works.

68
00:03:05.370 --> 00:03:08.160
Now there's a few
less things to cover.

69
00:03:08.160 --> 00:03:10.590
We've been using the
short form for $unwind.

70
00:03:10.590 --> 00:03:12.730
Here's the long
form for contrast.

71
00:03:12.730 --> 00:03:15.780
In the long form,
we specify the array

72
00:03:15.780 --> 00:03:19.230
we want to unwind by providing
a field path expression

73
00:03:19.230 --> 00:03:21.420
to the path argument.

74
00:03:21.420 --> 00:03:24.700
We can provide a string
to includeArrayIndex.

75
00:03:24.700 --> 00:03:26.790
This will create another
field in the document

76
00:03:26.790 --> 00:03:29.730
with whatever name we
specify, with the value

77
00:03:29.730 --> 00:03:32.700
to the index of the element
in the original array.

78
00:03:32.700 --> 00:03:35.520
Lastly, we can provide
a true or false value

79
00:03:35.520 --> 00:03:37.980
to preserveNullAndEmptyArrays.

80
00:03:37.980 --> 00:03:41.100
True will create an entry
with an empty array,

81
00:03:41.100 --> 00:03:43.140
with the value
specified in the path

82
00:03:43.140 --> 00:03:46.620
as either null, missing,
or an empty array.

83
00:03:46.620 --> 00:03:47.870
One more thing of note.

84
00:03:47.870 --> 00:03:50.175
If the documents in our
collection are very large,

85
00:03:50.175 --> 00:03:52.830
and we need to use
$unwind, we may

86
00:03:52.830 --> 00:03:56.460
exceed the default memory limit
of the aggregation framework.

87
00:03:56.460 --> 00:04:00.180
As always, match early,
retain only the information

88
00:04:00.180 --> 00:04:02.670
needed with project,
and remember that we

89
00:04:02.670 --> 00:04:06.140
can specify to allow disk use.

90
00:04:06.140 --> 00:04:09.030
And that covers $unwind
We've learned a lot.

91
00:04:09.030 --> 00:04:11.700
Let's recap on a few things.

92
00:04:11.700 --> 00:04:14.790
$unwind only works on
an array of values.

93
00:04:14.790 --> 00:04:18.810
There are two forms for unwind,
the short form and long form.

94
00:04:18.810 --> 00:04:22.010
Using unwind on large
collections with big documents

95
00:04:22.010 --> 00:04:24.680
may lead to performance issues.