
1
00:00:00.499 --> 00:00:03.780
So now don't forget about
the underlying restrictions

2
00:00:03.780 --> 00:00:06.360
of running
aggregation pipelines.

3
00:00:06.360 --> 00:00:08.700
The first thing I want to
raise your attention to

4
00:00:08.700 --> 00:00:11.070
is the memory allocation.

5
00:00:11.070 --> 00:00:14.580
The dollar graph lookup,
due to its recursive nature,

6
00:00:14.580 --> 00:00:19.920
and the fact that it might bring
back several thousand megabytes

7
00:00:19.920 --> 00:00:25.950
of memory just on a single query
may require significant amount

8
00:00:25.950 --> 00:00:29.520
of memory to operate
properly, not

9
00:00:29.520 --> 00:00:32.189
only due to the
recursiveness, but also given

10
00:00:32.189 --> 00:00:36.330
the complexity of the
documents and how broad

11
00:00:36.330 --> 00:00:37.800
your queries might be.

12
00:00:37.800 --> 00:00:41.310
So allowDiskUse
will be your friend.

13
00:00:41.310 --> 00:00:45.750
Another important thing to keep
in mind is the use of indexes.

14
00:00:45.750 --> 00:00:49.020
Now in MongoDB, as in
any other database,

15
00:00:49.020 --> 00:00:53.930
indexes will accelerate or
might accelerate our queries.

16
00:00:53.930 --> 00:00:58.410
In the case of graph lookup,
having our connectToField,

17
00:00:58.410 --> 00:01:01.150
which is the field in
the front collection

18
00:01:01.150 --> 00:01:05.610
that we're going to be using
on the recursive query.

19
00:01:05.610 --> 00:01:08.540
Having this particular
field indexed

20
00:01:08.540 --> 00:01:12.860
will be a good, good thing.

21
00:01:12.860 --> 00:01:16.230
Another important aspect to take
into consideration is the fact

22
00:01:16.230 --> 00:01:21.220
that they our from
collection cannot be sharded.

23
00:01:21.220 --> 00:01:23.880
So if you are using
graph lookup stage,

24
00:01:23.880 --> 00:01:29.400
we cannot use a shard collection
in our from collection.

25
00:01:29.400 --> 00:01:33.120
Also, unrelated
match stages do not

26
00:01:33.120 --> 00:01:36.570
get pushed before graph
lookup in the pipeline.

27
00:01:36.570 --> 00:01:39.390
Therefore, they will
not be optimized

28
00:01:39.390 --> 00:01:43.170
if they are not related with the
dollar graph lookup operator.

29
00:01:43.170 --> 00:01:48.000
So keep that in mind when
building your pipeline.

30
00:01:48.000 --> 00:01:54.540
Now, and last important thing,
is giving its recursive lookup

31
00:01:54.540 --> 00:01:59.220
nature, dollar graph lookup
makes it allow memory usage

32
00:01:59.220 --> 00:02:01.500
without spilling to disk.

33
00:02:01.500 --> 00:02:03.120
Take that into consideration.

34
00:02:03.120 --> 00:02:06.130
Even though that you are
using allow disk use,

35
00:02:06.130 --> 00:02:11.670
this may still exceed
the 100 megabytes

36
00:02:11.670 --> 00:02:15.980
of maximum memory allowed
per aggregation pipeline