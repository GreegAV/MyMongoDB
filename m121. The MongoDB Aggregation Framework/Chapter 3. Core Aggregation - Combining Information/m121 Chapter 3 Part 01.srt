
1
00:00:00.000 --> 00:00:01.390


2
00:00:01.390 --> 00:00:04.080
Let's take a moment to learn
about using accumulator

3
00:00:04.080 --> 00:00:06.690
expressions with
the $project stage.

4
00:00:06.690 --> 00:00:08.670
Knowledge of how to
use these expressions

5
00:00:08.670 --> 00:00:11.580
can greatly simplify our work.

6
00:00:11.580 --> 00:00:13.230
One important thing
to keep in mind

7
00:00:13.230 --> 00:00:15.960
is that accumulator
expressions within $project

8
00:00:15.960 --> 00:00:19.230
work over an array within
the given document.

9
00:00:19.230 --> 00:00:23.220
They do not carry values forward
to each document encountered.

10
00:00:23.220 --> 00:00:26.040
Let's suppose we have a
collection named example

11
00:00:26.040 --> 00:00:28.030
with this schema.

12
00:00:28.030 --> 00:00:31.080
If we perform this
aggregation, this

13
00:00:31.080 --> 00:00:34.440
will be the result. An output
document for every input

14
00:00:34.440 --> 00:00:38.370
document, with the average of
that document's data field.

15
00:00:38.370 --> 00:00:41.335
For this lesson, we're going
to explore this data set.

16
00:00:41.335 --> 00:00:44.490
It's the average monthly low and
high temperature for the United

17
00:00:44.490 --> 00:00:48.120
States as well as monthly ice
cream consumer price index

18
00:00:48.120 --> 00:00:50.230
and sales information.

19
00:00:50.230 --> 00:00:53.220
And here's what the data
looks like in our collection.

20
00:00:53.220 --> 00:00:54.890
We can see we have
a trends array

21
00:00:54.890 --> 00:00:58.140
with documents that contain
all the information we'll need.

22
00:00:58.140 --> 00:01:00.370
Easy enough to work with.

23
00:01:00.370 --> 00:01:03.510
Let's go ahead and find the
maximum and minimum values

24
00:01:03.510 --> 00:01:05.550
for the average
high temperature.

25
00:01:05.550 --> 00:01:08.850
We'll explore two different
methods to find the maximum.

26
00:01:08.850 --> 00:01:11.730
First, we'll use the
$reduce expression

27
00:01:11.730 --> 00:01:14.910
to manually find the maximum.

28
00:01:14.910 --> 00:01:17.610
Before I run this,
let's break it down.

29
00:01:17.610 --> 00:01:21.030
Here, I'm specifying the
$reduce expression. $reduce

30
00:01:21.030 --> 00:01:25.320
takes an array as its
input argument here.

31
00:01:25.320 --> 00:01:28.890
For the argument to initial
value, the value or accumulator

32
00:01:28.890 --> 00:01:33.064
we'll begin with, we're
specifying negative infinity.

33
00:01:33.064 --> 00:01:34.980
I hope we'll never have
a monthly average high

34
00:01:34.980 --> 00:01:37.170
temperature of
negative infinity,

35
00:01:37.170 --> 00:01:40.080
but in all seriousness,
we're using negative infinity

36
00:01:40.080 --> 00:01:44.310
because any reasonable value
we encounter should be greater.

37
00:01:44.310 --> 00:01:49.560
Lastly, we'll specify the
logic to the end field here.

38
00:01:49.560 --> 00:01:53.600
This is using the $cond
conditional operator and saying

39
00:01:53.600 --> 00:02:00.120
if $$this.avg_high_tmp is
greater than the value which is

40
00:02:00.120 --> 00:02:05.670
held in our accumulator, then
return this.avg_high_tmp.

41
00:02:05.670 --> 00:02:08.490
Otherwise, just
return the value back.

42
00:02:08.490 --> 00:02:12.550
So compare the current value
against the accumulator value,

43
00:02:12.550 --> 00:02:14.160
and if it's greater,
we'll replace it

44
00:02:14.160 --> 00:02:15.990
with the value we
just encountered.

45
00:02:15.990 --> 00:02:19.080
Otherwise, we'll just keep
using our current max value.

46
00:02:19.080 --> 00:02:21.160
Notice the double dollar signs.

47
00:02:21.160 --> 00:02:23.700
These are temporary
variables defined for use

48
00:02:23.700 --> 00:02:26.260
only within the
$reduce expression,

49
00:02:26.260 --> 00:02:28.230
as we mentioned in the
aggregation structure

50
00:02:28.230 --> 00:02:30.260
and syntax lesson.

51
00:02:30.260 --> 00:02:34.260
$this refers to the current
element in the array.

52
00:02:34.260 --> 00:02:37.680
$value refers to the
accumulator value.

53
00:02:37.680 --> 00:02:40.930
It will do this for every
element in the array.

54
00:02:40.930 --> 00:02:43.920
OK, let's run this.

55
00:02:43.920 --> 00:02:47.640
And we see the max high was 87.

56
00:02:47.640 --> 00:02:49.960
Wow, that was
pretty complicated.

57
00:02:49.960 --> 00:02:54.330
Let's look at an easier
way to accomplish this.

58
00:02:54.330 --> 00:02:57.450
I think we can all agree
that this is much simpler.

59
00:02:57.450 --> 00:03:00.900
We use the $max group
accumulator expression

60
00:03:00.900 --> 00:03:04.720
to get the information we want.

61
00:03:04.720 --> 00:03:08.480
And again, we get
max high of 87.

62
00:03:08.480 --> 00:03:12.240
OK, let's get the minimum
average temperature.

63
00:03:12.240 --> 00:03:16.300
Here, we use the $min
accumulator expression

64
00:03:16.300 --> 00:03:19.920
and we can see our
max low was 27.

65
00:03:19.920 --> 00:03:20.800
All right.

66
00:03:20.800 --> 00:03:23.200
We now know how to
use max and min.

67
00:03:23.200 --> 00:03:26.900
We can also calculate averages
and standard deviations.

68
00:03:26.900 --> 00:03:28.900
Let's calculate the
average consumer price

69
00:03:28.900 --> 00:03:33.290
index for ice cream, as well
as the standard deviation.

70
00:03:33.290 --> 00:03:36.610
Here, we're calculating
both in one pass.

71
00:03:36.610 --> 00:03:40.270
For the average_cpi field,
we specified the $avg

72
00:03:40.270 --> 00:03:42.850
average expression,
telling it to average

73
00:03:42.850 --> 00:03:45.600
of the values in the
icecream_cpi field

74
00:03:45.600 --> 00:03:47.260
in the trends array.

75
00:03:47.260 --> 00:03:51.700
And here, the cpi_deviation is
calculated almost identically,

76
00:03:51.700 --> 00:03:54.880
except we're using the
population standard deviation.

77
00:03:54.880 --> 00:03:57.580
We're using standard
deviation pop

78
00:03:57.580 --> 00:04:00.710
because we're looking at
the entire set of data.

79
00:04:00.710 --> 00:04:03.580
However, if this was only
a sample of our data,

80
00:04:03.580 --> 00:04:07.420
we'd use the sample standard
deviation expression.

81
00:04:07.420 --> 00:04:08.110
Great.

82
00:04:08.110 --> 00:04:10.090
We can see that the
average consumer price

83
00:04:10.090 --> 00:04:14.710
index was 221.275 and
the standard deviation

84
00:04:14.710 --> 00:04:16.899
was around 6.63.

85
00:04:16.899 --> 00:04:18.610
We could use this
information to find

86
00:04:18.610 --> 00:04:21.399
data that is outside norms
to point to areas that

87
00:04:21.399 --> 00:04:23.870
might need special analysis.

88
00:04:23.870 --> 00:04:28.220
The last accumulator expression
I'd like to show is $sum.

89
00:04:28.220 --> 00:04:32.990
As the name implies, $sum sums
up the values of an array.

90
00:04:32.990 --> 00:04:38.950
We can see that the yearly
sales were 1,601 million.

91
00:04:38.950 --> 00:04:41.050
And that covers
accumulator expressions

92
00:04:41.050 --> 00:04:42.790
available within $project.

93
00:04:42.790 --> 00:04:45.770
Here are a few things
to keep in mind.

94
00:04:45.770 --> 00:04:48.880
The available accumulator
expressions in $project

95
00:04:48.880 --> 00:04:53.920
are sum, average, max, min,
standard deviation population,

96
00:04:53.920 --> 00:04:56.650
and standard deviation sample.

97
00:04:56.650 --> 00:04:59.680
Within $project, these
expressions will not carry

98
00:04:59.680 --> 00:05:02.800
their value forward and operate
across multiple documents.

99
00:05:02.800 --> 00:05:06.190
For this, we'd need to use
the unwind stage and group

100
00:05:06.190 --> 00:05:08.440
accumulator expressions.

101
00:05:08.440 --> 00:05:10.660
For more complex
calculations, it's

102
00:05:10.660 --> 00:05:14.360
handy to know how to
use $reduce and $map.