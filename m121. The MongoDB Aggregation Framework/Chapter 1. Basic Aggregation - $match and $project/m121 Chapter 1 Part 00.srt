
1
00:00:00.000 --> 00:00:01.250


2
00:00:01.250 --> 00:00:04.010
Now that we've discussed the
concept of what pipelines are,

3
00:00:04.010 --> 00:00:06.065
and have given you an
overview of aggregation,

4
00:00:06.065 --> 00:00:09.260
and structure, and syntax,
it's time we learn about one

5
00:00:09.260 --> 00:00:12.500
of the most important
stages, $match.

6
00:00:12.500 --> 00:00:15.140
The $match state is vital to
a successful and performing

7
00:00:15.140 --> 00:00:16.090
pipeline.

8
00:00:16.090 --> 00:00:17.990
He should come as
early as possible.

9
00:00:17.990 --> 00:00:20.930
And you were free to use as
many $match changes as necessary

10
00:00:20.930 --> 00:00:22.880
in your pipeline.

11
00:00:22.880 --> 00:00:25.250
Here is a basic
syntax for $match.

12
00:00:25.250 --> 00:00:27.670
Since it is an
aggregation operator,

13
00:00:27.670 --> 00:00:30.350
we prepend a dollar
sign to the name.

14
00:00:30.350 --> 00:00:33.110
Again, $match may be
used multiple times.

15
00:00:33.110 --> 00:00:34.610
And virtually every
other stage can

16
00:00:34.610 --> 00:00:37.130
be used after it, with a
few exceptions that we'll

17
00:00:37.130 --> 00:00:39.170
cover later in the course.

18
00:00:39.170 --> 00:00:41.600
Instrumental in understanding
$match and the context

19
00:00:41.600 --> 00:00:43.940
of an aggregation
pipeline, I invite

20
00:00:43.940 --> 00:00:47.380
you to think of $match as a
filter, rather than a find.

21
00:00:47.380 --> 00:00:49.710
We configure the filters
in our $match stage.

22
00:00:49.710 --> 00:00:52.700
And as documents flow in, only
those that meet our criteria

23
00:00:52.700 --> 00:00:55.250
are passed further
in the pipeline.

24
00:00:55.250 --> 00:00:59.910
Here, our $match stage will only
let circles and stars through.

25
00:00:59.910 --> 00:01:04.910
$match uses standard MongoDB
read operation query syntax.

26
00:01:04.910 --> 00:01:08.480
We can perform matches based
on comparison, logic, arrays,

27
00:01:08.480 --> 00:01:09.930
and much more.

28
00:01:09.930 --> 00:01:13.290
The only limitations are, we
can't use the $where operator.

29
00:01:13.290 --> 00:01:15.710
And if we want to
use a $test operator,

30
00:01:15.710 --> 00:01:18.905
the $match stage must be the
first stage in a pipeline.

31
00:01:18.905 --> 00:01:21.170
If $match is the
first stage, it can

32
00:01:21.170 --> 00:01:23.510
take advantage of
indexes, which increases

33
00:01:23.510 --> 00:01:25.400
the speed of our queries.

34
00:01:25.400 --> 00:01:28.640
Again, $match should come
early in our pipelines.

35
00:01:28.640 --> 00:01:30.560
As a reminder and
for reference, you

36
00:01:30.560 --> 00:01:33.770
can find a link to this
page just below the video.

37
00:01:33.770 --> 00:01:38.300
We encourage you to bookmark
this page for future reference.

38
00:01:38.300 --> 00:01:40.580
Here's an example
of $match in use.

39
00:01:40.580 --> 00:01:43.400
If I ask you the following
aggregation, which

40
00:01:43.400 --> 00:01:45.740
filters the solar
system collection,

41
00:01:45.740 --> 00:01:48.590
allowing only documents with
types that don't equal star

42
00:01:48.590 --> 00:01:54.080
through, I can see that I
get the results I expected.

43
00:01:54.080 --> 00:01:57.720
To show that $match uses
the MongoDB query syntax,

44
00:01:57.720 --> 00:02:02.060
let's use find to see if
we get identical results.

45
00:02:02.060 --> 00:02:03.880
The same results.

46
00:02:03.880 --> 00:02:06.500
Let's observe this another way.

47
00:02:06.500 --> 00:02:09.080
First, let's count the
number of documents

48
00:02:09.080 --> 00:02:11.570
with types that
don't equal star.

49
00:02:11.570 --> 00:02:16.310
It should be eight, now let's
see how many documents make it

50
00:02:16.310 --> 00:02:17.750
through our $match stage.

51
00:02:17.750 --> 00:02:20.930
I'm going to use the utility
station this example called

52
00:02:20.930 --> 00:02:24.450
count, that you'll
learn about later.

53
00:02:24.450 --> 00:02:26.570
Here, we can see
that eight documents

54
00:02:26.570 --> 00:02:28.490
pass through our aggregation.

55
00:02:28.490 --> 00:02:30.530
Sorry, Pluto.

56
00:02:30.530 --> 00:02:34.580
Lastly, $match does not have
any mechanism for projection.

57
00:02:34.580 --> 00:02:37.280
With find, we can do
something like this

58
00:02:37.280 --> 00:02:40.550
if we want to project out
the undescribed field.

59
00:02:40.550 --> 00:02:42.590
Although this may seem
like a limitation,

60
00:02:42.590 --> 00:02:45.050
we will soon learn about a
powerful stage that allows us

61
00:02:45.050 --> 00:02:48.600
to do this and much, much more.

62
00:02:48.600 --> 00:02:50.120
And that's it for $match.

63
00:02:50.120 --> 00:02:52.340
Again, we encourage
you to think of $match

64
00:02:52.340 --> 00:02:54.680
as more of a filter than a find.

65
00:02:54.680 --> 00:02:57.580
Once documents are in
an aggregation pipeline,

66
00:02:57.580 --> 00:03:00.320
and we're shaping them with
new fields and new data,

67
00:03:00.320 --> 00:03:04.130
we'll be using $match heavily
to keep filtering documents out.

68
00:03:04.130 --> 00:03:06.090
Some key things to remember.

69
00:03:06.090 --> 00:03:09.710
A $match stage may contain
a $text query operator,

70
00:03:09.710 --> 00:03:12.900
but it must be the first
stage in the pipeline.

71
00:03:12.900 --> 00:03:15.980
$match come early in an
aggregation pipeline,

72
00:03:15.980 --> 00:03:18.440
you cannot use
$where with match,

73
00:03:18.440 --> 00:03:22.150
and $match uses the same
query syntax as find.