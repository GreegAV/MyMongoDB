
1
00:00:00.000 --> 00:00:01.260


2
00:00:01.260 --> 00:00:02.730
In this lesson,
we will summarize

3
00:00:02.730 --> 00:00:04.500
some additional
patterns that may also

4
00:00:04.500 --> 00:00:07.250
be beneficial in your design.

5
00:00:07.250 --> 00:00:08.820
The following patterns
are less often

6
00:00:08.820 --> 00:00:11.890
applied in designs than the
one we have covered so far.

7
00:00:11.890 --> 00:00:14.010
However, it is a beneficial
to be aware of them

8
00:00:14.010 --> 00:00:17.820
so that you can recognize them
when you may need to use them.

9
00:00:17.820 --> 00:00:19.350
The approximation
pattern is used

10
00:00:19.350 --> 00:00:21.630
to reduce the number of
resources needed to perform

11
00:00:21.630 --> 00:00:23.520
some write operations.

12
00:00:23.520 --> 00:00:25.560
This pattern uses an
approximation function

13
00:00:25.560 --> 00:00:28.370
to produce a
result. For example,

14
00:00:28.370 --> 00:00:30.730
if an application wants
to track page views,

15
00:00:30.730 --> 00:00:33.640
it could write to the database
every time a page is viewed,

16
00:00:33.640 --> 00:00:35.710
but this could quickly
overload your database

17
00:00:35.710 --> 00:00:39.070
with hundreds of thousands
of extra writes per day.

18
00:00:39.070 --> 00:00:41.950
In this case, instead,
an approximation function

19
00:00:41.950 --> 00:00:45.100
can be used to increment the
counter only once in a while,

20
00:00:45.100 --> 00:00:47.867
instead of doing a write for
each individual page view

21
00:00:47.867 --> 00:00:48.700
add from the server.

22
00:00:48.700 --> 00:00:51.970


23
00:00:51.970 --> 00:00:53.650
The approximation
pattern is used

24
00:00:53.650 --> 00:00:57.370
whenever there is a significant
tolerance to data imprecision,

25
00:00:57.370 --> 00:00:59.650
or when an operation
is expensive to compute

26
00:00:59.650 --> 00:01:03.760
with very little value
added by precision.

27
00:01:03.760 --> 00:01:06.050
Its implementation is
to do fewer writes,

28
00:01:06.050 --> 00:01:08.350
but with a higher payload.

29
00:01:08.350 --> 00:01:10.000
The application can
do the operation

30
00:01:10.000 --> 00:01:12.870
every 10 operations,
100 operations,

31
00:01:12.870 --> 00:01:16.800
or whatever factor makes sense.

32
00:01:16.800 --> 00:01:19.380
Typical use cases for
the approximation pattern

33
00:01:19.380 --> 00:01:22.860
are web page counters, any
counters with tolerance

34
00:01:22.860 --> 00:01:26.670
to imprecision,
metric statistics.

35
00:01:26.670 --> 00:01:28.540
The typical benefits
of this pattern

36
00:01:28.540 --> 00:01:31.190
are a reduction in
the number of writes,

37
00:01:31.190 --> 00:01:34.390
less write contention while
updating the same documents,

38
00:01:34.390 --> 00:01:36.580
statistically
valid numbers, even

39
00:01:36.580 --> 00:01:38.853
if not exact per unit of time.

40
00:01:38.853 --> 00:01:40.270
The implementation
of this pattern

41
00:01:40.270 --> 00:01:43.990
must reside in the
client side application.

42
00:01:43.990 --> 00:01:46.360
This pattern is not
specific to MongoDB.

43
00:01:46.360 --> 00:01:48.680
It can be used with
any other databases.

44
00:01:48.680 --> 00:01:51.340
However, the need for
this sort of optimization

45
00:01:51.340 --> 00:01:55.460
surfaces more often with
big data applications.

46
00:01:55.460 --> 00:01:58.400
Our next pattern is used to
handle potential outliers

47
00:01:58.400 --> 00:01:59.600
in your data.

48
00:01:59.600 --> 00:02:01.640
An outlier is something
that stands out

49
00:02:01.640 --> 00:02:03.380
from the rest of the crowd.

50
00:02:03.380 --> 00:02:05.180
In the world of big
data, standing out

51
00:02:05.180 --> 00:02:06.860
means you may have a
characteristic that

52
00:02:06.860 --> 00:02:10.070
is few orders of magnitude
higher than the norm.

53
00:02:10.070 --> 00:02:12.890
For example, a famous singer
may have 100 million followers

54
00:02:12.890 --> 00:02:15.780
on the social media app,
while the majority of users

55
00:02:15.780 --> 00:02:18.890
have less than 1,000 followers.

56
00:02:18.890 --> 00:02:21.680
The danger with outliers is
that they could drive developers

57
00:02:21.680 --> 00:02:25.160
to implement a solution that
is suboptimal for 99.99%

58
00:02:25.160 --> 00:02:29.180
percent of use cases just
to accommodate the outlier.

59
00:02:29.180 --> 00:02:30.890
Implementing a
solution like this

60
00:02:30.890 --> 00:02:34.800
will honestly harm the
majority of queries.

61
00:02:34.800 --> 00:02:37.530
Do not be afraid of implementing
a design that works well

62
00:02:37.530 --> 00:02:39.720
for the vast
majority of use cases

63
00:02:39.720 --> 00:02:43.380
and then identifies these
outliers as exceptions.

64
00:02:43.380 --> 00:02:45.120
The application can
then be instructed

65
00:02:45.120 --> 00:02:49.440
to handle just these
outliers differently.

66
00:02:49.440 --> 00:02:51.150
Here's an example
of implementation

67
00:02:51.150 --> 00:02:53.340
where a document
representing a movie

68
00:02:53.340 --> 00:02:57.030
has a field to store a list
of extras, up to 1,000.

69
00:02:57.030 --> 00:02:59.340
This will work for
almost every movie.

70
00:02:59.340 --> 00:03:02.610
If a movie happens to have
more than 1,000 extras,

71
00:03:02.610 --> 00:03:04.620
it refers to additional
documents that

72
00:03:04.620 --> 00:03:05.970
contain the rest of the extras.

73
00:03:05.970 --> 00:03:09.570


74
00:03:09.570 --> 00:03:11.690
Typical use cases for
the outlier pattern

75
00:03:11.690 --> 00:03:13.680
are social networks
and other applications

76
00:03:13.680 --> 00:03:17.040
related to popularity, apps
containing famous people

77
00:03:17.040 --> 00:03:18.720
or objects.

78
00:03:18.720 --> 00:03:21.770
The main benefit of this pattern
is that the application remains

79
00:03:21.770 --> 00:03:23.990
optimized for most use cases.

80
00:03:23.990 --> 00:03:25.910
The drawback is that
the application must

81
00:03:25.910 --> 00:03:28.160
handle the outliers separately.

82
00:03:28.160 --> 00:03:29.930
And it makes it harder
to write queries

83
00:03:29.930 --> 00:03:31.700
that can process
the whole data set

84
00:03:31.700 --> 00:03:35.120
in the one uniform operation.

85
00:03:35.120 --> 00:03:37.310
As with other
patterns, this one also

86
00:03:37.310 --> 00:03:39.710
has a handle on the client
side, meaning that it

87
00:03:39.710 --> 00:03:41.790
can be used with any database.

88
00:03:41.790 --> 00:03:45.440
However, it also surfaces more
often in modern and big data

89
00:03:45.440 --> 00:03:47.170
applications.

90
00:03:47.170 --> 00:03:50.590
To recap this lesson, we
listed some additional patterns

91
00:03:50.590 --> 00:03:52.180
that may be seen
less frequently,

92
00:03:52.180 --> 00:03:54.460
but they are still
worth knowing.

93
00:03:54.460 --> 00:03:56.590
The first is the
approximation pattern,

94
00:03:56.590 --> 00:03:59.320
which allows us to reduce
the number of resources used

95
00:03:59.320 --> 00:04:01.600
by an operation that
may not be crucial

96
00:04:01.600 --> 00:04:04.180
and can be approximated.

97
00:04:04.180 --> 00:04:06.240
The outlier pattern
allows your apps

98
00:04:06.240 --> 00:04:08.080
to optimize for the
most frequent use

99
00:04:08.080 --> 00:04:12.457
cases, while still successfully
handling important outliers.

100
00:04:12.457 --> 00:04:12.957
