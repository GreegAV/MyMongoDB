
1
00:00:00.000 --> 00:00:00.500


2
00:00:00.500 --> 00:00:02.240
Commonly, a one-to-one
relationship

3
00:00:02.240 --> 00:00:05.750
is represented by a single
table in a tabular database.

4
00:00:05.750 --> 00:00:08.240
In general, the same
applies to MongoDB.

5
00:00:08.240 --> 00:00:10.100
For example a
person's name, date

6
00:00:10.100 --> 00:00:12.890
of birth, and email address
would be kept together

7
00:00:12.890 --> 00:00:14.540
in the same document.

8
00:00:14.540 --> 00:00:16.940
All these fields have a
one-to-one relationship

9
00:00:16.940 --> 00:00:17.630
with each other.

10
00:00:17.630 --> 00:00:21.890
A user in the system has
one and only one name,

11
00:00:21.890 --> 00:00:24.190
has one and only
one date of birth,

12
00:00:24.190 --> 00:00:28.730
and is associated with one
and only one email address.

13
00:00:28.730 --> 00:00:30.650
When we group information
together, that

14
00:00:30.650 --> 00:00:32.689
is in two different
entities, we refer

15
00:00:32.689 --> 00:00:35.000
to this action as embedding.

16
00:00:35.000 --> 00:00:37.250
This is in contrast to
grouping fields together

17
00:00:37.250 --> 00:00:38.630
in a given entity.

18
00:00:38.630 --> 00:00:42.330
We refer to those fields as
attributes of the entities.

19
00:00:42.330 --> 00:00:46.010
The group fields can appear
side by side in the document.

20
00:00:46.010 --> 00:00:48.170
Or we can use the
document model ability

21
00:00:48.170 --> 00:00:52.280
to add sub-documents to create
logical groups of information.

22
00:00:52.280 --> 00:00:55.940
This capability also allows us
to embed the document or entity

23
00:00:55.940 --> 00:00:58.250
inside another one.

24
00:00:58.250 --> 00:01:00.590
Alternatively to
embedding the information,

25
00:01:00.590 --> 00:01:03.680
we can divide the fields
into many documents,

26
00:01:03.680 --> 00:01:07.010
usually in separate collections
and reference one document

27
00:01:07.010 --> 00:01:09.080
from another one.

28
00:01:09.080 --> 00:01:11.090
Using our product
catalog use case,

29
00:01:11.090 --> 00:01:13.340
let's have a look at all
these representations

30
00:01:13.340 --> 00:01:16.400
of our one-to-one relationship.

31
00:01:16.400 --> 00:01:19.160
The most common way to represent
a one-to-one relationship

32
00:01:19.160 --> 00:01:21.800
between pieces of data
is to put the fields

33
00:01:21.800 --> 00:01:25.520
with their values in the
document as described earlier.

34
00:01:25.520 --> 00:01:28.440
Using the user's
collection as an example,

35
00:01:28.440 --> 00:01:30.260
I would keep track
of a given user,

36
00:01:30.260 --> 00:01:33.290
the address we use for billing,
and the default shipping

37
00:01:33.290 --> 00:01:35.000
address if different.

38
00:01:35.000 --> 00:01:38.720
A user as only one street
address, city, and zip

39
00:01:38.720 --> 00:01:41.460
code for billing and
only one street address,

40
00:01:41.460 --> 00:01:45.060
city, and zip code used as
the default shipping address.

41
00:01:45.060 --> 00:01:47.570
This address information
may profit from a little bit

42
00:01:47.570 --> 00:01:49.730
more organization.

43
00:01:49.730 --> 00:01:51.740
Using the power of
the document model,

44
00:01:51.740 --> 00:01:55.850
regroup each set of address
information into a subgroup.

45
00:01:55.850 --> 00:01:58.850
Now, we still have a one-to-one
relationship, however,

46
00:01:58.850 --> 00:02:02.090
we can't describe it as a
user having one and only

47
00:02:02.090 --> 00:02:04.610
one billing address,
and having one and only

48
00:02:04.610 --> 00:02:06.250
one shipping address.

49
00:02:06.250 --> 00:02:09.650
The document is now more clear
and easier to understand.

50
00:02:09.650 --> 00:02:11.750
This is the recommended
representation

51
00:02:11.750 --> 00:02:14.248
of a one-to-one relationship.

52
00:02:14.248 --> 00:02:16.040
Now let's say there is
a lot of information

53
00:02:16.040 --> 00:02:17.540
about a given object
in our product

54
00:02:17.540 --> 00:02:19.700
catalog like our stores.

55
00:02:19.700 --> 00:02:21.980
In this example, the
list of staff employees

56
00:02:21.980 --> 00:02:24.560
is kept within the
store document.

57
00:02:24.560 --> 00:02:26.600
If most of the time
we create the stores,

58
00:02:26.600 --> 00:02:28.790
we don't care about
the staff information,

59
00:02:28.790 --> 00:02:31.130
we could separate out
this set of information,

60
00:02:31.130 --> 00:02:33.830
placing it in a
second collection.

61
00:02:33.830 --> 00:02:37.350
Consequently this adds some
complexity to our model.

62
00:02:37.350 --> 00:02:41.780
So we should only do it for
schema optimization reasons.

63
00:02:41.780 --> 00:02:43.640
Once we have retrieved
a given store,

64
00:02:43.640 --> 00:02:45.410
we would find
additional information

65
00:02:45.410 --> 00:02:48.710
like the manager and staff
by querying the store details

66
00:02:48.710 --> 00:02:52.820
collection using the link to
the corresponding document,

67
00:02:52.820 --> 00:02:56.840
as we do for any relation
expressed by a reference.

68
00:02:56.840 --> 00:02:59.030
In the case of a
one-to-one relationship,

69
00:02:59.030 --> 00:03:01.610
it is easy to simply
use the same value, here

70
00:03:01.610 --> 00:03:04.550
our store ID in both documents.

71
00:03:04.550 --> 00:03:07.190
We also want to prevent
this one-to-one relationship

72
00:03:07.190 --> 00:03:12.050
from becoming a one-to-many
relationship for subdocuments.

73
00:03:12.050 --> 00:03:14.090
In order to do so,
we need to ensure

74
00:03:14.090 --> 00:03:16.550
that the values in
our store ID field

75
00:03:16.550 --> 00:03:19.280
are unique for both collections.

76
00:03:19.280 --> 00:03:22.850
To recap this lesson, for
one-to-one relationships,

77
00:03:22.850 --> 00:03:26.810
prefer embedding over
referencing for simplicity.

78
00:03:26.810 --> 00:03:30.080
Use subdocuments to
organize the fields.

79
00:03:30.080 --> 00:03:33.550
Use a reference for
optimization purposes.

80
00:03:33.550 --> 00:03:34.203
