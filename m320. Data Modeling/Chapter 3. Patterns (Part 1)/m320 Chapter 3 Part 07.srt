
1
00:00:00.000 --> 00:00:01.180


2
00:00:01.180 --> 00:00:04.210
Do you have nightmares about
long and complex SQL queries

3
00:00:04.210 --> 00:00:06.640
performing too many joins?

4
00:00:06.640 --> 00:00:09.460
Even if you migrated from a
10 tables relational model

5
00:00:09.460 --> 00:00:12.740
in the tabular database to a 3
collections model in MongoDB,

6
00:00:12.740 --> 00:00:14.980
you might still
find yourself doing

7
00:00:14.980 --> 00:00:17.260
a lot of queries that
need to join data

8
00:00:17.260 --> 00:00:19.300
from different collections.

9
00:00:19.300 --> 00:00:21.700
For sure, your MongoDB
queries are nowhere

10
00:00:21.700 --> 00:00:24.730
going to be as
complicated as in SQL.

11
00:00:24.730 --> 00:00:28.240
But in the world of big data,
anything you do too often

12
00:00:28.240 --> 00:00:31.610
can become a liability
for your performance.

13
00:00:31.610 --> 00:00:34.900
There are a few ways you
can do joins in MongoDB.

14
00:00:34.900 --> 00:00:36.670
Before the MongoDB
servers supported

15
00:00:36.670 --> 00:00:39.750
any joining facilities,
the only possible way

16
00:00:39.750 --> 00:00:42.730
was to do the joins in
the application side.

17
00:00:42.730 --> 00:00:44.650
You retrieve a document
from one collection

18
00:00:44.650 --> 00:00:48.040
and perform a second query that
retrieved the linked documents

19
00:00:48.040 --> 00:00:49.720
in the second collection.

20
00:00:49.720 --> 00:00:51.580
Now the aggregation
framework supports

21
00:00:51.580 --> 00:00:54.340
joins through the
$lookup operation.

22
00:00:54.340 --> 00:00:57.220
There is also a
$graphLookup operator

23
00:00:57.220 --> 00:01:00.540
to perform recursive queries
over the same collection,

24
00:01:00.540 --> 00:01:03.280
a recursive self-join,
similar to the ones you

25
00:01:03.280 --> 00:01:06.840
find in graphed other bases.

26
00:01:06.840 --> 00:01:07.460
But wait.

27
00:01:07.460 --> 00:01:09.450
There is one more
method, and it is

28
00:01:09.450 --> 00:01:11.790
to avoid doing a physical join.

29
00:01:11.790 --> 00:01:15.690
You can embed a one-to-many
relationship on the one side.

30
00:01:15.690 --> 00:01:19.000
Now, what if the join is
coming from the opposite side?

31
00:01:19.000 --> 00:01:23.550
We want to join the one
side into the many side.

32
00:01:23.550 --> 00:01:26.010
An example will be a
collection of orders

33
00:01:26.010 --> 00:01:29.660
which have a many-to-one
relationship with a customer.

34
00:01:29.660 --> 00:01:32.030
One customer can
have many orders,

35
00:01:32.030 --> 00:01:35.020
and one order belongs
to one customer.

36
00:01:35.020 --> 00:01:37.910
A many-to-one
relationship is, in fact,

37
00:01:37.910 --> 00:01:39.830
a one-to-many
relationship looked

38
00:01:39.830 --> 00:01:42.810
at from the opposite side.

39
00:01:42.810 --> 00:01:45.840
Let's say that our applications
focus is on order management

40
00:01:45.840 --> 00:01:47.920
and fulfillment.

41
00:01:47.920 --> 00:01:50.260
And we will query
for specific orders

42
00:01:50.260 --> 00:01:52.300
way more often than
query all the orders

43
00:01:52.300 --> 00:01:54.970
for a given customer.

44
00:01:54.970 --> 00:01:57.180
In other words, the
center of attention

45
00:01:57.180 --> 00:02:01.080
is more often the order
for this type of query.

46
00:02:01.080 --> 00:02:03.310
If we want to embed the
information from one side,

47
00:02:03.310 --> 00:02:06.660
for example, the address of
the customer, into the order,

48
00:02:06.660 --> 00:02:10.080
we are duplicating this
info in all orders.

49
00:02:10.080 --> 00:02:12.270
The preferred way to
do this duplication,

50
00:02:12.270 --> 00:02:15.570
which we identify as our
extended reference pattern,

51
00:02:15.570 --> 00:02:19.260
is only to copy the fields
you need to access frequently,

52
00:02:19.260 --> 00:02:21.460
leaving the rest of the
information in the source

53
00:02:21.460 --> 00:02:22.920
collection.

54
00:02:22.920 --> 00:02:25.170
Basically, instead of
adding a simple reference

55
00:02:25.170 --> 00:02:27.600
from the document in
the invoice collection

56
00:02:27.600 --> 00:02:30.330
to this one in the
customer collection,

57
00:02:30.330 --> 00:02:32.820
we built an extended
reference, meaning

58
00:02:32.820 --> 00:02:35.160
the reference is rich
enough, that we will not

59
00:02:35.160 --> 00:02:39.640
need to perform the
join most of the time.

60
00:02:39.640 --> 00:02:41.880
Every time we talk
about duplicating data,

61
00:02:41.880 --> 00:02:45.600
it is worth understanding
the consequence.

62
00:02:45.600 --> 00:02:50.000
The first thing to understand
is how to minimize duplication.

63
00:02:50.000 --> 00:02:52.450
The extended reference
pattern will work best

64
00:02:52.450 --> 00:02:55.610
if you select fields
that do not change often.

65
00:02:55.610 --> 00:02:57.340
For example, the
user ID of a person

66
00:02:57.340 --> 00:03:00.340
can be complemented by
his name, as people rarely

67
00:03:00.340 --> 00:03:02.070
change their name.

68
00:03:02.070 --> 00:03:04.930
Also, only bring
the fields you need.

69
00:03:04.930 --> 00:03:06.610
When we look up
an invoice, we may

70
00:03:06.610 --> 00:03:09.630
want to see the list of products
with their supplier name.

71
00:03:09.630 --> 00:03:13.000
But there is little reason
to show the phone number

72
00:03:13.000 --> 00:03:14.290
of the supplier at this point.

73
00:03:14.290 --> 00:03:15.730
If we want additional
information,

74
00:03:15.730 --> 00:03:19.060
we can solve the
supplier collection.

75
00:03:19.060 --> 00:03:20.860
Then, when the source
field is updated,

76
00:03:20.860 --> 00:03:23.830
identify what should
be change, meaning

77
00:03:23.830 --> 00:03:26.650
the list of extended
references, and the

78
00:03:26.650 --> 00:03:28.240
when should they be changed.

79
00:03:28.240 --> 00:03:31.310
For example, it may be necessary
to update them right away.

80
00:03:31.310 --> 00:03:34.350
However, sometimes it is OK to
leave the data alone and update

81
00:03:34.350 --> 00:03:38.140
it later in a batch, when
you have available resources.

82
00:03:38.140 --> 00:03:39.760
For example,
changing the ranking

83
00:03:39.760 --> 00:03:41.710
of my best-selling
products does not

84
00:03:41.710 --> 00:03:44.800
require me to instantly update
all the products that spell out

85
00:03:44.800 --> 00:03:47.530
the rank of the
product on their page.

86
00:03:47.530 --> 00:03:49.600
Interesting enough,
the example we

87
00:03:49.600 --> 00:03:51.640
use with invoices
and addresses is

88
00:03:51.640 --> 00:03:53.810
a case where duplication
is not a problem,

89
00:03:53.810 --> 00:03:56.050
but rather the right solution.

90
00:03:56.050 --> 00:03:58.240
When the invoice was
created, the customer

91
00:03:58.240 --> 00:04:01.720
may have lived in one location,
and they have moved since.

92
00:04:01.720 --> 00:04:03.950
If we were to keep the last
address of the customer

93
00:04:03.950 --> 00:04:05.980
in a reference in
the invoice, we

94
00:04:05.980 --> 00:04:08.980
will be pointing to the new
address, not where the products

95
00:04:08.980 --> 00:04:11.370
of this invoice were shipped.

96
00:04:11.370 --> 00:04:13.050
In this case, we
want the invoice

97
00:04:13.050 --> 00:04:15.700
to keep pointing
to the old address.

98
00:04:15.700 --> 00:04:18.943
The characteristic of the
invoice that make it work well

99
00:04:18.943 --> 00:04:20.610
are the fact that the
invoice is created

100
00:04:20.610 --> 00:04:23.430
at a given time in the
timeline, and the invoice

101
00:04:23.430 --> 00:04:25.750
remains static over time.

102
00:04:25.750 --> 00:04:28.110
Any other entity
sharing those characters

103
00:04:28.110 --> 00:04:30.750
is likely to work the
same way, in the sense

104
00:04:30.750 --> 00:04:33.170
that duplication is not an
issue, but a good thing.

105
00:04:33.170 --> 00:04:36.340


106
00:04:36.340 --> 00:04:39.580
Time to formalize our
extended reference pattern.

107
00:04:39.580 --> 00:04:42.100
The problem the extended
reference pattern addresses

108
00:04:42.100 --> 00:04:46.370
is avoiding joining too many
pieces of data at query time.

109
00:04:46.370 --> 00:04:48.520
If the query is frequent
enough and generates

110
00:04:48.520 --> 00:04:50.480
a considerable
amount of lookups,

111
00:04:50.480 --> 00:04:55.090
pre-joining the data can be
done by applying this pattern.

112
00:04:55.090 --> 00:04:56.980
The solution is to
identify the fields you

113
00:04:56.980 --> 00:04:59.800
are interested in on
the looked up side

114
00:04:59.800 --> 00:05:04.150
and make a copy of those
fields in the main object.

115
00:05:04.150 --> 00:05:05.890
You will see this
pattern often used

116
00:05:05.890 --> 00:05:08.140
in catalogs, mobile
applications,

117
00:05:08.140 --> 00:05:10.000
and real-time analytics.

118
00:05:10.000 --> 00:05:13.060
The common thread here is to
reduce the latency of your read

119
00:05:13.060 --> 00:05:17.200
operations or avoid round
trips or avoid touching too

120
00:05:17.200 --> 00:05:19.480
many pieces of data.

121
00:05:19.480 --> 00:05:21.760
You will get faster
reads, due to the reduced

122
00:05:21.760 --> 00:05:24.400
number of joints and lookups.

123
00:05:24.400 --> 00:05:27.310
The price you will pay for
the improvement in performance

124
00:05:27.310 --> 00:05:29.770
is the fact that you
may have to manage

125
00:05:29.770 --> 00:05:32.050
a fair amount of
duplication, especially

126
00:05:32.050 --> 00:05:34.540
if you embed Many-to-One
relationships,

127
00:05:34.540 --> 00:05:38.300
where the fields
change or mutate a lot.

128
00:05:38.300 --> 00:05:39.050
Here you go.

129
00:05:39.050 --> 00:05:42.490
This is our extended
reference pattern.