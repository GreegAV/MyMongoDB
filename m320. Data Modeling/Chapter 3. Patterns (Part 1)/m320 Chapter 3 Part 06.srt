
1
00:00:00.000 --> 00:00:00.500


2
00:00:00.500 --> 00:00:02.029
The attribute pattern.

3
00:00:02.029 --> 00:00:05.220
Polymorphic, one of the most
frequent schema design patterns

4
00:00:05.220 --> 00:00:06.930
used in MongoDB.

5
00:00:06.930 --> 00:00:08.910
Polymorphic is when you
put different products,

6
00:00:08.910 --> 00:00:11.760
like these three examples, in
one collection without going

7
00:00:11.760 --> 00:00:14.160
through relational acrobatics.

8
00:00:14.160 --> 00:00:15.930
Our products should
have an identification

9
00:00:15.930 --> 00:00:19.080
like manufacturer, brand,
sub-brand, enterprise

10
00:00:19.080 --> 00:00:21.720
that are common across
the majority of products.

11
00:00:21.720 --> 00:00:23.340
Products' additional
fields that are

12
00:00:23.340 --> 00:00:27.420
common across many products,
like color and size--

13
00:00:27.420 --> 00:00:30.060
either these values may
have different units

14
00:00:30.060 --> 00:00:33.340
and means different things
for the different products.

15
00:00:33.340 --> 00:00:35.490
For example the
size of a beverage

16
00:00:35.490 --> 00:00:38.730
made in the US maybe
measured as ounces,

17
00:00:38.730 --> 00:00:40.980
while the same
drink in Europe will

18
00:00:40.980 --> 00:00:43.500
be measured in milliliters.

19
00:00:43.500 --> 00:00:45.810
As for MongoDB
charger, well, the size

20
00:00:45.810 --> 00:00:49.410
is measured according
to its three dimensions.

21
00:00:49.410 --> 00:00:51.530
For the size of a
Cherry Coke six-pack,

22
00:00:51.530 --> 00:00:54.690
we would say 12 ounces for
a single can, six times

23
00:00:54.690 --> 00:00:58.500
12 ounces, or 72 ounces to
count the full six-pack.

24
00:00:58.500 --> 00:01:01.050
Ultimately we could list
the physical dimension

25
00:01:01.050 --> 00:01:04.180
and report the amount of
the liquid in that field.

26
00:01:04.180 --> 00:01:06.630
Note that physical
dimensions for a beverage

27
00:01:06.630 --> 00:01:08.460
make sense if your
main concern is

28
00:01:08.460 --> 00:01:10.940
the storage or transportation
of the product, not

29
00:01:10.940 --> 00:01:12.370
the drinking of it.

30
00:01:12.370 --> 00:01:15.120
Then there is the
third list of fields,

31
00:01:15.120 --> 00:01:17.310
the set of fields
that are not going

32
00:01:17.310 --> 00:01:19.830
to exist in all the products.

33
00:01:19.830 --> 00:01:22.560
You may not even know
where they are in advance.

34
00:01:22.560 --> 00:01:24.630
They may exist in
the new description

35
00:01:24.630 --> 00:01:26.470
that your supplier
is providing you.

36
00:01:26.470 --> 00:01:30.360
For a sugary drink, you may want
to know the type of sweetener,

37
00:01:30.360 --> 00:01:32.130
while for a battery,
you are more

38
00:01:32.130 --> 00:01:33.630
interested in its
specifications,

39
00:01:33.630 --> 00:01:36.180
like the amount of
electricity provides.

40
00:01:36.180 --> 00:01:39.510
For the characteristics that
are almost always present,

41
00:01:39.510 --> 00:01:43.590
we keep them as fields those
qualify as the common schema

42
00:01:43.590 --> 00:01:45.070
part.

43
00:01:45.070 --> 00:01:50.040
Schema and indexing may appear
in the third list of fields.

44
00:01:50.040 --> 00:01:52.200
To search effectively
on one of those fields,

45
00:01:52.200 --> 00:01:53.310
you need an index.

46
00:01:53.310 --> 00:01:56.850
For example, searching on
the capacity for my battery

47
00:01:56.850 --> 00:01:58.890
would require an index.

48
00:01:58.890 --> 00:02:01.330
Searching on the voltage
output of my battery

49
00:02:01.330 --> 00:02:03.480
would also require an index.

50
00:02:03.480 --> 00:02:07.950
If you have tons of fields,
you may have a lot of indexes.

51
00:02:07.950 --> 00:02:09.690
Remember some of
the characteristics

52
00:02:09.690 --> 00:02:13.170
may be very specific to a few
products and the list of fields

53
00:02:13.170 --> 00:02:14.730
may be unpredictable.

54
00:02:14.730 --> 00:02:17.310
Each addition or discovery
of a new characteristic

55
00:02:17.310 --> 00:02:21.420
may require you to add an index,
modify your schema validators,

56
00:02:21.420 --> 00:02:24.570
and modify your user interface
to show the new information.

57
00:02:24.570 --> 00:02:28.860
For this case you want to
use the attribute pattern.

58
00:02:28.860 --> 00:02:30.780
To use the attribute
pattern you start

59
00:02:30.780 --> 00:02:34.000
by identifying the list of
fields you want to transpose.

60
00:02:34.000 --> 00:02:38.550
Here we transpose the fields
input, output, and capacity.

61
00:02:38.550 --> 00:02:40.920
Then for each field
in associated value,

62
00:02:40.920 --> 00:02:42.720
we create that pair.

63
00:02:42.720 --> 00:02:45.660
The name of the keys for
those pairs do not matter.

64
00:02:45.660 --> 00:02:50.280
Only for consistency, let's
use K for key and V for value,

65
00:02:50.280 --> 00:02:52.980
as some of our
aggregation functions do.

66
00:02:52.980 --> 00:02:57.120
Under the field name K, we put
the name of the original field

67
00:02:57.120 --> 00:02:58.620
as the value.

68
00:02:58.620 --> 00:03:01.800
For the first one, the
field was named "input,"

69
00:03:01.800 --> 00:03:06.990
so that became the value for
K. Then the value for input

70
00:03:06.990 --> 00:03:11.910
was five volts or
1,300 milliamps,

71
00:03:11.910 --> 00:03:15.300
so this is the value
for the field V.

72
00:03:15.300 --> 00:03:19.350
Repeating the same thing for
the original field's output

73
00:03:19.350 --> 00:03:23.970
and capacity, we get three
documents, each adding a K

74
00:03:23.970 --> 00:03:26.520
and a V in them.

75
00:03:26.520 --> 00:03:28.530
Because of their
similar shape it

76
00:03:28.530 --> 00:03:32.070
is easy to place them
together under an "add_specs"

77
00:03:32.070 --> 00:03:34.260
for additional specs array.

78
00:03:34.260 --> 00:03:36.930
Note that for the
third field, not only

79
00:03:36.930 --> 00:03:39.570
do I transpose it
to a key value pair,

80
00:03:39.570 --> 00:03:42.060
but that also added a
third field called U

81
00:03:42.060 --> 00:03:44.580
to store some units separately.

82
00:03:44.580 --> 00:03:47.835
This third field qualifies
the relationship between K

83
00:03:47.835 --> 00:03:50.670
and the V. The last
thing to do is to create

84
00:03:50.670 --> 00:03:52.780
an index for all that info.

85
00:03:52.780 --> 00:03:57.120
This is done by creating
an index on "add_specs.k"

86
00:03:57.120 --> 00:03:59.790
and "add_specs.v."

87
00:03:59.790 --> 00:04:01.690
Let's look at another scenario.

88
00:04:01.690 --> 00:04:03.962
Let's say we have a document
representing a movie.

89
00:04:03.962 --> 00:04:05.670
In the document, there
are several fields

90
00:04:05.670 --> 00:04:08.190
to keep track of when
the movie was released.

91
00:04:08.190 --> 00:04:09.870
In this case, we keep
track of the dates

92
00:04:09.870 --> 00:04:13.410
when a movie was released in
the USA, in Mexico, and France,

93
00:04:13.410 --> 00:04:15.954
and when it appears in the
San Jose movie festival--

94
00:04:15.954 --> 00:04:16.829
a very nice festival.

95
00:04:16.829 --> 00:04:18.480
You should check it out.

96
00:04:18.480 --> 00:04:20.490
One thing to observe
with those fields

97
00:04:20.490 --> 00:04:23.500
is that they share the
same type of value.

98
00:04:23.500 --> 00:04:25.920
In this case, the type, date--

99
00:04:25.920 --> 00:04:29.130
more conceptually,
a release date.

100
00:04:29.130 --> 00:04:31.800
What if we want to find all
the movies released between two

101
00:04:31.800 --> 00:04:34.320
dates across all countries?

102
00:04:34.320 --> 00:04:36.060
I would have to list
all the countries

103
00:04:36.060 --> 00:04:37.920
in the festival
for each of these,

104
00:04:37.920 --> 00:04:40.140
run a separate query
for the given range,

105
00:04:40.140 --> 00:04:42.600
and aggregate all my results.

106
00:04:42.600 --> 00:04:45.720
Using the attribute pattern
and transforming those release

107
00:04:45.720 --> 00:04:48.400
dates to an array
of field pairs,

108
00:04:48.400 --> 00:04:51.990
we can change the query to this.

109
00:04:51.990 --> 00:04:54.180
We can now issue the
following simple query

110
00:04:54.180 --> 00:04:58.710
to find all movies
released in July 2017.

111
00:04:58.710 --> 00:05:01.640
For the sake of simplicity,
I'm using strings

112
00:05:01.640 --> 00:05:03.140
to illustrate the example.

113
00:05:03.140 --> 00:05:05.210
In practice, you
will save the date

114
00:05:05.210 --> 00:05:08.623
as "date" or "isodate" objects.

115
00:05:08.623 --> 00:05:10.790
Let's reorganize a little
bit around what we've been

116
00:05:10.790 --> 00:05:12.530
describing and illustrating.

117
00:05:12.530 --> 00:05:15.020
The attribute pattern
addresses the problem

118
00:05:15.020 --> 00:05:18.320
of having a lot of similar
fields in a document.

119
00:05:18.320 --> 00:05:22.100
Often, those fields have
similar value types.

120
00:05:22.100 --> 00:05:25.190
Or there's a need to search
across many of those fields

121
00:05:25.190 --> 00:05:26.660
at once.

122
00:05:26.660 --> 00:05:28.910
This pattern is
also helpful when

123
00:05:28.910 --> 00:05:33.080
only a subset of the documents
have many similar fields.

124
00:05:33.080 --> 00:05:35.840
The solution would be to
transform fields from the field

125
00:05:35.840 --> 00:05:40.400
value form into a sub-document
with two fields, a sub-document

126
00:05:40.400 --> 00:05:42.780
of two key value pairs.

127
00:05:42.780 --> 00:05:45.500
And the range contains
these sub-documents.

128
00:05:45.500 --> 00:05:47.720
And then you can
create a single index

129
00:05:47.720 --> 00:05:50.750
to catalog all those attributes.

130
00:05:50.750 --> 00:05:53.180
In this lesson, we spoke
about two typical examples

131
00:05:53.180 --> 00:05:55.020
where we often
observe this pattern.

132
00:05:55.020 --> 00:05:57.980
The first would be
characteristics of a product,

133
00:05:57.980 --> 00:06:00.620
while the second highlights
situations where the type was

134
00:06:00.620 --> 00:06:02.600
the same for many fields.

135
00:06:02.600 --> 00:06:04.520
And then, for
example, with movies,

136
00:06:04.520 --> 00:06:08.120
where a different location can
have different release dates.

137
00:06:08.120 --> 00:06:10.760
The main benefit of using
the attribute pattern

138
00:06:10.760 --> 00:06:13.250
is that it becomes more
straightforward to index

139
00:06:13.250 --> 00:06:14.750
all of these fields.

140
00:06:14.750 --> 00:06:17.390
It allows for non
deterministic field names

141
00:06:17.390 --> 00:06:19.910
meaning we don't need to
know all the possible field

142
00:06:19.910 --> 00:06:21.500
names in advance.

143
00:06:21.500 --> 00:06:24.620
We can get new ones on the
fly and still use an index

144
00:06:24.620 --> 00:06:26.510
to optimize the queries.

145
00:06:26.510 --> 00:06:29.210
Finally, another
advantage is the ability

146
00:06:29.210 --> 00:06:32.060
to qualify a relationship
between a key and a value

147
00:06:32.060 --> 00:06:34.610
by adding a third
member in our documents,

148
00:06:34.610 --> 00:06:37.640
representing the transformation.

149
00:06:37.640 --> 00:06:38.190
Here we go.

150
00:06:38.190 --> 00:06:40.760
This is the attribute pattern.

151
00:06:40.760 --> 00:06:42.290
In summary, the
attribute pattern

152
00:06:42.290 --> 00:06:44.660
is orthogonal to polymorphic.

153
00:06:44.660 --> 00:06:46.760
It helps to organize
fields that have

154
00:06:46.760 --> 00:06:49.940
either common characteristics
you want to search across,

155
00:06:49.940 --> 00:06:52.280
or fields that are
rare, or when you

156
00:06:52.280 --> 00:06:56.110
need to manage an influx of
unpredictable properties.

157
00:06:56.110 --> 00:06:59.480
It potentially reduces
the number of indexes.

158
00:06:59.480 --> 00:07:01.550
To use it, transpose
the key/values

159
00:07:01.550 --> 00:07:05.562
of the desired properties
into an array of documents.

160
00:07:05.562 --> 00:07:06.062
