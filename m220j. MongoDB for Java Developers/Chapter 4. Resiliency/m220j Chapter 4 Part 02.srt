
1
00:00:00.000 --> 00:00:00.150


2
00:00:00.150 --> 00:00:01.170
In this lesson, we're
going to discuss

3
00:00:01.170 --> 00:00:03.170
ways in which you can
make your application more

4
00:00:03.170 --> 00:00:06.432
robust with respect to how it
communicates with the database.

5
00:00:06.432 --> 00:00:08.640
So you've learned about
connection pooling all ready,

6
00:00:08.640 --> 00:00:10.223
but it's very important
so we're going

7
00:00:10.223 --> 00:00:11.800
to briefly cover it again.

8
00:00:11.800 --> 00:00:14.490
Creating a new Mongo client for
every request of the database

9
00:00:14.490 --> 00:00:16.830
might service your
application in the short term,

10
00:00:16.830 --> 00:00:19.320
but it will eventually result
in the application consuming

11
00:00:19.320 --> 00:00:21.510
and depleting available
resources that become

12
00:00:21.510 --> 00:00:23.250
more and more scarce over time.

13
00:00:23.250 --> 00:00:25.410
Connection pooling
reduces the total overhead

14
00:00:25.410 --> 00:00:27.990
associated with creating these
new connections by allowing

15
00:00:27.990 --> 00:00:30.180
the application to
recycle and reuse database

16
00:00:30.180 --> 00:00:31.980
connections for new requests.

17
00:00:31.980 --> 00:00:34.440
The M220 API you've
been given correctly

18
00:00:34.440 --> 00:00:37.710
reuses the same class or object
for all client communication,

19
00:00:37.710 --> 00:00:40.440
if you'd like to look at an
example of how we did it.

20
00:00:40.440 --> 00:00:42.810
Another way to make a more
robust database client

21
00:00:42.810 --> 00:00:45.360
is with the write
timeout or wtimeout.

22
00:00:45.360 --> 00:00:47.400
No matter how well
we engineer a system,

23
00:00:47.400 --> 00:00:50.070
we should always expect
application external resources

24
00:00:50.070 --> 00:00:52.380
like queues, networks,
and databases

25
00:00:52.380 --> 00:00:54.270
to take more time than expected.

26
00:00:54.270 --> 00:00:57.030
For an application or
consumer critical operations,

27
00:00:57.030 --> 00:00:59.220
a developer may choose
to write with w majority

28
00:00:59.220 --> 00:01:00.803
to ensure that
acknowledged rights are

29
00:01:00.803 --> 00:01:02.749
written to a majority
of nodes in the set.

30
00:01:02.749 --> 00:01:05.040
But if there's a problem on
one of the secondary nodes,

31
00:01:05.040 --> 00:01:06.665
we might not get an
acknowledgment back

32
00:01:06.665 --> 00:01:08.220
from the server for a while.

33
00:01:08.220 --> 00:01:10.710
If more writes than reads
are coming into the system,

34
00:01:10.710 --> 00:01:12.930
and operations aren't
being acknowledged,

35
00:01:12.930 --> 00:01:15.270
this will eventually
lead to system gridlock.

36
00:01:15.270 --> 00:01:18.300
But we can avoid this
gridlock by using a wtimeout.

37
00:01:18.300 --> 00:01:20.850
For any write operation
written with w majority,

38
00:01:20.850 --> 00:01:23.059
always specify a write timeout.

39
00:01:23.059 --> 00:01:24.600
The specific length
of a timeout will

40
00:01:24.600 --> 00:01:27.130
need to be determined based
on your network and hardware,

41
00:01:27.130 --> 00:01:28.838
but you should always
be setting timeouts

42
00:01:28.838 --> 00:01:30.270
on these sorts of writes.

43
00:01:30.270 --> 00:01:33.370
This wtimeout value is
determined in milliseconds.

44
00:01:33.370 --> 00:01:35.640
So this would wait for 5
seconds before timing out

45
00:01:35.640 --> 00:01:38.010
on a w majority operation.

46
00:01:38.010 --> 00:01:41.790
And lastly, always handle the
server selection timeout error.

47
00:01:41.790 --> 00:01:43.800
No ifs, ands, or buts about it.

48
00:01:43.800 --> 00:01:46.470
By handling this error,
you also passively monitor

49
00:01:46.470 --> 00:01:48.510
the health of your
application stack,

50
00:01:48.510 --> 00:01:50.940
and also become quickly aware
of any hardware or software

51
00:01:50.940 --> 00:01:53.790
problems that haven't recovered
in an adequate amount of time.

52
00:01:53.790 --> 00:01:56.370
If one of these servers goes
down, the response we get back

53
00:01:56.370 --> 00:01:57.930
might let us know what happened.

54
00:01:57.930 --> 00:02:00.090
By default, the driver's
going to wait 30 seconds

55
00:02:00.090 --> 00:02:02.610
before raising a server
selection timeout error,

56
00:02:02.610 --> 00:02:05.340
but you could change this to
suit your application's needs.

57
00:02:05.340 --> 00:02:07.770
By handling the [? server, ?]
we also passively monitor

58
00:02:07.770 --> 00:02:09.449
the health of the
application stack,

59
00:02:09.449 --> 00:02:12.120
and become quickly aware of any
hardware and software problems

60
00:02:12.120 --> 00:02:14.850
that haven't been recovered
in an adequate amount of time.

61
00:02:14.850 --> 00:02:16.650
Each driver and
programming language

62
00:02:16.650 --> 00:02:18.710
has a specific way of
dealing with errors,

63
00:02:18.710 --> 00:02:21.210
and we do handle this error in
particular in the [INAUDIBLE]

64
00:02:21.210 --> 00:02:22.380
application.

65
00:02:22.380 --> 00:02:24.240
So just to recap
here, always use

66
00:02:24.240 --> 00:02:25.960
connection pooling,
which, by default,

67
00:02:25.960 --> 00:02:28.530
will allow a connection
pool of 100 connections.

68
00:02:28.530 --> 00:02:30.632
Always specify a write
timeout for majority

69
00:02:30.632 --> 00:02:32.340
writes to make sure
that the server isn't

70
00:02:32.340 --> 00:02:33.600
waiting for too long.

71
00:02:33.600 --> 00:02:36.277
And always handles
serverSelectionTimeout errors.

72
00:02:36.277 --> 00:02:38.610
This will make sure that the
application becomes quickly

73
00:02:38.610 --> 00:02:40.710
aware of any hardware and
software problems that

74
00:02:40.710 --> 00:02:42.920
haven't recovered in time.