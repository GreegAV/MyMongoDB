In this lesson, we will cover change streams, a process that allows applications to access real-time data changes without the complexity and risk of tailing the oplog.

With change streams, you can watch all the write operations, or select a more precise set of changes that you're looking to track in your database.

For this lesson, we're going to make changes to the comments collection.

Before we start watching changes in our namespaces, we're going to set up a thread that writes some data into our database.

First, if we want to track the write changes to the collection, we can use a watch method.

This method activates a change stream response, which has the following fields in it-- operation type that can have any of the write operation values, which includes insert, update, delete, and replace.

Then the document that this operation is affecting, and the namespace that the document is in, and so on.

We rarely want to track all of the writes to a given namespace.

So in our first example, we will track all the insert operations to our collection.

Change streams allow us to express filters using the aggregation framework.

Given so, we will create an insert filter that extracts the insert operation type from the change streams document, which is created for each write event that happens in the collection.

We will populate an array of change stream documents in order to verify that the changes that we're inflicting onto our collection are correctly tracked in the thread.

Our print statement prints the documents that the change stream has picked up while running the insert process.

It looks like it picked up all the documents that it was supposed to, which is great.

Since change streams utilizes the aggregation pipeline framework, it allows us to access very precise information using that framework.

In this case, we want to track only the documents in which the even field value is 1.

For that, we need to create a criteria that matches a few fields in the change event so that we create a change stream document only for those select events.

Here we add a match stage to the aggregation pipeline, which now says that we are interested in a document if the operation type is insert, and the document inserted contains a field called even with a value of 1.

Notice that, in this case, we are accessing the inserted document both in the aggregation pipeline and in the print statement.

For that, we can use the get full document method on a change streams object, which is what we did in this and previous test case.

We were expecting five even documents to be inserted, and our expectations were met.

This time, I want to track updates.

How do we do that?

First, change the filter from tracking insert operations to update ones.

And to change it up, we now want to only see the odd ones.

Then specify that you are doing an update lookup with full document method in addition to watching.

If we don't specify that we want the full document, then the change event will only contain the update object.

The question now is, do we really need the whole updated document?

After all, we're only updating the value of one field.

In this test case, we will print out only the information that tells us about the updates that occurred in the updated document, a.k.a.

the update object that we were avoiding in the previous example.

To implement this, use the get update description in conjunction with the change streams document.

Excellent.

We see that no fields were removed, and the i field was updated with the value printed.

In this case, we were also watching only the odd updates.

But we can change that filter by modifying the aggregation pipeline that we use.

These are some of the applications of the change streams functionality.

Use this newfound knowledge responsibly.

And if you watched the lectures in order, congratulations on being done with the lessons in this course.

We hope you enjoyed it.