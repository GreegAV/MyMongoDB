
1
00:00:00.000 --> 00:00:00.500


2
00:00:00.500 --> 00:00:03.370
In this lesson, we're going
to talk about error handling.

3
00:00:03.370 --> 00:00:06.430
We will consider a few
scenarios in error categories

4
00:00:06.430 --> 00:00:09.340
and find ways to
fix those errors.

5
00:00:09.340 --> 00:00:11.500
This way, we can ensure
that your application

6
00:00:11.500 --> 00:00:13.570
is resilient to
issues that can occur

7
00:00:13.570 --> 00:00:16.540
in concurrent and
distributed systems.

8
00:00:16.540 --> 00:00:18.820
Concurrent systems
will most likely

9
00:00:18.820 --> 00:00:22.210
have situations where
duplicate keys will occur,

10
00:00:22.210 --> 00:00:25.300
while distributed systems
are prone to issues related

11
00:00:25.300 --> 00:00:28.000
to network and concurrency.

12
00:00:28.000 --> 00:00:30.340
While all of the errors
covered in this lesson

13
00:00:30.340 --> 00:00:32.680
are not very likely
to occur, it is

14
00:00:32.680 --> 00:00:35.020
helpful to know how
to deal with them

15
00:00:35.020 --> 00:00:37.750
if and when they
manifest themselves.

16
00:00:37.750 --> 00:00:39.580
First common error
can occur when

17
00:00:39.580 --> 00:00:42.160
you're trying to insert a
document in place of an already

18
00:00:42.160 --> 00:00:43.930
existing document.

19
00:00:43.930 --> 00:00:46.780
In our example, there is
already a document with id

20
00:00:46.780 --> 00:00:48.250
that equals 0.

21
00:00:48.250 --> 00:00:51.370
So inserting another document
with the same id value

22
00:00:51.370 --> 00:00:53.660
should cause a
duplicate key error.

23
00:00:53.660 --> 00:00:56.600
Let's try and see
if this is true.

24
00:00:56.600 --> 00:00:58.800
And it is true.

25
00:00:58.800 --> 00:01:00.660
In this test case,
we are specifying

26
00:01:00.660 --> 00:01:04.569
that we're expecting a
MongoWriteException error.

27
00:01:04.569 --> 00:01:07.240
So since the
previous test passed,

28
00:01:07.240 --> 00:01:09.700
it would be great to know
exactly what kind of error

29
00:01:09.700 --> 00:01:10.820
we're getting.

30
00:01:10.820 --> 00:01:13.930
So in this test case, you
can see that the error return

31
00:01:13.930 --> 00:01:17.020
is specifically
DUPLICATE_KEY error, which

32
00:01:17.020 --> 00:01:18.760
means that in order
to correct it,

33
00:01:18.760 --> 00:01:21.390
we should not be trying
to insert a document

34
00:01:21.390 --> 00:01:23.110
with an existing key.

35
00:01:23.110 --> 00:01:25.970
Let's run it.

36
00:01:25.970 --> 00:01:27.050
Excellent.

37
00:01:27.050 --> 00:01:31.370
Now to fix the error,
simply change the _id value,

38
00:01:31.370 --> 00:01:33.320
and that should do the trick.

39
00:01:33.320 --> 00:01:36.860
Another error to be on the
lookout for is the timer error.

40
00:01:36.860 --> 00:01:39.050
In this test case,
we're trying to avoid

41
00:01:39.050 --> 00:01:43.490
breaking the application by
using the try and catch block.

42
00:01:43.490 --> 00:01:46.670
This particular test case won't
cause the WriteConcernTimeout

43
00:01:46.670 --> 00:01:47.520
error.

44
00:01:47.520 --> 00:01:50.480
In fact, it is very hard to
induce a WriteConcernTimeout

45
00:01:50.480 --> 00:01:52.610
error or any of
the errors covered

46
00:01:52.610 --> 00:01:56.240
in this lesson on an application
that is running on Atlas.

47
00:01:56.240 --> 00:01:59.660
But if that does happen,
then a try catch block

48
00:01:59.660 --> 00:02:02.060
will help you identify
the situation.

49
00:02:02.060 --> 00:02:04.880
To fix a WriteConcernTimeout
error issue,

50
00:02:04.880 --> 00:02:07.340
you need to consider the
needs of your application.

51
00:02:07.340 --> 00:02:10.160
And depending on that, you can
either reduce the durability

52
00:02:10.160 --> 00:02:12.680
guarantees by changing
the WriteConcern value,

53
00:02:12.680 --> 00:02:16.432
or increase the timeout and
keep the app durability.

54
00:02:16.432 --> 00:02:19.330


55
00:02:19.330 --> 00:02:22.810
Another possible error can occur
when the WriteConcern that is

56
00:02:22.810 --> 00:02:25.150
requested cannot be fulfilled.

57
00:02:25.150 --> 00:02:28.060
For example, our replica
set has three nodes

58
00:02:28.060 --> 00:02:30.730
that were automatically
created by Atlas.

59
00:02:30.730 --> 00:02:32.620
We can dictate the
type of write concern

60
00:02:32.620 --> 00:02:35.380
that we want for our
write operations.

61
00:02:35.380 --> 00:02:39.560
In this example, we're asking
for a 5 node acknowledgment,

62
00:02:39.560 --> 00:02:41.680
which is impossible
in our situation.

63
00:02:41.680 --> 00:02:44.650
As a result, we get a
WriteConcernException.

64
00:02:44.650 --> 00:02:48.280
This error is easy to solve
by either assigning a majority

65
00:02:48.280 --> 00:02:51.100
WriteConcern or a
number that is less than

66
00:02:51.100 --> 00:02:53.235
or equal to 3, instead of 5.

67
00:02:53.235 --> 00:02:55.820


68
00:02:55.820 --> 00:02:56.930
Excellent.

69
00:02:56.930 --> 00:02:59.150
That's it for our lesson
on error handling.

70
00:02:59.150 --> 00:03:01.540
Enjoy the rest of the course.