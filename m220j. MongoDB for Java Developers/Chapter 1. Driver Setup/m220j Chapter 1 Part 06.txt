In this lesson, we're going to perform our first read operation in MongoDB using the Java driver.

We've taken care of setting up our database handle in the abstract lesson class.

So let's get started.

If you've used other drivers in the past you may be familiar with a find one collection method.

The Java driver for MongoDB includes no such method.

To find a single document, we'll use the limit() method, which you'll learn about in a later lesson.

This will find the first document that matches a query predicate in natural sort order, most likely as they were entered into the database.

We do not expect the document returned to be null, so we name this, unexpected.

Find() returns a find iterable.

We use the iterator() method to convert this into a MongoCursor.

Because you're passing in a new document with no information, we'd expect it to find the first document encountered in the collection.

In the MongoDB shell this would look like, movies.find().limit(1).

We use the next method to get the next item in the iterator.

Running this test, we should expect some random document, and after we've consumed the iterator with next(), we expect the iterator to have nothing left.

Excellent.

Let's go ahead and find a document that matches a predicate.

For this example, we will find a movie where Salma Hayek is listed in the cast field.

Let's define our query.

We want a document where the value, Salma Hayek, is at the cast key.

Because cast is an array, MongoDB will look at all elements of the array to match this.

This is because MongoDB treats arrays as first class objects.

And here we're using a shorthand for find one, like used in the previous test.

What might happen if we were to call next on an iterator, that didn't have anything in it?

It will throw a NoSuchElementException.

Let's issue a query that won't match anything.

This, will throw a NoSuchElementException.

To be safe, we should use the tryNext() method.

This will return null if nothing exists in the iterator.

Finding one document is useful, but it's only one particular use case.

What if we want to find all documents that match a predicate?

One method to do so is following.

Our query is the same as our previous query, where Salma Hayek, is in the cast field.

We will create an ArrayList() to hold our results, then we issue a query, and send them directly into our container.

From previously exploring the data set, we expect 29 results.

Let's look at one of the documents now.

We'll look at the output on the test results.

Here the title is, Roadracers, year 1994, and so on, and so on, and in the cast field there she is, Salma Hayek.

Looking at the document, we can see that there is a lot of information.

What if we only wanted the title and year?

You may be familiar with projection mechanics in the Mongo shell, where we might do something like, db.movies.find cast Salma Hayek title 1, year 1.

The collection object also has projection functionality, but the usage is different than that in the Mongo shell.

Because we specified that we want to keep two keys, and didn't explicitly remove the ID key, we expect to get a document back with three keys title, year, and ID.

And let's make sure that they are what we expected.

So as we just saw, unless we explicitly remove the ID key, it will remain in the result.

To remove the ID, we can pass zero in the projection() argument.

Remember, one means retain, and 0 means remove.

For this example, let's also search for movies where Johnny Depp, is a cast member as well.

We'll build a query so that only movies with both Salma Hayek, and Johnny Depp, are returned.

For that, we'll use the $all operator, in the shell, this would be something like this.

So there should only be one result in our data set, and now we should only have two keys, title and year.

Querying MongoDB through the driver may feel odd at first, but eventually it will feel like second nature.

We saw how to limit the results to one document, or get all documents that match a query filter.

We also saw how to include, only the fields we wanted in the result set, and how to remove the ID field.

A few things to keep in mind, finding one document typically involves querying on a unique index, such as the ID field.

When projecting, by specifying inclusion for example, title 1, all fields we don't include, will be excluded, except for the ID field.

If we don't want the ID field returned to us, we must explicitly exclude it.

Lastly, the specific query patterns you saw here are much easier to build, again more in a future lesson.