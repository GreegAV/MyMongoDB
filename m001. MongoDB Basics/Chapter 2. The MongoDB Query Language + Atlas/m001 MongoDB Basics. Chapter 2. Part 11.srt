1
00:00:00,000 --> 00:00:00,500


2
00:00:00,500 --> 00:00:04,110
Now let's talk about exact
matches for array fields.

3
00:00:04,110 --> 00:00:05,760
Again, we're setting
the stage here

4
00:00:05,760 --> 00:00:09,760
for a complete understanding
of the MongoDB query language,

5
00:00:09,760 --> 00:00:13,290
including using a
variety of operators

6
00:00:13,290 --> 00:00:15,540
that allow us to
do a number of very

7
00:00:15,540 --> 00:00:17,910
sophisticated types of queries.

8
00:00:17,910 --> 00:00:21,780
So in considering equality
matches on arrays,

9
00:00:21,780 --> 00:00:25,710
we can consider matches on
the entire array, matches

10
00:00:25,710 --> 00:00:28,770
based on any element
in the array,

11
00:00:28,770 --> 00:00:31,440
and those based on
a specific element,

12
00:00:31,440 --> 00:00:34,410
say, matching only arrays
whose first element matches

13
00:00:34,410 --> 00:00:36,600
a specific criteria.

14
00:00:36,600 --> 00:00:39,660
We can also look at more
complex matches using operators.

15
00:00:39,660 --> 00:00:43,260
We'll do that in other lessons.

16
00:00:43,260 --> 00:00:46,500
Here we're looking at our
video database in Compass.

17
00:00:46,500 --> 00:00:50,980
Let's take a look at this same
database in the Mongo shell.

18
00:00:50,980 --> 00:00:53,340
OK, so here, in the
Mongo shell, I'm

19
00:00:53,340 --> 00:00:55,930
connected to our
class Atlas cluster.

20
00:00:55,930 --> 00:00:57,910
Let's use the video
database, and then,

21
00:00:57,910 --> 00:01:01,110
in this first example, we'll
filter for an exact match

22
00:01:01,110 --> 00:01:02,350
to an array.

23
00:01:02,350 --> 00:01:04,830
Now for these types of
filters, matching documents

24
00:01:04,830 --> 00:01:06,780
must have a value that
is exactly what we've

25
00:01:06,780 --> 00:01:08,250
entered as the array.

26
00:01:08,250 --> 00:01:11,730
So for the query cast, and
then looking for Jeff Bridges

27
00:01:11,730 --> 00:01:13,060
and Tim Robbins--

28
00:01:13,060 --> 00:01:15,850
and let me pretty that up--

29
00:01:15,850 --> 00:01:19,430
matching documents
will have a cast field

30
00:01:19,430 --> 00:01:23,540
that has as its value an array
with exactly two elements--

31
00:01:23,540 --> 00:01:29,390
Jeff Bridges, followed by
Tim Robbins, in that order.

32
00:01:29,390 --> 00:01:32,900
There's just one movie that
matches these criteria.

33
00:01:32,900 --> 00:01:37,430
It's a documentary called
"Making of Arlington Road."

34
00:01:37,430 --> 00:01:41,060
Note that the array field
matches our filter exactly.

35
00:01:41,060 --> 00:01:43,850
Also note that, due to
the semantics of array

36
00:01:43,850 --> 00:01:47,870
matches, the movie "Arlington
Road" itself does not match,

37
00:01:47,870 --> 00:01:53,900
because it also lists Joan
Cusack and Hope Davis,

38
00:01:53,900 --> 00:01:57,220
in addition to Jeff Bridges
and Tim Robbins, in the cast.

39
00:01:57,220 --> 00:02:00,590
Let's do a quick
query for that one.

40
00:02:00,590 --> 00:02:03,290
And here we can see that Joan
Cusack and Hope Davis are also

41
00:02:03,290 --> 00:02:05,210
listed in the cast.

42
00:02:05,210 --> 00:02:07,580
Since our original
query specified

43
00:02:07,580 --> 00:02:11,240
that we want cast to
be exactly this array,

44
00:02:11,240 --> 00:02:14,360
this particular
document does not match.

45
00:02:14,360 --> 00:02:17,510
Now it's more common that we
filter for a single element

46
00:02:17,510 --> 00:02:18,830
of an array field.

47
00:02:18,830 --> 00:02:20,780
To do this in
MongoDB, we can simply

48
00:02:20,780 --> 00:02:24,820
filter for, say, Jeff
Bridges, like this.

49
00:02:24,820 --> 00:02:27,920


50
00:02:27,920 --> 00:02:30,020
Matching documents
contain the string

51
00:02:30,020 --> 00:02:34,310
Jeff Bridges as one element
of the array field cast.

52
00:02:34,310 --> 00:02:36,082
We can see Jeff Bridges is here.

53
00:02:36,082 --> 00:02:37,790
If we scroll through
the array documents,

54
00:02:37,790 --> 00:02:41,510
he appears in every single
one of the cast arrays,

55
00:02:41,510 --> 00:02:45,410
sometimes as the first
actor listed, and sometimes

56
00:02:45,410 --> 00:02:48,620
in other positions, as in here.

57
00:02:48,620 --> 00:02:53,440
What's nice about this syntax
is that it's exactly the same

58
00:02:53,440 --> 00:02:55,930
as selectors for scalar values.

59
00:02:55,930 --> 00:02:57,520
In some situations,
we want to match

60
00:02:57,520 --> 00:02:59,890
a specific element of an array.

61
00:02:59,890 --> 00:03:02,814
Actors are frequently listed
in order of precedence,

62
00:03:02,814 --> 00:03:04,480
with those whose
contributions to a film

63
00:03:04,480 --> 00:03:07,270
that are highest occurring
earlier in the list.

64
00:03:07,270 --> 00:03:09,160
For example, the
star of a movie will

65
00:03:09,160 --> 00:03:11,890
appear before supporting
actors, as we see

66
00:03:11,890 --> 00:03:13,300
in the document for "Iron Man."

67
00:03:13,300 --> 00:03:16,230


68
00:03:16,230 --> 00:03:19,950
In this movie, Robert
Downey Jr. is the star,

69
00:03:19,950 --> 00:03:22,410
with Jeff Bridges playing
a supporting role,

70
00:03:22,410 --> 00:03:25,480
so Robert Downey
Jr. appears first.

71
00:03:25,480 --> 00:03:27,300
The MongoDB query
language enables

72
00:03:27,300 --> 00:03:30,720
us to specify that we want to
match array elements occurring

73
00:03:30,720 --> 00:03:33,790
in a specific
position in an array.

74
00:03:33,790 --> 00:03:36,610
To query for those movies in
which Jeff Bridges was listed

75
00:03:36,610 --> 00:03:40,810
first among cast members,
we can use dot notation

76
00:03:40,810 --> 00:03:42,674
and specify an array index.

77
00:03:42,674 --> 00:03:44,590
For this, it's going to
be a little bit easier

78
00:03:44,590 --> 00:03:48,470
to see the difference if
we go back to Compass.

79
00:03:48,470 --> 00:03:53,830
So here in Compass, a
query for cast Jeff Bridges

80
00:03:53,830 --> 00:03:56,500
gives us 114 documents.

81
00:03:56,500 --> 00:04:02,680
But if we query for Jeff
Bridges in position 0

82
00:04:02,680 --> 00:04:07,600
for the cast field, then
we have just 56 documents,

83
00:04:07,600 --> 00:04:10,630
and we can see that
in each and every one

84
00:04:10,630 --> 00:04:16,860
of these returned results,
Jeff Bridges is appearing first

85
00:04:16,860 --> 00:04:19,079
in the cast array.

86
00:04:19,079 --> 00:04:21,930
Now again, just to
remind you, if we

87
00:04:21,930 --> 00:04:25,280
want to do this type of
query in the Mongo shell,

88
00:04:25,280 --> 00:04:29,455
it's going to be necessary
to enclose our key in quotes.

89
00:04:29,455 --> 00:04:32,130


90
00:04:32,130 --> 00:04:34,380
And again, here
we can see quickly

91
00:04:34,380 --> 00:04:37,440
that Jeff Bridges is listed
first for all of these.

92
00:04:37,440 --> 00:04:39,000
Now we've looked
at equality matches

93
00:04:39,000 --> 00:04:42,480
on arrays against
the entire array,

94
00:04:42,480 --> 00:04:44,490
matching any element
of the array,

95
00:04:44,490 --> 00:04:47,462
and then those based on a
specific element of the array.

96
00:04:47,462 --> 00:04:49,170
You should now have
a solid understanding

97
00:04:49,170 --> 00:04:51,870
of the syntax for the most
common read operations

98
00:04:51,870 --> 00:00:00,000
on arrays.

