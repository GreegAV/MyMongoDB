1
00:00:00,000 --> 00:00:00,500


2
00:00:00,500 --> 00:00:03,450
To begin our discussion of read
operations in the MongoDB query

3
00:00:03,450 --> 00:00:06,773
language, we'll discuss
equality filters.

4
00:00:06,773 --> 00:00:08,189
This discussion
will set the stage

5
00:00:08,189 --> 00:00:10,770
for our more sophisticated
types of queries involving

6
00:00:10,770 --> 00:00:13,710
the rich set of operators
provided by the MongoDB query

7
00:00:13,710 --> 00:00:14,622
language.

8
00:00:14,622 --> 00:00:16,830
You've already seen some
examples of equality filters

9
00:00:16,830 --> 00:00:19,110
from our work with
filters in Compass.

10
00:00:19,110 --> 00:00:22,440
Let's look at another
filter in Compass first,

11
00:00:22,440 --> 00:00:25,080
and then we'll dive into
the methods that make up

12
00:00:25,080 --> 00:00:28,781
the MongoDB query language as
it is implemented in the mongo

13
00:00:28,781 --> 00:00:29,280
shell.

14
00:00:29,280 --> 00:00:32,130
For this lesson I'd like
to look at movie data.

15
00:00:32,130 --> 00:00:36,090
Let's use a Compass to filter
our video.movies collection

16
00:00:36,090 --> 00:00:38,765
for films rated PG-13.

17
00:00:38,765 --> 00:00:40,140
The rating we're
interested in is

18
00:00:40,140 --> 00:00:44,850
stored in the mpaaRating
field for documents

19
00:00:44,850 --> 00:00:46,300
in this collection.

20
00:00:46,300 --> 00:00:48,900
In this filter I'm
specifying that I simply

21
00:00:48,900 --> 00:00:51,870
want to see documents
that have PG-13

22
00:00:51,870 --> 00:00:54,630
as their value for this field.

23
00:00:54,630 --> 00:00:57,340
Applying the filter here
in the Documents tab,

24
00:00:57,340 --> 00:00:59,430
we can see that each
document returned

25
00:00:59,430 --> 00:01:02,940
is in fact rated PG-13.

26
00:01:02,940 --> 00:01:07,440
Note that only 5,297 of the
more than one million documents

27
00:01:07,440 --> 00:01:10,270
in this collection
match this filter.

28
00:01:10,270 --> 00:01:12,540
We can restrict the
result set further

29
00:01:12,540 --> 00:01:17,670
by adding additional selectors
to our query document.

30
00:01:17,670 --> 00:01:20,220
Applying this
filter significantly

31
00:01:20,220 --> 00:01:23,040
reduces the number of
documents that are results set.

32
00:01:23,040 --> 00:01:24,690
So what's important
to notice here

33
00:01:24,690 --> 00:01:28,830
is that selectors
in MongoDB filters

34
00:01:28,830 --> 00:01:32,610
are anded together
by default, meaning

35
00:01:32,610 --> 00:01:35,970
that only documents matching
both of these criteria

36
00:01:35,970 --> 00:01:36,810
are retrieved.

37
00:01:36,810 --> 00:01:39,330
In other lessons we
consider query operators

38
00:01:39,330 --> 00:01:41,610
that allow us to express
filters that match

39
00:01:41,610 --> 00:01:43,470
any of two or more conditions.

40
00:01:43,470 --> 00:01:47,140
Rather than all of two or more
conditions as we have here,

41
00:01:47,140 --> 00:01:48,930
but that is for another lesson.

42
00:01:48,930 --> 00:01:52,920
Now let's take a look at how to
perform this same type of query

43
00:01:52,920 --> 00:01:55,200
in the mongo shell.

44
00:01:55,200 --> 00:01:58,350
The method for performing read
operations in the MongoDB query

45
00:01:58,350 --> 00:02:00,720
language is called, Find.

46
00:02:00,720 --> 00:02:04,980
To find films in our
movies.videos collection rated

47
00:02:04,980 --> 00:02:10,800
PG-13, we need to first
use our video database,

48
00:02:10,800 --> 00:02:14,113
and then call find on
the movie's collection.

49
00:02:14,113 --> 00:02:18,060


50
00:02:18,060 --> 00:02:20,100
And we can pretty
that up a little bit

51
00:02:20,100 --> 00:02:21,930
using the pretty command.

52
00:02:21,930 --> 00:02:25,320
And here as we
saw in Compass, we

53
00:02:25,320 --> 00:02:29,670
can see that all of our results
have an mpaaRating of PG-13.

54
00:02:29,670 --> 00:02:31,800
Again, as we did
in Compass, we can

55
00:02:31,800 --> 00:02:34,410
add an additional
selector for year,

56
00:02:34,410 --> 00:02:37,950
and restrict our results
set to PG-13 movies

57
00:02:37,950 --> 00:02:40,350
from the year 2009.

58
00:02:40,350 --> 00:02:42,570
And again, we see that
indeed all of these documents

59
00:02:42,570 --> 00:02:45,280
match both of those criteria.

60
00:02:45,280 --> 00:02:48,870
Now that we know how to create
quality filters on top level

61
00:02:48,870 --> 00:02:50,640
fields, let's turn
our attention to how

62
00:02:50,640 --> 00:02:54,600
we can match for equality
against embedded documents.

63
00:02:54,600 --> 00:02:58,530
For this let's look at our
100 year weather data set.

64
00:02:58,530 --> 00:03:00,030
The weather readings
in this data

65
00:03:00,030 --> 00:03:03,030
set capture quite a
few details about wind.

66
00:03:03,030 --> 00:03:09,570
Note that the wind field has the
value type document, or Object,

67
00:03:09,570 --> 00:03:13,710
as it's called in the
documents view in Compass.

68
00:03:13,710 --> 00:03:16,170
If we expand wind,
the wind field

69
00:03:16,170 --> 00:03:18,990
describes the overall
wind conditions.

70
00:03:18,990 --> 00:03:22,140
A value of c for
wind type indicates

71
00:03:22,140 --> 00:03:23,670
that the wind
conditions were calm

72
00:03:23,670 --> 00:03:25,290
when this reading was taken.

73
00:03:25,290 --> 00:03:27,120
In the going to
be query language

74
00:03:27,120 --> 00:03:29,190
our filter would have this form.

75
00:03:29,190 --> 00:03:31,050
And having applied
that filter, let's

76
00:03:31,050 --> 00:03:33,900
take a look at a couple
of matching documents.

77
00:03:33,900 --> 00:03:37,290
We can see here that in
fact, wind type is c.

78
00:03:37,290 --> 00:03:40,200
And likewise for this
document and all others

79
00:03:40,200 --> 00:03:42,060
in this result set.

80
00:03:42,060 --> 00:03:44,790
Taking a closer look
at our query syntax,

81
00:03:44,790 --> 00:03:47,550
we're using what we call
dot notation in order

82
00:03:47,550 --> 00:03:50,220
to identify a field
of a document nested

83
00:03:50,220 --> 00:03:52,590
within the field wind.

84
00:03:52,590 --> 00:03:56,360
Now the dot notation works for
documents nested at any level.

85
00:03:56,360 --> 00:03:58,110
For this let's go a
level deeper, and look

86
00:03:58,110 --> 00:04:01,170
at wind direction angle.

87
00:04:01,170 --> 00:04:03,210
So rather than
window type, we'll

88
00:04:03,210 --> 00:04:05,580
express our filter as
wind.direction.angle.

89
00:04:05,580 --> 00:04:08,520


90
00:04:08,520 --> 00:04:12,150
And because angle is an
integer valued field,

91
00:04:12,150 --> 00:04:16,440
let's do 290 and then
apply our filter.

92
00:04:16,440 --> 00:04:20,850
Taking a look at the results,
wind, direction, angle,

93
00:04:20,850 --> 00:04:24,150
we can see that in fact,
documents in the result set

94
00:04:24,150 --> 00:04:28,380
match this query
using dot notation.

95
00:04:28,380 --> 00:04:31,080
One thing I very much like
about the MongoDB query language

96
00:04:31,080 --> 00:04:33,540
is that it's intuitive
in many respects.

97
00:04:33,540 --> 00:04:36,750
Dot notation is in my
opinion, one example.

98
00:04:36,750 --> 00:04:39,750
Now the Compass is a
little bit more flexible

99
00:04:39,750 --> 00:04:41,610
about syntax than the shell.

100
00:04:41,610 --> 00:04:46,610
Note that we are not specifying
quotes around the key here.

101
00:04:46,610 --> 00:04:49,740
However, when using dot
notation in the shell,

102
00:04:49,740 --> 00:04:53,940
you must enclose the key in
quotes applying the same filter

103
00:04:53,940 --> 00:04:55,570
in the MongoDB shell.

104
00:04:55,570 --> 00:04:59,550
First, we use the
100 year database,

105
00:04:59,550 --> 00:05:03,690
and then use find to
express our filter.

106
00:05:03,690 --> 00:05:07,230
If we try to do this we're going
to get an error because as I

107
00:05:07,230 --> 00:05:10,140
mentioned, quotes are
required around keys

108
00:05:10,140 --> 00:05:14,350
that use dot notation
in the mongo shell.

109
00:05:14,350 --> 00:05:17,170
And here we can see
that in fact, documents

110
00:05:17,170 --> 00:05:21,250
matching this query do you
have the wind.direction.angle

111
00:05:21,250 --> 00:05:23,290
of 290.

112
00:05:23,290 --> 00:05:27,130
To sum up, to drive down the
hierarchy of nested documents

113
00:05:27,130 --> 00:05:31,090
you reach into documents at
each additional level of nesting

114
00:05:31,090 --> 00:05:34,510
by stringing field names
together using dot notation,

115
00:05:34,510 --> 00:00:00,000
and in the shell don't
forget the quotes.

