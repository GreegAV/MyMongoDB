1
00:00:00,500 --> 00:00:03,170
One of the more powerful
query operators for a raise

2
00:00:03,170 --> 00:00:04,870
is $elemMatch.

3
00:00:04,870 --> 00:00:06,830
To consider an
example of $elemMatch,

4
00:00:06,830 --> 00:00:09,440
we'll need to do just a
little bit of head scratching.

5
00:00:09,440 --> 00:00:13,450
For this I'd like you to imagine
that we've added one more field

6
00:00:13,450 --> 00:00:15,960
to our movie details data set.

7
00:00:15,960 --> 00:00:19,100
Now we haven't really done
this, but suppose we did.

8
00:00:19,100 --> 00:00:23,520
This field, called boxOffice,
reflects the box office revenue

9
00:00:23,520 --> 00:00:26,220
for all countries in which
a movie was released.

10
00:00:26,220 --> 00:00:29,100
Imagine that every document in
our movie details collection

11
00:00:29,100 --> 00:00:31,640
contained such a
key, and suppose

12
00:00:31,640 --> 00:00:36,250
that the value for
this key is an array

13
00:00:36,250 --> 00:00:38,400
with embedded
documents as entries.

14
00:00:38,400 --> 00:00:40,620
Each array element
for boxOffice,

15
00:00:40,620 --> 00:00:45,010
lists the country and
revenue in millions

16
00:00:45,010 --> 00:00:46,980
for each of those countries.

17
00:00:46,980 --> 00:00:49,760
Now suppose that we'd like
to match all documents where

18
00:00:49,760 --> 00:00:52,380
the revenue for
the country Germany

19
00:00:52,380 --> 00:00:55,250
is greater than 17 million.

20
00:00:55,250 --> 00:00:57,760
Note that a movie details
document with the box office

21
00:00:57,760 --> 00:01:01,000
revenues listed here
would not match this query

22
00:01:01,000 --> 00:01:05,780
because the revenue listed for
Germany here is 16.2 million,

23
00:01:05,780 --> 00:01:08,930
which is obviously
less than 17 million.

24
00:01:08,930 --> 00:01:11,650
We might think a query that
satisfies this objective would

25
00:01:11,650 --> 00:01:15,180
be something like this.

26
00:01:15,180 --> 00:01:18,780
Where we simply specify
boxOffice.country as Germany

27
00:01:18,780 --> 00:01:23,230
and boxOffice.revenue
as greater than 17.

28
00:01:23,230 --> 00:01:26,040
Again, given the way
we've set boxOffice,

29
00:01:26,040 --> 00:01:28,330
this is actually 17 million.

30
00:01:28,330 --> 00:01:31,660
Now this filter will
retrieve documents that

31
00:01:31,660 --> 00:01:34,730
match both of these selectors.

32
00:01:34,730 --> 00:01:39,790
However, the selectors do not
need to match in the same array

33
00:01:39,790 --> 00:01:41,200
element.

34
00:01:41,200 --> 00:01:45,690
So a document having this array
as its value for boxOffice

35
00:01:45,690 --> 00:01:50,425
would match because there is an
element for which the country

36
00:01:50,425 --> 00:01:55,420
is Germany here, and another
element for which revenue

37
00:01:55,420 --> 00:01:57,396
is greater than 17.

38
00:01:57,396 --> 00:02:01,280
And in fact, every other
element in this array

39
00:02:01,280 --> 00:02:03,630
has a value that's
greater than 17.

40
00:02:03,630 --> 00:02:05,414
Let's look at an example.

41
00:02:05,414 --> 00:02:07,830
I'm going to create a single
document in our movie details

42
00:02:07,830 --> 00:02:11,020
collection with a
boxOffice field.

43
00:02:11,020 --> 00:02:13,270
Going to our mongo
shell, and here I'm

44
00:02:13,270 --> 00:02:16,720
connected to my Atlas
sandbox cluster.

45
00:02:16,720 --> 00:02:19,570
I'm going to use
the video database.

46
00:02:19,570 --> 00:02:23,070
Then again, remember
that the shell

47
00:02:23,070 --> 00:02:26,550
is a JavaScript interpreter.

48
00:02:26,550 --> 00:02:31,740
I'm going to use findOne to
locate the movie, The Martian,

49
00:02:31,740 --> 00:02:34,450
and I'm going to
assign that document

50
00:02:34,450 --> 00:02:37,970
to this variable, martian.

51
00:02:37,970 --> 00:02:40,810
So my query was successful.

52
00:02:40,810 --> 00:02:43,480
And if I simply type
martian, the interpreter

53
00:02:43,480 --> 00:02:45,830
will display the value
for this variable,

54
00:02:45,830 --> 00:02:47,870
which is in fact this movie.

55
00:02:47,870 --> 00:02:53,011
So now in the shell in
memory, I have an object

56
00:02:53,011 --> 00:02:55,510
that reflects the movie, The
Martian, from our movie details

57
00:02:55,510 --> 00:03:00,430
collection, and a
reference to that object

58
00:03:00,430 --> 00:03:02,770
in my variable martian.

59
00:03:02,770 --> 00:03:06,260
Now this document
contains an _id.

60
00:03:06,260 --> 00:03:08,680
What I'm going to
do eventually is

61
00:03:08,680 --> 00:03:10,520
insert a version of
this document that

62
00:03:10,520 --> 00:03:12,490
contains the boxOffice field.

63
00:03:12,490 --> 00:03:16,870
And I don't want to get
a duplicate _id error,

64
00:03:16,870 --> 00:03:23,600
so I'm going to delete that
field from my martian object.

65
00:03:23,600 --> 00:03:26,560
Now if I look at
this document again,

66
00:03:26,560 --> 00:03:30,380
I can see that the _id field
has in fact been removed.

67
00:03:30,380 --> 00:03:34,000
Now what I'd like to do
is add a boxOffice field

68
00:03:34,000 --> 00:03:39,270
to the subject by simply setting
boxOffice equal to this array,

69
00:03:39,270 --> 00:03:44,440
and note that this array is
the same one we've been looking

70
00:03:44,440 --> 00:03:45,640
at throughout this example.

71
00:03:48,630 --> 00:03:51,722
Now if I look at my
martian document again,

72
00:03:51,722 --> 00:03:53,180
I can see that it
does in fact have

73
00:03:53,180 --> 00:03:56,420
a boxOffice field with
each of the elements

74
00:03:56,420 --> 00:03:58,070
we've been looking at.

75
00:03:58,070 --> 00:04:00,690
So now we've updated
this object in memory

76
00:04:00,690 --> 00:04:02,250
to contain the boxOffice field.

77
00:04:02,250 --> 00:04:10,440
Let's insert this into our
movie details collection.

78
00:04:10,440 --> 00:04:15,280
For this we're going to
use the insertOne method,

79
00:04:15,280 --> 00:04:19,110
and we can see from the response
that our insert was successful.

80
00:04:19,110 --> 00:04:23,680
And here's the ObjectId of
the newly inserted document.

81
00:04:23,680 --> 00:04:27,020
We can double check this,
and doing a quick search

82
00:04:27,020 --> 00:04:29,620
for the movie, The Martian.

83
00:04:29,620 --> 00:04:32,580
Here we can see that we've
got two documents returned,

84
00:04:32,580 --> 00:04:34,410
and that the second
of these does

85
00:04:34,410 --> 00:04:36,660
contain our boxOffice array.

86
00:04:37,200 --> 00:04:40,680
Now if we try our query
that doesn't use $elemMatch,

87
00:04:46,040 --> 00:04:49,910
we can see that it does match
our newly created document.

88
00:04:49,910 --> 00:04:53,240
In fact, it will
even match this query

89
00:04:53,240 --> 00:04:58,000
because there is one entry
in the boxOffice array,

90
00:04:58,010 --> 00:05:02,420
the one for USA, that
is greater than 228.

91
00:05:02,420 --> 00:05:04,140
This demonstrates
that we do need

92
00:05:04,140 --> 00:05:07,980
to use $elemMatch in order to
perform this type of filter

93
00:05:07,980 --> 00:05:09,450
correctly.

94
00:05:09,450 --> 00:05:11,490
Here's how we do that.

95
00:05:11,490 --> 00:05:15,860
So note that when I issue this
query, no results are returned.

96
00:05:15,860 --> 00:05:18,290
Let's talk about
it a little bit.

97
00:05:18,290 --> 00:05:20,610
This query doesn't
return any results

98
00:05:20,610 --> 00:05:22,970
because it's doing
the right thing.

99
00:05:22,970 --> 00:05:24,670
It is filtering
for documents that

100
00:05:24,670 --> 00:05:28,980
have a single element in
the boxOffice array that

101
00:05:28,980 --> 00:05:32,440
lists the value
Germany for country,

102
00:05:32,440 --> 00:05:37,860
and a value for revenue
that is greater than 17.

103
00:05:37,860 --> 00:05:40,840
And again, that's 17 million.

104
00:05:40,840 --> 00:05:44,430
So the syntax here
is specify the field

105
00:05:44,430 --> 00:05:46,110
you want to filter on.

106
00:05:46,110 --> 00:05:49,890
$elemMatch expects a
document as its value,

107
00:05:49,890 --> 00:05:53,810
and within that document
you specify selectors

108
00:05:53,810 --> 00:05:57,270
that will then be used
to identify at least

109
00:05:57,270 --> 00:06:03,440
one element in this array that
matches all of these criteria.

110
00:06:03,440 --> 00:06:05,510
Now we'll find the martian
if we change our query

111
00:06:05,510 --> 00:06:10,340
to look for German box office
revenue greater than 16 million

112
00:06:10,340 --> 00:06:14,920
because there is one element
in the boxOffice array where

113
00:06:14,920 --> 00:06:19,700
country is Germany, and
revenue is greater than 16.

114
00:06:19,700 --> 00:00:00,000
So that is the
$elemMatch operator.

