1
00:00:00,000 --> 00:00:00,499


2
00:00:00,499 --> 00:00:03,820
OK, so far we've looked
at document valued fields,

3
00:00:03,820 --> 00:00:06,070
and array valued fields.

4
00:00:06,070 --> 00:00:08,590
One last thing I'd like
to show, with respect

5
00:00:08,590 --> 00:00:11,320
to these types of
aggregate data structures,

6
00:00:11,320 --> 00:00:13,430
is an example of mixing the two.

7
00:00:13,430 --> 00:00:17,090
To do that, let's
look at this document.

8
00:00:17,090 --> 00:00:19,300
And I want to point out
that this document contains

9
00:00:19,300 --> 00:00:22,720
a field called sky cover layer.

10
00:00:22,720 --> 00:00:25,270
This is one of those
supplementary pieces

11
00:00:25,270 --> 00:00:30,190
of data that can appear in our
documents in this collection.

12
00:00:30,190 --> 00:00:33,130
Sky cover layer is an
array valued field.

13
00:00:33,130 --> 00:00:35,300
But in contrast to
our previous example,

14
00:00:35,300 --> 00:00:37,930
if we expand sky
cover layer, we see

15
00:00:37,930 --> 00:00:42,850
that this array contains, as
its elements, nested documents.

16
00:00:42,850 --> 00:00:46,030
So for this particular
document, sky cover layer

17
00:00:46,030 --> 00:00:48,760
has a value that is
an array containing

18
00:00:48,760 --> 00:00:54,320
three elements, where each
element is a document.

19
00:00:54,320 --> 00:00:57,640
And each of those documents
contains a value and quality

20
00:00:57,640 --> 00:00:58,255
measure.

21
00:00:58,255 --> 00:01:00,630
Something you should be aware
of in working with Compass,

22
00:01:00,630 --> 00:01:03,400
and in general with
MongoDB, is that we

23
00:01:03,400 --> 00:01:07,850
tend to use the terms object
and document interchangeably.

24
00:01:07,850 --> 00:01:09,730
The reason for this
terminology is something

25
00:01:09,730 --> 00:01:12,880
that we dive into
in other lessons.

26
00:01:12,880 --> 00:01:15,800
As another example of
mixing documents and arrays,

27
00:01:15,800 --> 00:01:18,100
let's take a look at
the position field

28
00:01:18,100 --> 00:01:19,580
for this document.

29
00:01:19,580 --> 00:01:24,730
Now here, we have a nested
document that has two fields,

30
00:01:24,730 --> 00:01:27,620
and one of those
fields is an array.

31
00:01:27,620 --> 00:01:32,170
So in the example before,
we saw an array field

32
00:01:32,170 --> 00:01:35,470
that had nested documents
as its elements.

33
00:01:35,470 --> 00:01:39,220
In this case, we
have a nested object

34
00:01:39,220 --> 00:01:43,930
that has an array as the
value of one of its fields.

35
00:01:43,930 --> 00:01:47,370
For this document, type
has a string value.

36
00:01:47,370 --> 00:01:49,120
And as we've said,
coordinates is an array

37
00:01:49,120 --> 00:01:51,060
containing two elements.

38
00:01:51,060 --> 00:01:53,900
MongoDB supports a range
of scalar value types,

39
00:01:53,900 --> 00:01:58,690
including string, null, integer,
double, and decimal, as well

40
00:01:58,690 --> 00:02:02,380
as document values,
and array values.

41
00:02:02,380 --> 00:02:05,050
You may use any
supported value type

42
00:02:05,050 --> 00:02:09,430
for any field value or array
element in a MongoDB document.

43
00:02:09,430 --> 00:02:11,680
One last thing before
we conclude this lesson.

44
00:02:11,680 --> 00:02:16,540
As you've probably guessed, the
position field in this example

45
00:02:16,540 --> 00:02:20,800
stores a point in a
geospatial coordinate system.

46
00:02:20,800 --> 00:02:24,880
While geospatial is not
a value type per se,

47
00:02:24,880 --> 00:02:27,460
using document structures--
such as the one we're looking

48
00:02:27,460 --> 00:02:28,500
at here--

49
00:02:28,500 --> 00:02:31,960
MongoDB provides far reaching
support for geospatial data,

50
00:02:31,960 --> 00:02:35,200
enabling you to store
a variety of shapes,

51
00:02:35,200 --> 00:02:37,810
calculate the distance
between points,

52
00:02:37,810 --> 00:02:40,210
filter for documents that
are within a specified

53
00:02:40,210 --> 00:02:42,670
radius of another
point, and perform

54
00:02:42,670 --> 00:02:45,230
a number of other operations.

55
00:02:45,230 --> 00:02:47,050
Compass provides some
nice conveniences

56
00:02:47,050 --> 00:02:48,970
for working with
geospatial data.

57
00:02:48,970 --> 00:02:51,520
We can see an example
with this collection,

58
00:02:51,520 --> 00:02:55,330
if we visit the Schema
tab and scroll down

59
00:02:55,330 --> 00:02:57,040
to the position field.

60
00:02:57,040 --> 00:03:00,340
Jumping back to the Schema tab,
if we scroll down to position,

61
00:03:00,340 --> 00:03:03,700
we can see that Compass plots
the positions of readings

62
00:03:03,700 --> 00:03:05,470
on a map of the Earth.

63
00:03:05,470 --> 00:03:08,290
We have full pan, zoom
functionality here.

64
00:03:08,290 --> 00:03:10,090
In other lessons,
we look at using

65
00:03:10,090 --> 00:03:13,360
this UI to filter collections
for documents expressing

66
00:03:13,360 --> 00:00:00,000
locations within a specified
distance of a reference point.

