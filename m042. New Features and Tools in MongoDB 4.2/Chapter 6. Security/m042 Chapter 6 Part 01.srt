
1
00:00:00.000 --> 00:00:00.500


2
00:00:00.500 --> 00:00:01.170
Welcome back.

3
00:00:01.170 --> 00:00:03.740
In 4.2, we've introduced
clientside field level

4
00:00:03.740 --> 00:00:04.810
encryption.

5
00:00:04.810 --> 00:00:06.720
What this means as
the name suggests

6
00:00:06.720 --> 00:00:10.550
is that you can now encrypt
data in MongoDB at field level.

7
00:00:10.550 --> 00:00:13.040
First, let's discuss
why we want to do that.

8
00:00:13.040 --> 00:00:15.380
A lot of MongoDB we use
cases require the storage

9
00:00:15.380 --> 00:00:18.050
of sensitive data such as
medical records or payment

10
00:00:18.050 --> 00:00:18.980
details.

11
00:00:18.980 --> 00:00:20.630
This data is encrypted
at client layer

12
00:00:20.630 --> 00:00:23.150
prior to being
inserted into MongoDB

13
00:00:23.150 --> 00:00:25.940
and is never
decrypted in MongoDB.

14
00:00:25.940 --> 00:00:27.560
Additionally, field
level encryption

15
00:00:27.560 --> 00:00:29.450
allows you to make
data permanently

16
00:00:29.450 --> 00:00:33.670
unavailable by revoking the
keys which can decrypt the data.

17
00:00:33.670 --> 00:00:35.780
Whatever the key, the
data is unintelligible,

18
00:00:35.780 --> 00:00:37.610
hence complying with
any regulations which

19
00:00:37.610 --> 00:00:40.490
require the data to be
permanently deleted.

20
00:00:40.490 --> 00:00:43.850
Clientside encryption guarantees
that sensitive data can only

21
00:00:43.850 --> 00:00:46.900
be encrypted and decrypted
with both access to MongoDB

22
00:00:46.900 --> 00:00:49.310
and a separate key
management provider.

23
00:00:49.310 --> 00:00:51.830
Once enabled, data can
be seamlessly encrypted

24
00:00:51.830 --> 00:00:55.130
and decrypted with minimal
application code changes.

25
00:00:55.130 --> 00:00:56.720
This enables an
encryption key to be

26
00:00:56.720 --> 00:00:58.850
revoked at any stage,
which permanently

27
00:00:58.850 --> 00:01:00.435
makes the data inaccessible.

28
00:01:00.435 --> 00:01:02.060
Let's have a look at
how we implemented

29
00:01:02.060 --> 00:01:04.160
this feature in MongoDB 4.2.

30
00:01:04.160 --> 00:01:06.200
The driver interacts
with multiple components

31
00:01:06.200 --> 00:01:08.865
to implement clientside
field level encryption.

32
00:01:08.865 --> 00:01:10.490
So it interacts with
the MongoDB closer

33
00:01:10.490 --> 00:01:13.970
to get remote JSON schemas,
the MongoDB key vaults

34
00:01:13.970 --> 00:01:17.930
to get encrypted data keys
and create new data keys,

35
00:01:17.930 --> 00:01:22.520
and AWS KMS server to encrypt
and decrypt fetch data keys

36
00:01:22.520 --> 00:01:24.560
and encrypt new data keys.

37
00:01:24.560 --> 00:01:27.080
And then there's the
mongocryptd to ask

38
00:01:27.080 --> 00:01:30.433
which values in BSON
commands must be encrypted.

39
00:01:30.433 --> 00:01:31.850
So we talked about
the MongoDB key

40
00:01:31.850 --> 00:01:34.670
vault. The key vault is a
special MongoDB collection

41
00:01:34.670 --> 00:01:36.705
containing key documents.

42
00:01:36.705 --> 00:01:38.330
You can either choose
to co-locate this

43
00:01:38.330 --> 00:01:40.850
on your MongoDB cluster
or on a separate cluster

44
00:01:40.850 --> 00:01:42.750
depending on your use case.

45
00:01:42.750 --> 00:01:44.480
The key material
in the key vault

46
00:01:44.480 --> 00:01:47.690
is encrypted with a
separate KMS service.

47
00:01:47.690 --> 00:01:49.850
Therefore, encryption
and decryption

48
00:01:49.850 --> 00:01:53.420
requires access to both the
MongoDB cluster and the KMS

49
00:01:53.420 --> 00:01:55.160
servers.

50
00:01:55.160 --> 00:01:57.790
There's a key stored in
the key vault per document

51
00:01:57.790 --> 00:01:58.690
in the collection.

52
00:01:58.690 --> 00:02:00.940
Each of these keys can
be individually revoked

53
00:02:00.940 --> 00:02:03.230
to prevent access to that data.

54
00:02:03.230 --> 00:02:05.710
So we also mentioned
the mongocryptd.

55
00:02:05.710 --> 00:02:08.410
The mongocryptd
is a local process

56
00:02:08.410 --> 00:02:10.660
which is needed for
collection auto encryption.

57
00:02:10.660 --> 00:02:13.120
It speaks to the
MongoDB wire protocol,

58
00:02:13.120 --> 00:02:16.360
and the driver uses mongocryptd
by connecting with a Mongo

59
00:02:16.360 --> 00:02:17.260
client.

60
00:02:17.260 --> 00:02:20.200
By default, the driver will
attempt to automatically spawn

61
00:02:20.200 --> 00:02:22.080
a mongocryptd process.

62
00:02:22.080 --> 00:02:24.040
The mongocryptd
process is shipped

63
00:02:24.040 --> 00:02:27.340
as part of the MongoDB
4.2 enterprise binary

64
00:02:27.340 --> 00:02:30.280
and is available for all Atlas
and Enterprise customers.

65
00:02:30.280 --> 00:02:31.780
There are two options
available when

66
00:02:31.780 --> 00:02:33.650
using field level encryption.

67
00:02:33.650 --> 00:02:35.170
You can choose to
provide a schema

68
00:02:35.170 --> 00:02:37.940
to the mongocryptd process
in your application code.

69
00:02:37.940 --> 00:02:40.960
This allows mongocryptd to
automatically encrypt fields

70
00:02:40.960 --> 00:02:42.790
based on a specific schema.

71
00:02:42.790 --> 00:02:45.970
You can also choose to manually
encrypt individual fields using

72
00:02:45.970 --> 00:02:47.200
your application code.

73
00:02:47.200 --> 00:02:49.450
It's important to note that
if you have a client which

74
00:02:49.450 --> 00:02:52.030
does not use the encrypted
connection options,

75
00:02:52.030 --> 00:02:54.712
it will still be able to
read from the collection.

76
00:02:54.712 --> 00:02:56.170
You can see in this
example we have

77
00:02:56.170 --> 00:02:59.380
a driver which isn't configured
to use an encrypted connection.

78
00:02:59.380 --> 00:03:01.480
It's still able to
read everything apart

79
00:03:01.480 --> 00:03:04.240
from this field which has been
encrypted using field level

80
00:03:04.240 --> 00:03:05.600
encryption.

81
00:03:05.600 --> 00:03:06.520
So let's recap.

82
00:03:06.520 --> 00:03:07.900
Field level
encryption allows you

83
00:03:07.900 --> 00:03:10.450
to encrypt data at field level.

84
00:03:10.450 --> 00:03:13.150
Keys are stored in a
MongoDB collection called

85
00:03:13.150 --> 00:03:15.580
the key vault. This can
either be co-located

86
00:03:15.580 --> 00:03:17.260
on the same cluster
as your data,

87
00:03:17.260 --> 00:03:20.060
or it can be on a
separate cluster.

88
00:03:20.060 --> 00:03:22.490
These keys are encrypted
with a master key which

89
00:03:22.490 --> 00:03:25.220
is stored in an
external KMS server,

90
00:03:25.220 --> 00:03:26.780
and your client
must be configured

91
00:03:26.780 --> 00:03:30.020
to use an encrypted collection
through a process called

92
00:03:30.020 --> 00:03:32.660
the mongocryptd, which is
shipped as part of the MongoDB

93
00:03:32.660 --> 00:03:34.280
enterprise binary.

94
00:03:34.280 --> 00:03:36.740
If your client is not
configured to use encryption,

95
00:03:36.740 --> 00:03:39.080
it will not be able to
read unencrypted values

96
00:03:39.080 --> 00:03:41.000
from the collection in MongoDB.

97
00:03:41.000 --> 00:03:44.260
Any unencrypted
fields can be read.