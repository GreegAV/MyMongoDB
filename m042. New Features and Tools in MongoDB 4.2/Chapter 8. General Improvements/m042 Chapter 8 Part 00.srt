
1
00:00:00.000 --> 00:00:00.540


2
00:00:00.540 --> 00:00:01.210
Hi there.

3
00:00:01.210 --> 00:00:03.460
In this lesson, we're going
to look at the new traffic

4
00:00:03.460 --> 00:00:07.350
recorder feature which we've
introduced in MongoDB 4.2.

5
00:00:07.350 --> 00:00:09.060
The traffic recorder
feature allows

6
00:00:09.060 --> 00:00:12.330
you to inspect and record
commands sent to a MongoDB

7
00:00:12.330 --> 00:00:14.730
instance and then replay
those commands back

8
00:00:14.730 --> 00:00:17.260
onto another host
at a later time.

9
00:00:17.260 --> 00:00:19.900
So why would you want to
do this, I hear you ask?

10
00:00:19.900 --> 00:00:21.960
And that's a great question.

11
00:00:21.960 --> 00:00:23.820
Replaying operations
can help you preview

12
00:00:23.820 --> 00:00:27.330
how your MongoDB deployments
will perform on a production

13
00:00:27.330 --> 00:00:30.150
workload in a brand
new environment,

14
00:00:30.150 --> 00:00:33.270
such as with a hardware
migration, a new storage

15
00:00:33.270 --> 00:00:35.880
engine, or a system
reconfiguration.

16
00:00:35.880 --> 00:00:38.280
To explain why we made
this change in 4.2,

17
00:00:38.280 --> 00:00:41.160
let's have a look at what we had
available in previous releases

18
00:00:41.160 --> 00:00:43.240
to capture network traffic.

19
00:00:43.240 --> 00:00:45.745
There are obviously tools we
can use like Wireshark and TCP

20
00:00:45.745 --> 00:00:48.840
Dump, however, those did
not capture network traffic

21
00:00:48.840 --> 00:00:50.593
specific to MongoDB.

22
00:00:50.593 --> 00:00:52.260
And it don't provide
us with the ability

23
00:00:52.260 --> 00:00:55.710
to replay the MongoDB
commands at a later date.

24
00:00:55.710 --> 00:00:58.200
Prior to 4.2, if users
wished to capture

25
00:00:58.200 --> 00:01:01.560
network traffic between a
client and a MongoDB instance,

26
00:01:01.560 --> 00:01:03.510
they needed to use mongoreplay.

27
00:01:03.510 --> 00:01:06.510
This worked well, but if you
were following best practices

28
00:01:06.510 --> 00:01:08.130
and had your network
traffic secured

29
00:01:08.130 --> 00:01:10.950
over the wire using
TLS, mongoreplay

30
00:01:10.950 --> 00:01:13.050
could not capture this traffic.

31
00:01:13.050 --> 00:01:15.210
So by moving the traffic
capture functionality

32
00:01:15.210 --> 00:01:17.920
to the mongod itself,
we can capture traffic,

33
00:01:17.920 --> 00:01:19.920
whether it's encrypted or not.

34
00:01:19.920 --> 00:01:22.410
The new traffic recorder
writes to a traffic recorder

35
00:01:22.410 --> 00:01:25.650
log which can then be
leveraged by mongoreplay which

36
00:01:25.650 --> 00:01:27.930
takes the traffic
recorder log and replays

37
00:01:27.930 --> 00:01:29.910
the operations on a mongod.

38
00:01:29.910 --> 00:01:32.820
In order to capture traffic
on the mongod process,

39
00:01:32.820 --> 00:01:35.460
the mongod needs to be started
with the traffic recording

40
00:01:35.460 --> 00:01:36.880
directory parameter.

41
00:01:36.880 --> 00:01:38.880
If you don't set this
parameter, the command

42
00:01:38.880 --> 00:01:41.610
to start to traffic recorder
from the shell will fail.

43
00:01:41.610 --> 00:01:43.650
Once the mongod is
started with this option,

44
00:01:43.650 --> 00:01:45.540
we can start capturing
traffic directly

45
00:01:45.540 --> 00:01:48.030
from the mongo shell with
the start recording traffic

46
00:01:48.030 --> 00:01:49.510
command.

47
00:01:49.510 --> 00:01:51.990
So once you issue the
command, the traffic recorder

48
00:01:51.990 --> 00:01:56.342
will record all incoming network
traffic on the mongod side.

49
00:01:56.342 --> 00:01:58.800
This network traffic is all
written to the traffic recorder

50
00:01:58.800 --> 00:02:00.960
log which can then be
leveraged by the latest

51
00:02:00.960 --> 00:02:05.370
version of mongoreplay to
be replayed on a mongod.

52
00:02:05.370 --> 00:02:06.900
So let's recap.

53
00:02:06.900 --> 00:02:09.307
Replaying traffic is
useful for testing.

54
00:02:09.307 --> 00:02:11.640
You can replay traffic to
simulate production workloads,

55
00:02:11.640 --> 00:02:15.390
to test a new environment, or
to inspect database operations.

56
00:02:15.390 --> 00:02:18.090
Previous releases didn't support
the capture of network traffic

57
00:02:18.090 --> 00:02:20.010
which was encrypted
over the wire.

58
00:02:20.010 --> 00:02:22.980
The traffic recorder captures
traffic on the mongod side

59
00:02:22.980 --> 00:02:25.502
to allow you to capture
any unencrypted traffic.

60
00:02:25.502 --> 00:02:27.960
And that's a brief introduction
to our new traffic recorder

61
00:02:27.960 --> 00:02:30.650
feature in MongoDB 4.2.