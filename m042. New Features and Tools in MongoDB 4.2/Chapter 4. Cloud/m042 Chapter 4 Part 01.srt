
1
00:00:00.000 --> 00:00:00.500


2
00:00:00.500 --> 00:00:01.130
Welcome back.

3
00:00:01.130 --> 00:00:04.550
In Ops Manager 4.2, the
Enterprise Kubernetes Operator

4
00:00:04.550 --> 00:00:06.680
is no longer in beta.

5
00:00:06.680 --> 00:00:08.900
With the new 4.2
release cycle, we

6
00:00:08.900 --> 00:00:11.600
are also releasing the general
availability of the Kubernetes

7
00:00:11.600 --> 00:00:13.240
Operator.

8
00:00:13.240 --> 00:00:16.059
Before we go into the new
Operator and what it can do,

9
00:00:16.059 --> 00:00:18.670
let's review what
Kubernetes is and why

10
00:00:18.670 --> 00:00:22.480
we'd want to use it what
Ops Manager and MongoDB.

11
00:00:22.480 --> 00:00:25.360
Kubernetes is an open-source
container orchestration system

12
00:00:25.360 --> 00:00:27.830
for automating application
deployment, scaling,

13
00:00:27.830 --> 00:00:29.140
and management.

14
00:00:29.140 --> 00:00:30.760
It was originally
designed by Google,

15
00:00:30.760 --> 00:00:33.280
and is now maintained by
the Cloud Native Computing

16
00:00:33.280 --> 00:00:34.660
Foundation.

17
00:00:34.660 --> 00:00:36.220
Looking into its
formal definition,

18
00:00:36.220 --> 00:00:39.370
we can identify that
Kubernetes manages deployments

19
00:00:39.370 --> 00:00:41.470
of containerized
applications, meaning

20
00:00:41.470 --> 00:00:44.170
that applications and systems
running on top of containers

21
00:00:44.170 --> 00:00:47.110
can be managed by a
Kubernetes cluster.

22
00:00:47.110 --> 00:00:49.030
There are many different
terms and concepts

23
00:00:49.030 --> 00:00:51.615
related with a containerized
system and Kubernetes,

24
00:00:51.615 --> 00:00:53.740
and the main ones that
we're going to be looking at

25
00:00:53.740 --> 00:00:57.100
are containers, pods,
replicasets, nodes,

26
00:00:57.100 --> 00:00:58.510
and clusters.

27
00:00:58.510 --> 00:01:01.210
On a high level, Kubernetes
can be represented by something

28
00:01:01.210 --> 00:01:02.810
similar to this diagram.

29
00:01:02.810 --> 00:01:05.019
Each Kubernetes closer
has a master node,

30
00:01:05.019 --> 00:01:06.940
which talks to
older notes in order

31
00:01:06.940 --> 00:01:08.920
to maintain your
cluster's health.

32
00:01:08.920 --> 00:01:11.560
It holds an important set of
processes that are out of scope

33
00:01:11.560 --> 00:01:13.070
with this lesson,
but we are going

34
00:01:13.070 --> 00:01:15.670
to provide links to the
Kubernetes documentation

35
00:01:15.670 --> 00:01:18.310
so that you can read up on
these processes a bit more.

36
00:01:18.310 --> 00:01:20.900
Kubernetes nodes can have
several different specs.

37
00:01:20.900 --> 00:01:22.590
We can compose a
Kubernetes cluster

38
00:01:22.590 --> 00:01:25.750
with physical, virtual,
cloud server nodes.

39
00:01:25.750 --> 00:01:29.650
Each node is composed with the
necessary process to run pods.

40
00:01:29.650 --> 00:01:31.300
Each node has a
container runtime,

41
00:01:31.300 --> 00:01:34.490
which generally Docker, to allow
the nodes to deploy and run

42
00:01:34.490 --> 00:01:35.670
containers.

43
00:01:35.670 --> 00:01:37.780
A pod is the smallest
deployable unit

44
00:01:37.780 --> 00:01:39.550
of computing in Kubernetes.

45
00:01:39.550 --> 00:01:43.160
A pod can be composed of one or
several different containers,

46
00:01:43.160 --> 00:01:46.150
and it also allows the
definition of shared network

47
00:01:46.150 --> 00:01:47.920
and storage resources.

48
00:01:47.920 --> 00:01:50.860
Kubernetes also allows
pods to be fault-tolerant

49
00:01:50.860 --> 00:01:52.287
and highly available.

50
00:01:52.287 --> 00:01:54.370
They're meant to provide
the same operational high

51
00:01:54.370 --> 00:01:56.990
availability as
MongoDB replicasets.

52
00:01:56.990 --> 00:01:59.860
However, this is implemented
quite differently.

53
00:01:59.860 --> 00:02:02.200
In the new version of Ops
Manager, it's easier for you

54
00:02:02.200 --> 00:02:04.810
to effectively manage your
containerized environment using

55
00:02:04.810 --> 00:02:05.800
automation.

56
00:02:05.800 --> 00:02:09.820
To see why we introduced the
Operator in Ops Manager 4.2,

57
00:02:09.820 --> 00:02:12.400
first, let's have a look
at how automation works

58
00:02:12.400 --> 00:02:14.420
without Kubernetes in the mix.

59
00:02:14.420 --> 00:02:16.740
There's a single agent
installed per host,

60
00:02:16.740 --> 00:02:20.480
and that agent pings back to
the Ops Manager web server.

61
00:02:20.480 --> 00:02:23.290
The web server stores
a JSON representation

62
00:02:23.290 --> 00:02:25.900
of the gold state of the
cluster, called the automation

63
00:02:25.900 --> 00:02:27.160
config.

64
00:02:27.160 --> 00:02:30.130
When this config is
changed either in the UI

65
00:02:30.130 --> 00:02:32.710
or via the API, the
agents on each host

66
00:02:32.710 --> 00:02:34.720
will start to go
through transformations

67
00:02:34.720 --> 00:02:37.510
to get the deployment
to its gold state,

68
00:02:37.510 --> 00:02:39.910
whether that be adding
a node, adding a shard,

69
00:02:39.910 --> 00:02:41.500
or updating a user.

70
00:02:41.500 --> 00:02:43.630
This works great when
we're talking about

71
00:02:43.630 --> 00:02:45.550
hosts in the normal
sense of the word,

72
00:02:45.550 --> 00:02:47.290
but what about containers?

73
00:02:47.290 --> 00:02:49.720
The concept of a host
is somewhat conflated,

74
00:02:49.720 --> 00:02:52.600
as a container is an isolated
environment in which process

75
00:02:52.600 --> 00:02:54.010
is run.

76
00:02:54.010 --> 00:02:57.590
We should really install
one agent per container.

77
00:02:57.590 --> 00:03:00.700
And the problem here is that
this can become quite complex

78
00:03:00.700 --> 00:03:03.400
quite quickly, having
to route internal IPs

79
00:03:03.400 --> 00:03:06.430
and ports within the container
to external IPs and ports

80
00:03:06.430 --> 00:03:07.870
on the host.

81
00:03:07.870 --> 00:03:10.560
The Kubernetes Operator is
a lightweight process that

82
00:03:10.560 --> 00:03:13.170
lives inside a Kubernetes pod.

83
00:03:13.170 --> 00:03:14.670
The Operator handles
the deployment

84
00:03:14.670 --> 00:03:17.610
of containers with an image
which contains the MongoDB

85
00:03:17.610 --> 00:03:20.790
agent, and this agent
can managed, back up,

86
00:03:20.790 --> 00:03:23.310
and monitor your
deployment as normal.

87
00:03:23.310 --> 00:03:25.650
The Operator also acts
as an intermediary

88
00:03:25.650 --> 00:03:28.830
between the agent and
the Ops Manager server,

89
00:03:28.830 --> 00:03:30.390
removing the
complexities of managing

90
00:03:30.390 --> 00:03:33.600
your internal or external IP
routing between the containers

91
00:03:33.600 --> 00:03:35.520
and Ops Manager so
that you can use

92
00:03:35.520 --> 00:03:37.440
all of the standard
monitoring, automation,

93
00:03:37.440 --> 00:03:40.170
and backup functionality
in Ops Manager as before

94
00:03:40.170 --> 00:03:41.910
with the added
functionality of being

95
00:03:41.910 --> 00:03:44.310
able to deploy and
manage containers

96
00:03:44.310 --> 00:03:46.410
directly from Ops Manager.

97
00:03:46.410 --> 00:03:48.160
So let's recap.

98
00:03:48.160 --> 00:03:50.860
The Kubernetes Operator is
now an official release.

99
00:03:50.860 --> 00:03:52.470
It's no longer in beta.

100
00:03:52.470 --> 00:03:54.390
You can deploy and
manage containers

101
00:03:54.390 --> 00:03:56.130
directly from Ops
Manager by having

102
00:03:56.130 --> 00:03:58.470
Ops Manager deploy an image.

103
00:03:58.470 --> 00:04:00.360
Each image installed
using the Operator

104
00:04:00.360 --> 00:04:02.880
has the MongoDB agent
pre-installed and ready

105
00:04:02.880 --> 00:04:05.430
to use to monitor,
manage, and back up

106
00:04:05.430 --> 00:04:08.150
your MongoDB deployment.