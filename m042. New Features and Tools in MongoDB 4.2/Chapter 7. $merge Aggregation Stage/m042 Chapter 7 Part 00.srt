
1
00:00:00.000 --> 00:00:00.180


2
00:00:00.180 --> 00:00:00.680
Hi.

3
00:00:00.680 --> 00:00:04.110
This is Asiya, and I'm going to
talk about the new merge stage

4
00:00:04.110 --> 00:00:06.090
in the aggregation pipeline.

5
00:00:06.090 --> 00:00:08.640
The only way of saving
the aggregation pipeline

6
00:00:08.640 --> 00:00:11.850
prior to MongoDB 4.2,
was by writing it

7
00:00:11.850 --> 00:00:16.770
to a new, unsharded
collection, via the $out stage.

8
00:00:16.770 --> 00:00:20.520
If the collection you wanted
to write already existed, $out

9
00:00:20.520 --> 00:00:23.610
would replace it
with the new version,

10
00:00:23.610 --> 00:00:26.440
and it couldn't be sharded.

11
00:00:26.440 --> 00:00:28.120
This only supported
a subset of what

12
00:00:28.120 --> 00:00:31.670
people want to do with the
output from an aggregation,

13
00:00:31.670 --> 00:00:34.780
and so MongoDB 4.2
introduces a new stage,

14
00:00:34.780 --> 00:00:37.150
which allows flexible
ways of saving results

15
00:00:37.150 --> 00:00:40.910
of the aggregation into an
already existing collection,

16
00:00:40.910 --> 00:00:44.410
whether or not it's
sharded or unsharded.

17
00:00:44.410 --> 00:00:46.690
We called it $merge.

18
00:00:46.690 --> 00:00:50.900
Now, you'll have a pipeline
like you normally do,

19
00:00:50.900 --> 00:00:55.240
and then as the last stage,
you would specify $merge

20
00:00:55.240 --> 00:00:57.970
with some options,
which we will review.

21
00:00:57.970 --> 00:01:01.270
Now unlike $out
stage, this new stage

22
00:01:01.270 --> 00:01:04.390
can output to any existing
collection, whether it's

23
00:01:04.390 --> 00:01:07.450
sharded or unsharded
You're allowed

24
00:01:07.450 --> 00:01:11.260
to output to a collection
in a different database,

25
00:01:11.260 --> 00:01:15.100
and you can specify exactly
how you want the new documents

26
00:01:15.100 --> 00:01:18.850
from this aggregation to
be merged into the existing

27
00:01:18.850 --> 00:01:20.490
collection.

28
00:01:20.490 --> 00:01:23.280
That's why we call it $merge.

29
00:01:23.280 --> 00:01:26.190
Now, when documents
from an aggregation

30
00:01:26.190 --> 00:01:29.010
are to be added to an
existing collection,

31
00:01:29.010 --> 00:01:31.610
the question is, how
should we merge them

32
00:01:31.610 --> 00:01:35.520
with the documents that
already exist in this output

33
00:01:35.520 --> 00:01:36.780
collection?

34
00:01:36.780 --> 00:01:39.530
Since there are multiple ways
you might want to handle this,

35
00:01:39.530 --> 00:01:42.390
merge provides you with
options to describe

36
00:01:42.390 --> 00:01:45.160
exactly what you want.

37
00:01:45.160 --> 00:01:47.910
Let's look at $merge syntax now.

38
00:01:47.910 --> 00:01:52.620
The only required argument
to $merge is target.

39
00:01:52.620 --> 00:01:56.220
You specify into and then
the name of the collection

40
00:01:56.220 --> 00:01:59.160
that you want to merge
your output with.

41
00:01:59.160 --> 00:02:00.930
The simplest syntax
of that is just

42
00:02:00.930 --> 00:02:03.180
to give it a string, which
represents a collection

43
00:02:03.180 --> 00:02:06.120
name in the same database that
you're running the aggregation

44
00:02:06.120 --> 00:02:10.970
in, but you can also
specify a full object

45
00:02:10.970 --> 00:02:14.240
with the name of the database
in the name of the collection,

46
00:02:14.240 --> 00:02:17.510
if the output is supposed to
go to a different database

47
00:02:17.510 --> 00:02:19.610
than the one that
you are running

48
00:02:19.610 --> 00:02:21.980
the aggregate pipeline in.

49
00:02:21.980 --> 00:02:23.870
Now, I said you might
want to specify how

50
00:02:23.870 --> 00:02:26.240
to handle matching documents.

51
00:02:26.240 --> 00:02:29.180
But before we decide
what to do on match,

52
00:02:29.180 --> 00:02:32.690
we have to understand how
documents are matched.

53
00:02:32.690 --> 00:02:37.250
You can specify the fields on
which to match the documents.

54
00:02:37.250 --> 00:02:40.130
When deciding how to match
them, the documents that

55
00:02:40.130 --> 00:02:42.530
are incoming to the
target collection,

56
00:02:42.530 --> 00:02:47.600
if the user doesn't specify
the optional on argument,

57
00:02:47.600 --> 00:02:51.590
the server will use the
field as the merging field

58
00:02:51.590 --> 00:02:54.320
for all unsharded
target collections.

59
00:02:54.320 --> 00:02:58.400
And the combination of
_id and your shard key

60
00:02:58.400 --> 00:03:01.470
if the collection is sharded.

61
00:03:01.470 --> 00:03:03.540
If that's how you want
to merge documents,

62
00:03:03.540 --> 00:03:07.480
then you don't have to
specify the field at all.

63
00:03:07.480 --> 00:03:09.710
But if you want to specify
a different unique key

64
00:03:09.710 --> 00:03:11.850
to match documents
on then you would

65
00:03:11.850 --> 00:03:15.030
specify either a
single field name

66
00:03:15.030 --> 00:03:18.750
or if there's multiple fields,
an array of them in the

67
00:03:18.750 --> 00:03:21.090
on argument.

68
00:03:21.090 --> 00:03:25.710
We do require that if you
specify your own merging key,

69
00:03:25.710 --> 00:03:29.100
there must be a unique
index present on it.

70
00:03:29.100 --> 00:03:30.780
This is of course
so we can uniquely

71
00:03:30.780 --> 00:03:35.130
identify the document
in the target collection

72
00:03:35.130 --> 00:03:39.130
to match with an incoming
document from the aggregation.

73
00:03:39.130 --> 00:03:44.820
So to recap, $merge allows
you to output results

74
00:03:44.820 --> 00:03:50.160
of an aggregation pipeline right
into another collection, giving

75
00:03:50.160 --> 00:03:56.160
you options to specify whether
you want to merge or insert

76
00:03:56.160 --> 00:03:59.250
or how you want to merge the
results with the existing

77
00:03:59.250 --> 00:04:02.400
documents, allowing
you to output

78
00:04:02.400 --> 00:04:05.700
to an existing sharded
or unsharded collection,

79
00:04:05.700 --> 00:04:08.490
as well as to a collection
in a different database

80
00:04:08.490 --> 00:04:12.140
than the one that you're
running the aggregation.