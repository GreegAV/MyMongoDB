
1
00:00:00.000 --> 00:00:00.500


2
00:00:00.500 --> 00:00:03.180
Now the last example
I have would show you

3
00:00:03.180 --> 00:00:05.220
how you might want
to create a rollup

4
00:00:05.220 --> 00:00:07.770
table with some
kind of a summary

5
00:00:07.770 --> 00:00:12.070
from an existing collection
that has detailed information.

6
00:00:12.070 --> 00:00:14.400
And in this case, we're
going to say that an existing

7
00:00:14.400 --> 00:00:16.710
collection has all
of the registration

8
00:00:16.710 --> 00:00:19.830
for all of the events
that we're doing,

9
00:00:19.830 --> 00:00:24.150
and I want to create a
registration summary where

10
00:00:24.150 --> 00:00:28.500
I show the number of people
who registered by day, where

11
00:00:28.500 --> 00:00:32.770
the day represents the date
that the registration came in.

12
00:00:32.770 --> 00:00:36.900
And in this case, I might
create the registration summary

13
00:00:36.900 --> 00:00:41.760
collection first by analyzing
all of the existing data,

14
00:00:41.760 --> 00:00:46.800
and then incrementally update
by doing periodic rollups

15
00:00:46.800 --> 00:00:48.790
into the summary.

16
00:00:48.790 --> 00:00:51.390
So here, rather
than merging on _ID,

17
00:00:51.390 --> 00:00:55.200
we're going to merge
on the event and date,

18
00:00:55.200 --> 00:00:59.250
that's the unique identifier
for each record in the summary

19
00:00:59.250 --> 00:01:00.940
table.

20
00:01:00.940 --> 00:01:05.000
And we're going to create a
unique index on event date

21
00:01:05.000 --> 00:01:08.550
so that things will get
matched up correctly.

22
00:01:08.550 --> 00:01:11.120
And now for the very
first run, we're

23
00:01:11.120 --> 00:01:13.310
going to say I would like to--

24
00:01:13.310 --> 00:01:16.270
and by the way, I'm let's say
doing analysis for MongoDB

25
00:01:16.270 --> 00:01:18.740
World 19 registrations.

26
00:01:18.740 --> 00:01:23.360
I'm going to match where
event_id is MDBW19.

27
00:01:23.360 --> 00:01:27.990
I'm going to group
by data string here.

28
00:01:27.990 --> 00:01:31.780
We'll create a string of a
particular normalized format.

29
00:01:31.780 --> 00:01:33.530
So that's what I'm
going to group on here,

30
00:01:33.530 --> 00:01:37.643
and I'm going to count up
how many in total there are.

31
00:01:37.643 --> 00:01:39.560
And then I'm going to
project the new document

32
00:01:39.560 --> 00:01:43.490
where event is MDBW19.

33
00:01:43.490 --> 00:01:49.330
Date is you this grouping showed
me, and total is the count.

34
00:01:49.330 --> 00:01:53.660
And then I'm going to output
that or merge into regsummary,

35
00:01:53.660 --> 00:01:57.930
merging on event
and date fields.

36
00:01:57.930 --> 00:02:00.560
So this is what's
coming out here,

37
00:02:00.560 --> 00:02:03.920
and it's going to get
inserted into the collection.

38
00:02:03.920 --> 00:02:05.840
If the collection already
existed with data,

39
00:02:05.840 --> 00:02:10.669
it will overwrite for every
day with the new total.

40
00:02:10.669 --> 00:02:12.400
And there we have
maybe a whole bunch

41
00:02:12.400 --> 00:02:14.980
of days in this collection.

42
00:02:14.980 --> 00:02:18.520
Now another day or
two goes by and I say,

43
00:02:18.520 --> 00:02:22.430
hey, I last ran
this on the 22nd.

44
00:02:22.430 --> 00:02:26.020
It's now the 24th, I'd like
to run this for the 22nd.

45
00:02:26.020 --> 00:02:28.180
I'd like to run
this for the 23rd.

46
00:02:28.180 --> 00:02:32.470
For a single day, I might
run something like this.

47
00:02:32.470 --> 00:02:36.250
I'll still match
the event_id MDBW19,

48
00:02:36.250 --> 00:02:37.930
but I'm going to
now limit things

49
00:02:37.930 --> 00:02:42.890
where the date is,
basically, during May 22nd.

50
00:02:42.890 --> 00:02:43.390
Right?

51
00:02:43.390 --> 00:02:45.610
It's greater than
midnight 22nd, but less

52
00:02:45.610 --> 00:02:48.460
than midnight of the 23rd.

53
00:02:48.460 --> 00:02:50.570
I'm going to count up the total.

54
00:02:50.570 --> 00:02:53.450
Now I'm going to create this
record where this is the event.

55
00:02:53.450 --> 00:02:54.740
This is the date.

56
00:02:54.740 --> 00:02:55.240
Right?

57
00:02:55.240 --> 00:02:57.040
That's the then I'm
querying by so that's

58
00:02:57.040 --> 00:03:00.540
the date I'm having field on.

59
00:03:00.540 --> 00:03:03.690
I'm now merging into
regsummary on event and date,

60
00:03:03.690 --> 00:03:07.230
and the record is going
to look like this.

61
00:03:07.230 --> 00:03:08.930
And if that date
was already there

62
00:03:08.930 --> 00:03:11.810
because maybe we got a
partial result for the 22nd

63
00:03:11.810 --> 00:03:15.310
when we ran it before, now
that it's after the 22nd,

64
00:03:15.310 --> 00:03:19.310
it's going to give me the entire
total and overwrite whatever

65
00:03:19.310 --> 00:03:20.390
the previous total was.

66
00:03:20.390 --> 00:03:22.940
So because I'm doing
a total sum here,

67
00:03:22.940 --> 00:03:26.000
I don't want to merge it or
add it to an existing value.

68
00:03:26.000 --> 00:03:29.060
I just want to write that that's
the total of registrations

69
00:03:29.060 --> 00:03:31.360
we got on that day.