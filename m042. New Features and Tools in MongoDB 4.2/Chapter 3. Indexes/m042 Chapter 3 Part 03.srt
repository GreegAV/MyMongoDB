1
00:00:00,000 --> 00:00:00,700


2
00:00:00,700 --> 00:00:01,870
All right, welcome back.

3
00:00:01,870 --> 00:00:03,453
In this lesson, we're
going to discuss

4
00:00:03,453 --> 00:00:07,390
some ways we can use this new
wildcard index in MongoDB.

5
00:00:07,390 --> 00:00:08,930
We're going to
cover two examples.

6
00:00:08,930 --> 00:00:10,420
The first involves
any collection

7
00:00:10,420 --> 00:00:13,300
with an unpredictable query
shape and the other affects

8
00:00:13,300 --> 00:00:15,610
the way that we would
implement the attribute pattern

9
00:00:15,610 --> 00:00:16,990
in our data model.

10
00:00:16,990 --> 00:00:19,030
Collections with an
arbitrary query shape

11
00:00:19,030 --> 00:00:21,460
are good candidates
for the wildcard index.

12
00:00:21,460 --> 00:00:23,920
Arbitrary query patterns
become more common

13
00:00:23,920 --> 00:00:26,080
as data becomes richer
and more abundant,

14
00:00:26,080 --> 00:00:27,880
especially in a
database like MongoDB

15
00:00:27,880 --> 00:00:30,220
that encourages very
large documents.

16
00:00:30,220 --> 00:00:32,872
And because we can use data in
every facet of our business,

17
00:00:32,872 --> 00:00:34,330
we don't always
know how a data set

18
00:00:34,330 --> 00:00:36,710
will be used when we create it.

19
00:00:36,710 --> 00:00:39,160
In this example, we have
a collection of loan data

20
00:00:39,160 --> 00:00:41,230
where we store
information about the loan

21
00:00:41,230 --> 00:00:44,572
with a sub-document describing
information about the borrower.

22
00:00:44,572 --> 00:00:46,030
Let's say that our
department wants

23
00:00:46,030 --> 00:00:48,335
to learn more about the
types of borrowers we have.

24
00:00:48,335 --> 00:00:50,710
We know that our queries will
be run against the borrower

25
00:00:50,710 --> 00:00:52,660
sub-document, but we
don't know exactly

26
00:00:52,660 --> 00:00:54,580
which fields will be
most important to us

27
00:00:54,580 --> 00:00:57,200
because we just started
exploring the data.

28
00:00:57,200 --> 00:01:00,100
So to enable this sort of
open-ended data exploration,

29
00:01:00,100 --> 00:01:03,400
we can create a wildcard index
on every field in the borrower

30
00:01:03,400 --> 00:01:04,510
sub-document.

31
00:01:04,510 --> 00:01:07,460
We create the index with
the createIndex command,

32
00:01:07,460 --> 00:01:09,010
but instead of a
regular field here,

33
00:01:09,010 --> 00:01:11,920
we use this notation to
denote all the sub pads

34
00:01:11,920 --> 00:01:14,170
of the borrower sub-document.

35
00:01:14,170 --> 00:01:16,480
Then when we query on
age or any other field

36
00:01:16,480 --> 00:01:18,370
in the borrower
sub-document, we know

37
00:01:18,370 --> 00:01:20,830
that this query will be
supported by at least a single

38
00:01:20,830 --> 00:01:22,280
field index.

39
00:01:22,280 --> 00:01:23,980
This wildcard index
can also be used

40
00:01:23,980 --> 00:01:28,030
to simplify our implementation
of the attribute pattern.

41
00:01:28,030 --> 00:01:30,280
For those who are not
familiar, the attribute pattern

42
00:01:30,280 --> 00:01:33,730
is a data modeling strategy that
we can use to index and query

43
00:01:33,730 --> 00:01:36,490
across an arbitrary
number of attributes.

44
00:01:36,490 --> 00:01:38,530
In this example, the
attributes are the number

45
00:01:38,530 --> 00:01:40,930
of streams that a song
received on different streaming

46
00:01:40,930 --> 00:01:42,040
platforms.

47
00:01:42,040 --> 00:01:43,870
We've taken all the
top-level fields

48
00:01:43,870 --> 00:01:45,670
describing these
different counts

49
00:01:45,670 --> 00:01:47,230
and put them all
in sub-documents

50
00:01:47,230 --> 00:01:48,850
in the same array.

51
00:01:48,850 --> 00:01:51,940
This way, we don't need to query
across these different fields.

52
00:01:51,940 --> 00:01:54,820
We can just query on
streams.k or streams.v.

53
00:01:54,820 --> 00:01:58,300
Similarly, we could
create a compound index

54
00:01:58,300 --> 00:02:01,850
on streams.k and streams.v,
and all new sub-documents

55
00:02:01,850 --> 00:02:03,850
in the streams array that
contain a "k" or a "v"

56
00:02:03,850 --> 00:02:07,740
will result in a new
index key being created.

57
00:02:07,740 --> 00:02:10,530
But if we use a wildcard
index on the streams field,

58
00:02:10,530 --> 00:02:14,960
which looks like streams.$**,
then we can use an object here

59
00:02:14,960 --> 00:02:16,850
instead of an array
of sub-documents.

60
00:02:16,850 --> 00:02:19,280
And we can assume that every
field in this sub-document

61
00:02:19,280 --> 00:02:20,997
will be index.

62
00:02:20,997 --> 00:02:22,580
In this example, we
didn't need to use

63
00:02:22,580 --> 00:02:24,950
an array of sub-documents
for these key value pairs

64
00:02:24,950 --> 00:02:27,020
and give them all a
particular name like k

65
00:02:27,020 --> 00:02:30,200
and v. We just create an
index and all the sub-pads

66
00:02:30,200 --> 00:02:32,270
in the stream
sub-document, and then we

67
00:02:32,270 --> 00:02:34,100
can query on any
of those sub-fields

68
00:02:34,100 --> 00:02:36,788
knowing that they'll be
supported by an index.

69
00:02:36,788 --> 00:02:39,080
So in this lesson, we discussed
two important use cases

70
00:02:39,080 --> 00:02:40,562
for the wildcard index.

71
00:02:40,562 --> 00:02:42,020
The first was a
collection where we

72
00:02:42,020 --> 00:02:43,880
don't know the
exact queries which

73
00:02:43,880 --> 00:02:45,740
the wildcard index
mitigates by creating

74
00:02:45,740 --> 00:02:48,380
a single-field index on
every field in a document

75
00:02:48,380 --> 00:02:50,190
or sub-document.

76
00:02:50,190 --> 00:02:52,850
The second was simplifying our
implementation of the attribute

77
00:02:52,850 --> 00:02:55,550
pattern in our data by
using a wildcard index

78
00:02:55,550 --> 00:00:00,000
on a sub-document
containing our attributes.

