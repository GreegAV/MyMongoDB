1
00:00:00,000 --> 00:00:00,500


2
00:00:00,500 --> 00:00:03,240
Read concern is a
companion to write concern,

3
00:00:03,240 --> 00:00:05,896
an acknowledgment mechanism
for read operations

4
00:00:05,896 --> 00:00:07,770
where developers can
direct their application

5
00:00:07,770 --> 00:00:10,560
to perform read operations where
the returned documents meet

6
00:00:10,560 --> 00:00:12,900
the requested
durability guarantee.

7
00:00:12,900 --> 00:00:15,120
Consider a replica
set where applications

8
00:00:15,120 --> 00:00:19,420
insert a document, which is
acknowledged by the primary.

9
00:00:19,420 --> 00:00:22,630
Before the document can
replicate to the secondaries,

10
00:00:22,630 --> 00:00:25,300
the application
reads that document.

11
00:00:25,300 --> 00:00:27,990
Suddenly, the primary fails.

12
00:00:27,990 --> 00:00:29,620
The document we have
read has not yet

13
00:00:29,620 --> 00:00:32,119
replicated to the secondaries.

14
00:00:32,119 --> 00:00:34,610
When the old primary
comes back online,

15
00:00:34,610 --> 00:00:36,560
that data is going to
be rolled back as part

16
00:00:36,560 --> 00:00:38,720
of the synchronization process.

17
00:00:38,720 --> 00:00:41,060
While you can access the
rolled back data manually,

18
00:00:41,060 --> 00:00:42,770
the application
effectively has a piece

19
00:00:42,770 --> 00:00:46,720
of data that no longer
exists in the cluster.

20
00:00:46,720 --> 00:00:48,600
This might cause problems
in the application,

21
00:00:48,600 --> 00:00:50,630
depending on your architecture.

22
00:00:50,630 --> 00:00:52,650
Read concern provides
a way of dealing

23
00:00:52,650 --> 00:00:54,450
with the issue of
data durability

24
00:00:54,450 --> 00:00:56,340
during a failover event.

25
00:00:56,340 --> 00:00:59,760
Just like how write concern lets
you specify how durable write

26
00:00:59,760 --> 00:01:02,330
operations should
be, read concern

27
00:01:02,330 --> 00:01:04,890
lets your application specify
a durability guarantee

28
00:01:04,890 --> 00:01:07,500
for documents written
by a read operation.

29
00:01:07,500 --> 00:01:09,950
The read operation only
returns data acknowledged

30
00:01:09,950 --> 00:01:13,230
as having been written to a
number of replica set members

31
00:01:13,230 --> 00:01:16,192
specified in the read concern.

32
00:01:16,192 --> 00:01:18,400
You can choose between
returning the most recent data

33
00:01:18,400 --> 00:01:20,640
in a cluster or
the data received

34
00:01:20,640 --> 00:01:23,410
by a majority of
members in the cluster.

35
00:01:23,410 --> 00:01:24,940
One really important note.

36
00:01:24,940 --> 00:01:28,210
A document that does not meet
the specified read concern

37
00:01:28,210 --> 00:01:31,600
is not a document that
is guaranteed to be lost.

38
00:01:31,600 --> 00:01:34,000
It just means that at
the time of the read,

39
00:01:34,000 --> 00:01:36,160
the data had not
propagated to enough nodes

40
00:01:36,160 --> 00:01:38,890
to meet the requested
durability guarantee.

41
00:01:38,890 --> 00:01:41,470
There are four read
concern levels.

42
00:01:41,470 --> 00:01:44,710
Local returns the most
recent data in the cluster.

43
00:01:44,710 --> 00:01:47,470
Any data freshly written
to the primary qualifies

44
00:01:47,470 --> 00:01:49,045
for local read concern.

45
00:01:49,045 --> 00:01:50,920
There are no guarantees
that the data will be

46
00:01:50,920 --> 00:01:52,960
safe during a failover event.

47
00:01:52,960 --> 00:01:55,450
Local reads are the
default for read operations

48
00:01:55,450 --> 00:01:57,160
against the primary.

49
00:01:57,160 --> 00:02:00,080
Available read concerns the
same as local read concern

50
00:02:00,080 --> 00:02:01,986
for replica set deployments.

51
00:02:01,986 --> 00:02:04,360
Available read concern is the
default for read operations

52
00:02:04,360 --> 00:02:06,400
against secondary members.

53
00:02:06,400 --> 00:02:09,520
Secondary reads are an aspect of
MongoDB read preference, which

54
00:02:09,520 --> 00:02:11,494
is covered in a later lesson.

55
00:02:11,494 --> 00:02:13,660
The main difference between
local and available read

56
00:02:13,660 --> 00:02:16,351
concern is in the context
of sharded clusters.

57
00:02:16,351 --> 00:02:18,600
We're going to talk more
about sharded clusters later.

58
00:02:18,600 --> 00:02:20,724
It's enough to know that
available read concern has

59
00:02:20,724 --> 00:02:23,380
special behavior in
sharded clusters.

60
00:02:23,380 --> 00:02:25,200
Majority read
concern only returns

61
00:02:25,200 --> 00:02:26,950
data that has been
acknowledged as written

62
00:02:26,950 --> 00:02:29,414
to a majority of
replica set members.

63
00:02:29,414 --> 00:02:31,080
So here in our
three-member replica set,

64
00:02:31,080 --> 00:02:32,740
our read operations
would only return

65
00:02:32,740 --> 00:02:36,190
those documents written to both
the primary and the secondary.

66
00:02:36,190 --> 00:02:39,470
The only way that documents
returned by a read concern

67
00:02:39,470 --> 00:02:42,660
majority read
operation could be lost

68
00:02:42,660 --> 00:02:45,220
is if a majority of replica
set members went down

69
00:02:45,220 --> 00:02:47,650
and the documents were not
replicated to the remaining

70
00:02:47,650 --> 00:02:51,140
replica set members, which
is a very unlikely situation,

71
00:02:51,140 --> 00:02:53,530
depending on your
deployment architecture.

72
00:02:53,530 --> 00:02:56,770
Majority read concern provides
the stronger guarantee compared

73
00:02:56,770 --> 00:02:58,559
to local or available writes.

74
00:02:58,559 --> 00:03:00,100
But the trade-off
is that you may not

75
00:03:00,100 --> 00:03:03,190
get the freshest or latest
data in your cluster.

76
00:03:03,190 --> 00:03:05,830
As a special note, the
MMAPv1 storage engine

77
00:03:05,830 --> 00:03:09,070
does not support write
concern of majority.

78
00:03:09,070 --> 00:03:12,340
Linearizeable read concern
was added in MongoDB 3.4,

79
00:03:12,340 --> 00:03:14,020
and has special behavior.

80
00:03:14,020 --> 00:03:15,790
Like read concern
majority, it also

81
00:03:15,790 --> 00:03:18,760
only returns data that has
been majority committed.

82
00:03:18,760 --> 00:03:21,550
Linearizeable goes beyond
that, and provides read

83
00:03:21,550 --> 00:03:24,070
your own write functionality.

84
00:03:24,070 --> 00:03:27,040
So when should you
use what read concern?

85
00:03:27,040 --> 00:03:29,920
Really depends on your
application requirements.

86
00:03:29,920 --> 00:03:33,970
Fast, safe, or the latest
data in your cluster.

87
00:03:33,970 --> 00:03:35,140
Pick two.

88
00:03:35,140 --> 00:03:37,840
That's the general idea.

89
00:03:37,840 --> 00:03:40,150
If you want fast
reads of the latest

90
00:03:40,150 --> 00:03:42,940
data, local or
available read concern

91
00:03:42,940 --> 00:03:44,500
should suit you just fine.

92
00:03:44,500 --> 00:03:47,370
But you are going to lose
your durability guarantee.

93
00:03:47,370 --> 00:03:50,590
If you want fast reads
of the safest data,

94
00:03:50,590 --> 00:03:53,540
then majority read concern
is a good middle ground.

95
00:03:53,540 --> 00:03:55,840
But again, you may not be
getting the latest written

96
00:03:55,840 --> 00:03:57,910
data to your cluster.

97
00:03:57,910 --> 00:04:00,130
If you want safe
reads of the latest

98
00:04:00,130 --> 00:04:02,320
data at the time of
the read operation,

99
00:04:02,320 --> 00:04:04,570
then linearizeable
is a good choice,

100
00:04:04,570 --> 00:04:06,400
but it's more
likely to be slower.

101
00:04:06,400 --> 00:04:08,560
And it's single
document reads only.

102
00:04:08,560 --> 00:04:10,700
One thing to be
really clear about,

103
00:04:10,700 --> 00:04:12,700
read concern doesn't
prevent deleting

104
00:04:12,700 --> 00:04:15,640
data using a CRUD
operation, such as delete.

105
00:04:15,640 --> 00:04:17,350
We're only talking
about the durability

106
00:04:17,350 --> 00:04:20,200
of data returned by a
read operation in context

107
00:04:20,200 --> 00:04:21,767
of a failover event.

108
00:04:21,767 --> 00:04:23,350
In a later lesson,
we're going to talk

109
00:04:23,350 --> 00:04:25,975
about read preference, where you
can route your read operations

110
00:04:25,975 --> 00:04:27,880
to secondary members.

111
00:04:27,880 --> 00:04:30,160
Read preference for
secondaries does

112
00:04:30,160 --> 00:04:34,030
allow you to specify local
or available read concern,

113
00:04:34,030 --> 00:04:36,550
but you're going to lose the
guarantee of getting the most

114
00:04:36,550 --> 00:04:37,910
recent data.

115
00:04:37,910 --> 00:04:40,390
So just remember that
with secondary reads,

116
00:04:40,390 --> 00:04:43,850
local and available read
concern is really just fast,

117
00:04:43,850 --> 00:04:46,790
but not necessarily the latest.

118
00:04:46,790 --> 00:04:50,550
To recap, read concern uses
an acknowledgment mechanism

119
00:04:50,550 --> 00:04:52,560
for read operations
where applications

120
00:04:52,560 --> 00:04:55,830
can request only that data which
meets the requested durability

121
00:04:55,830 --> 00:04:57,120
guarantee.

122
00:04:57,120 --> 00:05:00,210
There are four available
read concern options.

123
00:05:00,210 --> 00:05:03,490
Local and available are
identical for replica sets.

124
00:05:03,490 --> 00:05:06,150
Their behavior's more
distinct in sharded clusters.

125
00:05:06,150 --> 00:05:07,980
Majority read concern
is your middle ground

126
00:05:07,980 --> 00:05:09,780
between durability
and fast reads,

127
00:05:09,780 --> 00:05:12,430
but it can return stale data.

128
00:05:12,430 --> 00:05:15,780
Linearizeable has the strongest
durability guarantees,

129
00:05:15,780 --> 00:05:17,520
and always returns
the freshest data

130
00:05:17,520 --> 00:05:20,130
in context of a read
operation in exchange

131
00:05:20,130 --> 00:05:22,590
for potentially slow
read operations as well

132
00:05:22,590 --> 00:05:25,890
as the overall restrictions
and requirements for using it.

133
00:05:25,890 --> 00:05:28,260
Finally, you can use read
concern in conjunction

134
00:05:28,260 --> 00:05:31,270
with write concern to specify
durability guarantees on both

135
00:05:31,270 --> 00:05:32,411
reads and writes.

136
00:05:32,411 --> 00:05:34,410
Remember that the two
work together, but are not

137
00:05:34,410 --> 00:05:35,910
dependent on each other.

138
00:05:35,910 --> 00:05:38,160
You can use read concern
with write concern

139
00:05:38,160 --> 00:00:00,000
or read concern
without write concern.

