1
00:00:00,000 --> 00:00:00,620


2
00:00:00,620 --> 00:00:02,510
Read preference allows
your applications

3
00:00:02,510 --> 00:00:05,810
to route read operations to
specific members of a replica

4
00:00:05,810 --> 00:00:07,180
set.

5
00:00:07,180 --> 00:00:10,190
Read preference is principally
a driver side setting.

6
00:00:10,190 --> 00:00:12,260
Make sure to check your
driver documentation

7
00:00:12,260 --> 00:00:14,960
for complete instructions on
specifying a read preference

8
00:00:14,960 --> 00:00:17,180
for your read operations.

9
00:00:17,180 --> 00:00:20,250
Take this three member
replica set, for example.

10
00:00:20,250 --> 00:00:23,030
By default, your applications
read and write data

11
00:00:23,030 --> 00:00:24,830
on the primary.

12
00:00:24,830 --> 00:00:27,680
With replica sets, data
is replicated to all data

13
00:00:27,680 --> 00:00:29,000
bearing members.

14
00:00:29,000 --> 00:00:31,010
So both of these
secondaries would eventually

15
00:00:31,010 --> 00:00:34,200
have copies of the primary data.

16
00:00:34,200 --> 00:00:36,540
What if we, instead, wanted
to have our application

17
00:00:36,540 --> 00:00:39,390
prefer reading from
a secondary member?

18
00:00:39,390 --> 00:00:42,870
With the read preference, we
can direct the application

19
00:00:42,870 --> 00:00:45,420
to route its query to a
secondary member of the replica

20
00:00:45,420 --> 00:00:48,650
set, instead of the primary.

21
00:00:48,650 --> 00:00:52,310
There are five supported
read preference modes.

22
00:00:52,310 --> 00:00:55,040
Primary read preference
routes all read operations

23
00:00:55,040 --> 00:00:56,570
to the primary only.

24
00:00:56,570 --> 00:00:58,880
This is the default
read preference.

25
00:00:58,880 --> 00:01:02,180
PrimaryPreferred routes read
operations to the primary.

26
00:01:02,180 --> 00:01:03,620
But if the primary
is unavailable,

27
00:01:03,620 --> 00:01:06,320
such as during an election
or fail-over event,

28
00:01:06,320 --> 00:01:09,020
the application can route
reads to an available secondary

29
00:01:09,020 --> 00:01:10,970
member instead.

30
00:01:10,970 --> 00:01:12,950
Secondary routes
read operations only

31
00:01:12,950 --> 00:01:16,310
to the secondary members
in the replica set.

32
00:01:16,310 --> 00:01:18,710
SecondaryPreferred
routes read operations

33
00:01:18,710 --> 00:01:20,240
to the secondary members.

34
00:01:20,240 --> 00:01:22,580
But if no secondary
members are available,

35
00:01:22,580 --> 00:01:25,900
the operation then
routes to the primary.

36
00:01:25,900 --> 00:01:28,480
Nearest routes read operations
to the replica set member

37
00:01:28,480 --> 00:01:30,700
with the least network
latency to the host,

38
00:01:30,700 --> 00:01:32,710
regardless of the members type.

39
00:01:32,710 --> 00:01:35,530
This typically supports
geographically local read

40
00:01:35,530 --> 00:01:37,180
operations.

41
00:01:37,180 --> 00:01:38,899
With secondary reads,
always keep in mind

42
00:01:38,899 --> 00:01:40,690
that depending on the
amount of replication

43
00:01:40,690 --> 00:01:44,380
latency in a replica set,
you can receive stale data.

44
00:01:44,380 --> 00:01:46,450
For example, let's say
this replica set receives

45
00:01:46,450 --> 00:01:49,360
a write operation that
updates this document, where

46
00:01:49,360 --> 00:01:53,350
name is Mongo 101, to have
a status of published.

47
00:01:53,350 --> 00:01:54,880
At this time, the
secondary still

48
00:01:54,880 --> 00:01:57,760
has the old version
of this document

49
00:01:57,760 --> 00:01:58,990
where the status is pending.

50
00:01:58,990 --> 00:02:01,630
If I issue a
secondary read, using

51
00:02:01,630 --> 00:02:03,910
nearest read preference
selects the secondary member

52
00:02:03,910 --> 00:02:06,040
to read from, I'm
going to get an older

53
00:02:06,040 --> 00:02:08,410
version of this document.

54
00:02:08,410 --> 00:02:11,050
This table gives you an idea
of some of the scenarios

55
00:02:11,050 --> 00:02:13,390
where you'd use a
given read preference.

56
00:02:13,390 --> 00:02:16,000
The big takeaway here, is
that secondary reads always

57
00:02:16,000 --> 00:02:18,460
have a chance of
returning stale data.

58
00:02:18,460 --> 00:02:22,120
How stale that data is, depends
entirely on how much of a delay

59
00:02:22,120 --> 00:02:24,760
there is between your
primary and your secondaries.

60
00:02:24,760 --> 00:02:26,700
Geographically
distributed replica sets

61
00:02:26,700 --> 00:02:29,440
are more likely to suffer
from stale reads, for example,

62
00:02:29,440 --> 00:02:31,420
than a replica set where
all the members are

63
00:02:31,420 --> 00:02:35,730
in the same geographic region,
or even the same data center.

64
00:02:35,730 --> 00:02:37,460
To summarize, read
preference lets

65
00:02:37,460 --> 00:02:39,120
you choose what
replica set members

66
00:02:39,120 --> 00:02:41,610
to route read operations to.

67
00:02:41,610 --> 00:02:44,550
The big drawback of using a read
preference, other than primary,

68
00:02:44,550 --> 00:02:47,430
is the potential for
stale read operations.

69
00:02:47,430 --> 00:02:49,140
And the nearest
read preference is

70
00:02:49,140 --> 00:02:50,790
most useful if you
want to support

71
00:02:50,790 --> 00:02:52,980
geographically local reads.

72
00:02:52,980 --> 00:02:55,860
Just remember that it can come
with the potential of reading

73
00:02:55,860 --> 00:00:00,000
stale data.

