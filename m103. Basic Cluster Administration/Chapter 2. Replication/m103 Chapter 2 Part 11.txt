In general, the core write commands all support write concern.

Now, we've talked about this all at a pretty high level.

Write concern makes a lot more sense when you watch it in action.

In an earlier lesson, we showed you how an application writes "behave" during a failover event.

Let's return to that example now but to talk about write concern.

We have our three-member replica set with an application inserting data into the primary.

As you might remember, data is replicated from the primary to the secondaries.

The default write concern is one.

So even though we don't set the write concern explicitly, the application implicitly assigns it a write concern of one.

At this point, we know that our primary has received the write operation.

We've received one acknowledgment based on our write concern of one.

Since that matches the write concern we requested, we're good to go.

But what would happen if the primary failed at this point of time before it completes replicating this write to the secondaries?

The secondaries won't see the write.

While it was successful on a single node, we had no guarantee that the write had propagated to the remaining replica set members.

Even though we got the level of write concern we asked for, the guarantee level was too low to accommodate the scenario.

As far as our application is concerned, this was a successful write.

But when this primary comes back online the right would actually be rolled back.

Let's imagine the same scenario but with a write concern of majority.

That means we now would need an acknowledgment from two members of our three-member replica set.

The application waits until the primary reports that at least one of the secondaries has also acknowledged the write.

With two acknowledgments the application can consider the write a success.

Now if the primary happens to go down, we have a reasonable guarantee that at least one of the secondaries has received the write operation.

If I set the write concern to three, the application would require an acknowledgment from all three members before considering the write successful.

At this point, you might be thinking, well, I want guarantees of data durability.

So shouldn't I always set my write concern as high as possible?

Well, a stronger level of durability guarantee comes with the trade off.

Specifically, you have to wait for the acknowledgments to come in.

That means your write operations may take longer than required if you requested a lesser or even no write acknowledgment.

As the number of replica set nodes increase, write operations may take even longer to return as successful.

Alternatively, what happens if one of your secondaries are down?

Based on our write concern, we need an acknowledgment from three members of the replica set.

This write now blocks until the secondary comes back online which may take longer than is acceptable.

This is where the W timeout option comes in handy.

You can set it to a reasonable time wherein the application stops waiting and moves forward throwing an error related to write concern.

Remember, the timeout error does not mean that the write failed.

We can see here that the primary and at least one secondary did acknowledge.

But because we timed out waiting for the requested write concern, as far as the application is concerned, it did not receive the level of guarantee it requested.

Generally, setting a W of majority is a nice middle ground between fast writes and durability guarantees.

To recap, write concern allows your applications to request a certain number of acknowledgments for a write operation for the MongoDB cluster.

These acknowledgments represent increasing durability guarantees for a given write operations.

Write concern comes with a trade off of write speed.

The higher guarantee you need that a right is durable, the more time the overall write operation requires to complete.

MongoDB supports a write concern on all deployment types.

That means standalone, replica sets, and sharded clusters all support write concern.