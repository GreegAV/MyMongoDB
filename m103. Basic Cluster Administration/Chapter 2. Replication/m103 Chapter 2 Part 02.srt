1
00:00:00,000 --> 00:00:00,320


2
00:00:00,320 --> 00:00:01,778
All right, so in
this lesson, we're

3
00:00:01,778 --> 00:00:03,812
going to initiate a
local replica set.

4
00:00:03,812 --> 00:00:06,020
We're going to start by
independently launching three

5
00:00:06,020 --> 00:00:08,240
mongod processes and
they won't actually

6
00:00:08,240 --> 00:00:09,950
be able to communicate
with each other

7
00:00:09,950 --> 00:00:12,080
until we connect
them, at which point

8
00:00:12,080 --> 00:00:15,240
they'll be able to actually
replicate data for us.

9
00:00:15,240 --> 00:00:17,750
So this is the configuration
file for standalone node.

10
00:00:17,750 --> 00:00:18,842
We've called it node 1.

11
00:00:18,842 --> 00:00:21,050
And these settings should
look fairly familiar to you

12
00:00:21,050 --> 00:00:23,310
if you've been following
the previous lessons.

13
00:00:23,310 --> 00:00:25,640
We don't actually need to
change any of these settings

14
00:00:25,640 --> 00:00:27,560
in order to enable
replication, we just

15
00:00:27,560 --> 00:00:29,660
need to add a few lines.

16
00:00:29,660 --> 00:00:31,940
So this line enables
key file authentication

17
00:00:31,940 --> 00:00:35,030
on our cluster, which mandates
that all members of the replica

18
00:00:35,030 --> 00:00:38,450
set have to authenticate to each
other using a key file that we

19
00:00:38,450 --> 00:00:39,560
create here.

20
00:00:39,560 --> 00:00:41,880
And we'll create
this one in a minute.

21
00:00:41,880 --> 00:00:44,660
This is in addition to
the client authentication

22
00:00:44,660 --> 00:00:47,280
that we enabled in
the previous line.

23
00:00:47,280 --> 00:00:50,210
So we create this key
file using OpenSSL,

24
00:00:50,210 --> 00:00:52,310
and we place it in the
directory that we specified

25
00:00:52,310 --> 00:00:54,420
in our configuration file.

26
00:00:54,420 --> 00:00:56,180
But right now, our
mongod processes

27
00:00:56,180 --> 00:00:58,490
can't actually use this
key file because they

28
00:00:58,490 --> 00:01:00,744
don't have the permissions
to read from it.

29
00:01:00,744 --> 00:01:02,660
So what we're going to
do is we going actually

30
00:01:02,660 --> 00:01:05,870
change the permissions
using chmod

31
00:01:05,870 --> 00:01:08,640
in order to allow them
to read from the file.

32
00:01:08,640 --> 00:01:12,500
600 here just specifies
re-permissions.

33
00:01:12,500 --> 00:01:15,890
So actually enabling key file
authentication here implicitly

34
00:01:15,890 --> 00:01:17,600
enables the client
authentication

35
00:01:17,600 --> 00:01:19,705
that we enabled in
the previous line,

36
00:01:19,705 --> 00:01:21,830
but I'm going to leave both
here for the time being

37
00:01:21,830 --> 00:01:22,760
just for clarity.

38
00:01:22,760 --> 00:01:24,440
This is a reminder
that in addition

39
00:01:24,440 --> 00:01:26,580
to authenticating
with the client,

40
00:01:26,580 --> 00:01:29,909
our nodes are also
authenticating to each other.

41
00:01:29,909 --> 00:01:31,450
So this is the last
line that we have

42
00:01:31,450 --> 00:01:35,080
to add to our configuration file
in order to enable replication

43
00:01:35,080 --> 00:01:35,962
on this node.

44
00:01:35,962 --> 00:01:37,420
And all it does is
specify the name

45
00:01:37,420 --> 00:01:41,180
of the replica set that this
node is going to be a part of.

46
00:01:41,180 --> 00:01:43,540
Now all we need to do
is create the DB path

47
00:01:43,540 --> 00:01:45,590
that we named up here.

48
00:01:45,590 --> 00:01:48,700
And we can actually use
this file to start a mongod.

49
00:01:48,700 --> 00:01:51,240
So here I'm just
creating my DB path,

50
00:01:51,240 --> 00:01:54,990
and now I can start the mongod
using our configuration file.

51
00:01:54,990 --> 00:01:57,430
And we have successfully
started our first node.

52
00:01:57,430 --> 00:01:59,530
So right now we have
one node and we just

53
00:01:59,530 --> 00:02:01,700
have two more to go.

54
00:02:01,700 --> 00:02:03,610
So this command is
just copying the file

55
00:02:03,610 --> 00:02:06,595
that we just made into a
new file called node2.conf

56
00:02:06,595 --> 00:02:08,470
because the other two
nodes are going to have

57
00:02:08,470 --> 00:02:10,690
very similar configurations.

58
00:02:10,690 --> 00:02:13,570
We can basically copy this
one, change three lines,

59
00:02:13,570 --> 00:02:15,340
and launch a brand new node.

60
00:02:15,340 --> 00:02:17,980
Never underestimate the
power of copy and paste.

61
00:02:17,980 --> 00:02:20,230
I'm just going to do the
same thing for our third node

62
00:02:20,230 --> 00:02:23,789
here, and then edit
our second one.

63
00:02:23,789 --> 00:02:26,080
So the three things that we
need to change in this file

64
00:02:26,080 --> 00:02:30,580
are the DB path, the port
number, and the log path.

65
00:02:30,580 --> 00:02:34,190
Once we do that, we're actually
good to start a new node.

66
00:02:34,190 --> 00:02:37,270
So here I've just created
the path for node 2

67
00:02:37,270 --> 00:02:40,880
and I'm starting
it up with mongod.

68
00:02:40,880 --> 00:02:42,740
And we now have two
nodes in our set.

69
00:02:42,740 --> 00:02:45,530
I'm just going to do the same
thing for our third config

70
00:02:45,530 --> 00:02:48,690
file, and notice that all
three nodes in the replica

71
00:02:48,690 --> 00:02:50,930
set reference the same key file.

72
00:02:50,930 --> 00:02:53,090
Typically these
mongod instances would

73
00:02:53,090 --> 00:02:54,710
be running on
different machines,

74
00:02:54,710 --> 00:02:56,819
but because they're running
on the same machine,

75
00:02:56,819 --> 00:02:58,860
they're all just going to
share the same key file

76
00:02:58,860 --> 00:03:01,300
and use the same one to
authenticate with one another.

77
00:03:01,300 --> 00:03:03,050
Typically this key
file would be copied on

78
00:03:03,050 --> 00:03:05,630
to each machine where
each mongod was running.

79
00:03:05,630 --> 00:03:08,930
So at this point we started
three mongod processes

80
00:03:08,930 --> 00:03:11,270
that will eventually
make up a replica set.

81
00:03:11,270 --> 00:03:13,530
But right now, they
can't replicate data.

82
00:03:13,530 --> 00:03:15,020
And in fact, they
have no knowledge

83
00:03:15,020 --> 00:03:16,640
that other nodes are out there.

84
00:03:16,640 --> 00:03:19,280
They're blind to the
world around them.

85
00:03:19,280 --> 00:03:22,010
We need to enable
communication between the nodes

86
00:03:22,010 --> 00:03:24,110
so they can stay in sync.

87
00:03:24,110 --> 00:03:27,230
So I'm just going to
connect to node one here.

88
00:03:27,230 --> 00:03:29,270
So I use this
command rs.initiate

89
00:03:29,270 --> 00:03:30,980
to initiate the replica set.

90
00:03:30,980 --> 00:03:33,350
And we actually need to
run it on one of the nodes.

91
00:03:33,350 --> 00:03:35,210
Because we ran it
here, we just have

92
00:03:35,210 --> 00:03:37,960
to add the other two
nodes from this node.

93
00:03:37,960 --> 00:03:41,000
However, we have client
authentication enabled,

94
00:03:41,000 --> 00:03:43,130
so we can't actually add
other nodes to the set

95
00:03:43,130 --> 00:03:47,090
until we create a user and
then connect as that user.

96
00:03:47,090 --> 00:03:50,960
All right, so this command
created our m103 super user,

97
00:03:50,960 --> 00:03:54,740
called m103-admin, that has
root access and authenticates

98
00:03:54,740 --> 00:03:56,696
against the admin database.

99
00:03:56,696 --> 00:03:58,570
Now I'm just going to
exit out of this mongod

100
00:03:58,570 --> 00:04:01,220
and then log back
in as that user.

101
00:04:01,220 --> 00:04:03,415


102
00:04:03,415 --> 00:04:04,790
So this is the
command that we're

103
00:04:04,790 --> 00:04:07,160
going to use to connect
to the replica set.

104
00:04:07,160 --> 00:04:08,940
And in addition to
authenticating here

105
00:04:08,940 --> 00:04:10,490
with a username
password, we have

106
00:04:10,490 --> 00:04:14,250
to specify the name of the
replica set in the host name.

107
00:04:14,250 --> 00:04:16,579
This will tell the mongo
shell to connect directly

108
00:04:16,579 --> 00:04:18,860
to the replica set,
instead of just this one

109
00:04:18,860 --> 00:04:20,129
node that we specify.

110
00:04:20,129 --> 00:04:21,670
What the shell is
going to do is it's

111
00:04:21,670 --> 00:04:23,510
going to use this
node to discover what

112
00:04:23,510 --> 00:04:25,790
the current primary
is of the replica set

113
00:04:25,790 --> 00:04:29,220
and then connect to
that node instead.

114
00:04:29,220 --> 00:04:31,940
In this case, obviously there's
only one node in the set

115
00:04:31,940 --> 00:04:33,720
and that node is the primary.

116
00:04:33,720 --> 00:04:36,360
So that's the one that
the shell connected us to.

117
00:04:36,360 --> 00:04:38,960
So this command,
rs.status is a useful way

118
00:04:38,960 --> 00:04:41,960
to get a status report
on our replica set.

119
00:04:41,960 --> 00:04:44,110
See, it gives us
the name of the set.

120
00:04:44,110 --> 00:04:45,560
It gives us how
long the intervals

121
00:04:45,560 --> 00:04:47,540
are between heartbeats.

122
00:04:47,540 --> 00:04:50,250
By default, it's
2000 milliseconds,

123
00:04:50,250 --> 00:04:52,670
which means the nodes are
talking to each other every two

124
00:04:52,670 --> 00:04:53,840
seconds.

125
00:04:53,840 --> 00:04:57,440
We can scroll down to get a
list of the members in the set.

126
00:04:57,440 --> 00:04:59,540
In this case, it's
just one member,

127
00:04:59,540 --> 00:05:01,250
which is the one that
we're connected to,

128
00:05:01,250 --> 00:05:03,380
the current primary.

129
00:05:03,380 --> 00:05:05,690
So this is the
command we use to add

130
00:05:05,690 --> 00:05:09,070
new nodes to our
replica set, rs.add,

131
00:05:09,070 --> 00:05:10,640
and all we have
to specify here is

132
00:05:10,640 --> 00:05:12,360
the host name, which
is just the host

133
00:05:12,360 --> 00:05:14,690
name of the vagrant
box and the port

134
00:05:14,690 --> 00:05:17,034
that that node is running on.

135
00:05:17,034 --> 00:05:17,700
Now that worked.

136
00:05:17,700 --> 00:05:20,980
I'm just going to do the
same for our third node.

137
00:05:20,980 --> 00:05:24,560
I'm just going to
check rs.isMaster.

138
00:05:24,560 --> 00:05:29,300
And we can see that our replica
set now has three nodes in it.

139
00:05:29,300 --> 00:05:32,270
So now that we've added those
two nodes to our replica set

140
00:05:32,270 --> 00:05:34,940
and connected them, they
can replicate data from one

141
00:05:34,940 --> 00:05:36,260
another.

142
00:05:36,260 --> 00:05:37,970
One thing I want to
point out right now

143
00:05:37,970 --> 00:05:42,050
is that the current primary
is running on port 27011.

144
00:05:42,050 --> 00:05:45,620
And we could verify that from
the output of rs.isMaster,

145
00:05:45,620 --> 00:05:50,190
where it says primary is in
fact the node running on 27011.

146
00:05:50,190 --> 00:05:53,330
However, we can
force an election

147
00:05:53,330 --> 00:05:55,340
so that a different
note becomes primary.

148
00:05:55,340 --> 00:05:59,060
And the command we use to do
that is called rs.stepDown.

149
00:05:59,060 --> 00:06:01,700
Now the step down
command is what

150
00:06:01,700 --> 00:06:04,740
we use to safely step down the
current primary to a secondary

151
00:06:04,740 --> 00:06:06,950
and force an election
to take place.

152
00:06:06,950 --> 00:06:08,630
The error that
we're getting here

153
00:06:08,630 --> 00:06:11,357
is because the shell is trying
to connect us to the primary,

154
00:06:11,357 --> 00:06:13,190
but the secondaries are
still in the process

155
00:06:13,190 --> 00:06:16,160
of electing a primary, so
there is no primary right now.

156
00:06:16,160 --> 00:06:18,170
As soon as one is
elected, the shell

157
00:06:18,170 --> 00:06:20,720
will connect us to
it, which it just did.

158
00:06:20,720 --> 00:06:23,630
If we run rs.isMaster
again, we can

159
00:06:23,630 --> 00:06:28,010
verify that now this node is
the current primary, as opposed

160
00:06:28,010 --> 00:06:31,680
to 27011, which was
the primary before.

161
00:06:31,680 --> 00:06:35,340
So just to recap, we've covered
how to initiate a replica set,

162
00:06:35,340 --> 00:06:38,180
how you can add nodes
to the replica set,

163
00:06:38,180 --> 00:06:41,310
and how to check the
status of the replica set.

164
00:06:41,310 --> 00:06:45,780
We used rs.status and
rs.isMaster in this lesson,

165
00:06:45,780 --> 00:06:47,540
and those commands
have different outputs

166
00:06:47,540 --> 00:06:48,660
for different use cases.

167
00:06:48,660 --> 00:06:50,840
And I would urge you to
explore those to figure out

168
00:06:50,840 --> 00:00:00,000
which one fits your use case.

