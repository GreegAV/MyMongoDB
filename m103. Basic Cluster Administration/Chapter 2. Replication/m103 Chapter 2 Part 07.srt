1
00:00:00,000 --> 00:00:00,529


2
00:00:00,529 --> 00:00:02,070
All right, so until
this point, we've

3
00:00:02,070 --> 00:00:04,230
covered basic replication
concepts and how

4
00:00:04,230 --> 00:00:05,564
to deploy a replica set.

5
00:00:05,564 --> 00:00:07,230
But in this lesson,
we're going to cover

6
00:00:07,230 --> 00:00:10,900
how to reconfigure a replica
set while it's still running.

7
00:00:10,900 --> 00:00:13,410
So let's say our replica
set containing our data

8
00:00:13,410 --> 00:00:16,680
is up and running with a
primary and two secondary nodes.

9
00:00:16,680 --> 00:00:19,530
Our supervisor tells us he
wants to add two more nodes, one

10
00:00:19,530 --> 00:00:22,336
secondary and one arbiter.

11
00:00:22,336 --> 00:00:24,460
This is going to be the
typology of our replica set

12
00:00:24,460 --> 00:00:26,360
once we've added our two nodes.

13
00:00:26,360 --> 00:00:28,830
And our supervisor wanted to
add a secondary and an arbiter

14
00:00:28,830 --> 00:00:31,440
instead of just two secondaries,
because an arbiter is a much

15
00:00:31,440 --> 00:00:33,354
cheaper node to maintain.

16
00:00:33,354 --> 00:00:35,520
It doesn't need to copy or
replicate all of the data

17
00:00:35,520 --> 00:00:37,980
from the primary, but
it still provides us

18
00:00:37,980 --> 00:00:41,100
with an odd number of
voting numbers in the set.

19
00:00:41,100 --> 00:00:43,080
So here I'm connected
to our replica set,

20
00:00:43,080 --> 00:00:45,030
and I'm just going
to rs.isMaster to see

21
00:00:45,030 --> 00:00:46,425
that typology really quickly.

22
00:00:46,425 --> 00:00:48,300
And we can see that our
replica set currently

23
00:00:48,300 --> 00:00:50,170
has three nodes in it.

24
00:00:50,170 --> 00:00:53,010
So here I'm just going to launch
a mongod using a configuration

25
00:00:53,010 --> 00:00:54,870
file for our fourth node.

26
00:00:54,870 --> 00:00:57,150
And the config files for the
arbiter and the secondary

27
00:00:57,150 --> 00:00:59,470
are going to be very similar to
the ones for our other nodes.

28
00:00:59,470 --> 00:01:01,170
So I'm not going to
go over them here,

29
00:01:01,170 --> 00:01:05,690
but you can find them attached
to the lecture as handouts.

30
00:01:05,690 --> 00:01:08,310
So once we've started our
node4, we can start our arbiter.

31
00:01:08,310 --> 00:01:11,100


32
00:01:11,100 --> 00:01:13,100
And we now have the
two nodes we need.

33
00:01:13,100 --> 00:01:15,430
And we just have to
add them to the set.

34
00:01:15,430 --> 00:01:18,802
So here we're just adding
the fourth node to our set.

35
00:01:18,802 --> 00:01:20,260
So here when we
add our arbiter, we

36
00:01:20,260 --> 00:01:23,030
use a special command
called addArb.

37
00:01:23,030 --> 00:01:24,460
And it looks like
this completed.

38
00:01:24,460 --> 00:01:26,110
And I'm just going
to check rs.isMaster

39
00:01:26,110 --> 00:01:28,626
to make sure of that.

40
00:01:28,626 --> 00:01:30,250
And we can see that
our replica set now

41
00:01:30,250 --> 00:01:33,360
has four nodes in
it and one arbiter.

42
00:01:33,360 --> 00:01:34,770
So now our replica
set is running

43
00:01:34,770 --> 00:01:37,560
with one primary, three
secondaries, and an arbiter

44
00:01:37,560 --> 00:01:38,354
node.

45
00:01:38,354 --> 00:01:40,020
But our head of
engineering just told us

46
00:01:40,020 --> 00:01:41,811
we have to kill the
arbiter node because we

47
00:01:41,811 --> 00:01:43,627
don't have the budget for it.

48
00:01:43,627 --> 00:01:45,210
So here to the remove
command, we just

49
00:01:45,210 --> 00:01:48,300
pass the port where our
arbiter was running.

50
00:01:48,300 --> 00:01:50,100
And we've successfully
removed it.

51
00:01:50,100 --> 00:01:53,910
However, right now our replica
is set only has four members.

52
00:01:53,910 --> 00:01:56,440
We can verify that
from rs.isMaster.

53
00:01:56,440 --> 00:01:59,400
Our list of hosts only
has four nodes in it.

54
00:01:59,400 --> 00:02:00,870
So in order to
remedy this problem

55
00:02:00,870 --> 00:02:03,600
of having an even number of
voting members in the set,

56
00:02:03,600 --> 00:02:05,997
we don't have to remove
our secondary entirely.

57
00:02:05,997 --> 00:02:07,830
We just have to revoke
its voting privileges

58
00:02:07,830 --> 00:02:10,919
so that will leave us
with three voting members.

59
00:02:10,919 --> 00:02:12,690
Our head of engineering
has also been

60
00:02:12,690 --> 00:02:15,240
talking about using a hidden
node to store backups.

61
00:02:15,240 --> 00:02:17,650
So we decide to be
a little clever.

62
00:02:17,650 --> 00:02:20,130
In addition to being
nonvoting, this secondary

63
00:02:20,130 --> 00:02:23,054
is also going to
be a hidden node.

64
00:02:23,054 --> 00:02:24,720
So we can actually
reconfigure this node

65
00:02:24,720 --> 00:02:26,940
to be hidden and
nonvoting without removing

66
00:02:26,940 --> 00:02:29,070
it or restarting the node.

67
00:02:29,070 --> 00:02:33,330
We use our rs.conf to retrieve
a replica set configuration.

68
00:02:33,330 --> 00:02:35,190
So this gives us a
complete configuration

69
00:02:35,190 --> 00:02:37,410
of the replica set,
including the host name

70
00:02:37,410 --> 00:02:40,740
and port of each node, as
well as if the node is hidden

71
00:02:40,740 --> 00:02:42,360
or an arbiter.

72
00:02:42,360 --> 00:02:45,961
It also gives us the number
of votes that each node has.

73
00:02:45,961 --> 00:02:48,210
So here I'm just storing the
configuration for the set

74
00:02:48,210 --> 00:02:51,150
in a variable called cfg.

75
00:02:51,150 --> 00:02:55,020
So members here is a section
of the config that has

76
00:02:55,020 --> 00:02:56,970
a list of the nodes in the set.

77
00:02:56,970 --> 00:03:00,630
And I've chosen the node at
index position 3 in that list.

78
00:03:00,630 --> 00:03:03,087
And I've changed the number
of votes it has to 0.

79
00:03:03,087 --> 00:03:04,920
This is going to leave
us with an odd number

80
00:03:04,920 --> 00:03:07,140
of voting members in the set.

81
00:03:07,140 --> 00:03:10,000
And here I'm setting the
hidden variable of that node

82
00:03:10,000 --> 00:03:14,040
to true to hide this note
from any client applications.

83
00:03:14,040 --> 00:03:16,140
And hidden nodes can
never become primary,

84
00:03:16,140 --> 00:03:18,130
so in order to make
this a hidden node,

85
00:03:18,130 --> 00:03:21,150
we have to set
the priority to 0.

86
00:03:21,150 --> 00:03:23,970
So this is a new
command, rs.reconfig,

87
00:03:23,970 --> 00:03:27,010
that we use to reconfigure
a running replica set.

88
00:03:27,010 --> 00:03:30,050
We pass in our updated
configuration as an argument,

89
00:03:30,050 --> 00:03:32,640
and we need to specify
this whole document.

90
00:03:32,640 --> 00:03:35,460
That's why we took a copy of
the original configuration

91
00:03:35,460 --> 00:03:37,710
and then modified
it as we needed.

92
00:03:37,710 --> 00:03:40,230
Bear in mind that reconfig
might trigger an election

93
00:03:40,230 --> 00:03:43,290
depending on what's in
the new configuration.

94
00:03:43,290 --> 00:03:44,657
And it looked like this worked.

95
00:03:44,657 --> 00:03:46,990
I'm just going to verify that
it worked with the rs.conf

96
00:03:46,990 --> 00:03:50,780
to get the current configuration
of the replica set.

97
00:03:50,780 --> 00:03:55,320
And it looks like this node now
has priority 0, it can't vote,

98
00:03:55,320 --> 00:03:57,050
and it's hidden.

99
00:03:57,050 --> 00:03:59,190
So now our replica set
still has four nodes in it,

100
00:03:59,190 --> 00:04:02,040
which is an even number, but
only an odd number of them

101
00:04:02,040 --> 00:04:03,850
can vote.

102
00:04:03,850 --> 00:04:05,830
So just to recap,
in this lesson we

103
00:04:05,830 --> 00:04:08,414
covered how to add arbiters
and new secondaries,

104
00:04:08,414 --> 00:04:10,080
we said a little bit
about hidden nodes,

105
00:04:10,080 --> 00:04:11,964
and we added one to our set.

106
00:04:11,964 --> 00:04:14,130
And we also covered how to
reconfigure a replica set

107
00:04:14,130 --> 00:00:00,000
while it's still running.

