All right so in this lesson, we're going to discuss the database profiler, and how it can be used in conjunction with the database locks.

Servers generate a really large number of events.

And a log file is great for capturing this data, or subsets of this data.

But the purpose of these logs is to report on the health of the database, as a whole.

The logs do store some data on our commands, but there's not enough data in here to start optimizing our queries.

The lines won't contain any execution stats, the direction of an index used by a query, rejected plans, or anything.

And even if we could place that information in the logs, we really shouldn't.

The log files are meant to give administrators operational information about an instance or process, so they can flag any errors, warnings, or interesting informational messages.

For debugging slow operations, we need to be a bit more precise in the information we capture.

So for that, we rely on the database profiler.

We enable profilers at the database level.

So the operations on each database are profiled separately.

When it's enabled, the profile will restore data for all operations on a given database, and a new collection called system dot profile.

This collection will hold profiling data on CRUD operations, as well as administrative and configuration options.

It has three settings.

The default value is zero, which just means that the profiler's turned off.

One means the profiler is on, but it's only going to profile operations that are considered slow.

By default, MongoDB will consider any operation that takes longer than 100 milliseconds to be slow.

But we can also define what a slow query is by setting the slow MS value, as we'll see in a minute.

Two means that the profiler's on, and will profile all operations on a database, regardless of how long they take.

This is a bit dangerous because it can result in a lot of rights to the system dot profile collection, and generate a lot of load on the system.

This doesn't mean small operations can't be blocking other ones, but getting data on those operations requires more granularity.

All right, so now let's take a look at the profiler.

This database doesn't actually exist yet, so the profiler by default is set to level 0.

And we can verify that by running db.getprofilinglevel.

And as you can see, it gives us a zero.

We can change that to a one with db.setprofilinglevel.

So this statement turned on the profiler, profiling level 1.

If we run this command, we can see that MongoDB created a new collection called system dot profile.

But there's nothing in it right now.

And because we haven't specified a slow MS, the profiler will only store data on queries that take longer than 100 milliseconds.

All right so here, just to get a sense of how the profiler works and what the profiling data looks like, I'm just going to set slow MS to zero, so that everything gets profiled in this database.

So I'm just going to insert a small document here into this new collection, called new collection.

So now I'm just going to look at what's in the system dot profile collection right now, after we'd run that query, and I'm going to make the output a little prettier so it's more readable.

All right, so we can see our rights statement is recorded in the profiler.

It gives us the number of documents inserted, and inserted, and the number of index keys inserted by the operation, keys inserted, as well as how long the operation took in milliseconds.

So we can also profile read operations.

Here, we have a really simple query predicate, where we're only looking for documents where A is one.

And we can see the profiler recorded a little more information about this query.

It tells us that we exhausted the cursor that we were using to retrieve this data, and it also has some execution stats, like the status that we went through to get here.

In this case, it was just a collection scan.

All right, so just to recap, we've covered the difference between log data and profile data, how to configure the profiler on your database, and how to interpret the output from the profiler depending on the operation.