In this lesson, we will cover the file structure of a MongoDB standalone server.

This is a list of the files you can expect to find in a data directory of a MongoDB server or standalone process.

You typically never need to interact with the files in this data folder unless directed to by MongoDB support personnel or through a procedure detailed in our documentation.

None of these files are designed for user access or modification, and modifying them can cause crashes or data loss.

If you want to explore, please take time to make sure you are performing read functions only.

Let's take a look at a real MongoDB deployment.

This group of files here is related to how the WiredTiger storage engine keeps track of information like cluster metadata and WiredTiger-specific configuration options.

The WiredTiger.lock file acts as a safety.

If you ran a second simultaneous MongoDB process and pointed at this folder, the lock file helps prevent that second MongoDB process from starting up.

If you experience an unclean shutdown such, as the host machine losing power or a crash of some sort, you may find that you cannot start up the MongoD due to this lock file.

You may be instructed to delete lock files before restarting the MongoD.

Remember that if you are not guided by MongoDB support or a documented procedure, do not interact with any of these files.

This next group of files ending in .wt are related to collection and index the data itself.

These are your collection data, and these are your index data.

MongoDB WiredTiger stores index data as a separate structure from collection data.

Each collection an index gets its own file.

Even in a brand new MongoDB deployment, you typically have a few databases and collections by default, so you should always see some collection in index .wt files.

You can try to introspect these data files using a program like Strings, but there's not much human readable data here.

These files are designed to be interacted with through the MongoDB server process, rather than a third party tool.

Modifying these tools can lead to data loss and crashes.

Now this diagnostic.data folder looks pretty interesting.

Let's take a quick look.

This data contains diagnostic data captured for specific use by MongoDB support.

To be very clear, we are not capturing any of your actual private data.

The diagnostic data is captured by our Full Time Data Capture, or FTDC module.

FTDC collects data from the following commands.

If you try to take a look at the data produced by the FTDC module using something like Strings, you'll find that it's not human readable.

This data is only used for diagnostic purposes by MongoDB support engineers.

And they can only look at that data if you explicitly provide it.

Moving forward, let's take a look at our journal files.

Each of these journal files are part of the WiredTiger journaling system.

Let's talk about that just briefly.

With MongoDB WiredTiger, write operations are buffered in memory and are flushed every 60 seconds, creating a checkpoint of data.

WiredTiger also uses a write ahead logging system to an on disk journal file.

Journal entries are first buffered in memory, and then WiredTiger syncs the journal to disk every 50 milliseconds.

Each journal file is limited to 100 megabytes of size.

WiredTiger uses a file rotation method for syncing data to disk.

In the event of a failure, WiredTiger can use the journal to recover data that occurred between checkpoints.

For example, during normal operations, WiredTiger flushes data to disk every 60 seconds, or when the journal file has 2 gigabytes of data.

These flushes again create a durable checkpoint.

If the MongoD crashes between checkpoints, there is a possibility that data was not safely and fully written.

When the MongoDB gets back online, WiredTiger can check if there is any recovery to be made.

In case that there are some incomplete writes, WiredTiger looks at the existing data files to find the identifier of the last checkpoint.

It then searches the journal files for the record that matches the identifier of the last checkpoint.

Finally, it applies operations in the journal files since the last checkpoint.

At the end, the MongoDB server can resume normal execution.

Let's take a look at the last group of files.

The mongod.lock file has a similar function to the WiredTiger.lock file.

If this file is not empty, it means that a MongoDB process is currently active in this directory.

Any other MongoDB process attempting to access this directory will fail to startup in that event.

If this file is empty, then everything is clear.

In some unusual situations, like an unclean shutdown, the mongod.lock file won't be empty, even though the MongoD is no longer running.

You may need to delete the mongod.lock file if directed to by support or our documentation.

These remaining two files are more support and metadata files for WiredTiger.

Remember, you should never need to interact with any of these files and modifying them may result in crashes or data loss.

In addition to the files held here in the data directory, there is also the log file.

We're going to be going over logging in more detail in the later lesson.

But just to give you a quick look, you can see in my log, there's not a whole lot of information in here right now.

That's because I'm not really doing anything with my server.

As you use your MongoDB server, the log file will fill with additional information.

These log files are vital for post failure diagnostics and should be treated with care as well.

It's up to you if you want to place your log files in the same directory as your data files.

It's not a bad idea to keep them separate though.

There's one more file that we should talk about, but it's in neither of the two directories we've talked about so far.

This mongodb-27017.sock file is a socket file used by MongoDB to create a socket connection at the specified port.

MongoDB needs to use sockets for interprocess communications.

Without this file, the MongoDB cannot function.

This file is created at startup and lets the MongoDB server own this port.

If there is a crash or other unclean shutdown, you might find an error on startup related to this file.

You can safely delete it if directed to by support or our documentation in that event.

Let's recap.

Some files, such as diagnostic.data and your log files, are used by MongoDB support for helping you resolve problems with your database.

The rest are exclusively used by the MongoDB server process for normal operations and should not be modified without specific direction from MongoDB support.

Defer to the MongoDB support or our documentation for instructions on interacting with any of these files.