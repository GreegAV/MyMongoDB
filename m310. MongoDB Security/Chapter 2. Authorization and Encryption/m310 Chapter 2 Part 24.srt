
1
00:00:00.000 --> 00:00:00.500


2
00:00:00.500 --> 00:00:02.690
Now that we've covered
transfer encryption,

3
00:00:02.690 --> 00:00:05.390
we can talk about encryption
at rest, also known

4
00:00:05.390 --> 00:00:08.060
as data at rest.

5
00:00:08.060 --> 00:00:10.610
Encryption at rest concerns
encrypting the data

6
00:00:10.610 --> 00:00:12.560
that we store on disk.

7
00:00:12.560 --> 00:00:15.530
Like I've said before, there
are two broad approaches

8
00:00:15.530 --> 00:00:18.270
to encrypting data
at rest with MongoDB.

9
00:00:18.270 --> 00:00:21.110
There's storage level
encryption and application level

10
00:00:21.110 --> 00:00:22.730
encryption.

11
00:00:22.730 --> 00:00:25.130
Let's first talk about
application level encryption,

12
00:00:25.130 --> 00:00:28.310
because it's not an
actual feature of MongoDB.

13
00:00:28.310 --> 00:00:30.320
By application level
encryption, I'm

14
00:00:30.320 --> 00:00:34.730
referring to encryption on a
per field or per document basis

15
00:00:34.730 --> 00:00:36.530
within the application layer.

16
00:00:36.530 --> 00:00:40.610
To encrypt a document
or field within our data

17
00:00:40.610 --> 00:00:42.800
we can write a custom
encryption and decryption

18
00:00:42.800 --> 00:00:46.220
routine for our
application, or of course we

19
00:00:46.220 --> 00:00:48.740
can use a commercial
solution for encryption

20
00:00:48.740 --> 00:00:50.900
within our application.

21
00:00:50.900 --> 00:00:53.450
A great example of
application level encryption

22
00:00:53.450 --> 00:00:55.730
is the storage of extremely
sensitive information

23
00:00:55.730 --> 00:00:57.540
like health records.

24
00:00:57.540 --> 00:01:00.710
A developer can add logic
to the application, where

25
00:01:00.710 --> 00:01:03.920
before any information is
inserted into a collection it

26
00:01:03.920 --> 00:01:06.440
first passes through an
encryption algorithm converting

27
00:01:06.440 --> 00:01:08.480
the plain text--
like here I have

28
00:01:08.480 --> 00:01:12.380
a health record that says you
know Kirby has appendicitis.

29
00:01:12.380 --> 00:01:15.160
We can, before we ever
pass that to the driver

30
00:01:15.160 --> 00:01:18.020
to insert it into MongoDB,
inside of out application

31
00:01:18.020 --> 00:01:21.020
we can go ahead and encrypt
that information using

32
00:01:21.020 --> 00:01:23.510
some kind of
encryption algorithm.

33
00:01:23.510 --> 00:01:25.940
And then, we can then
pass that to the driver

34
00:01:25.940 --> 00:01:28.610
and then insert that
information in MongoDB.

35
00:01:28.610 --> 00:01:31.640
So MongoDB never saw that
information in plain text,

36
00:01:31.640 --> 00:01:35.120
it always saw the
encrypted ciphertext.

37
00:01:35.120 --> 00:01:38.660
And then of course, we then
would write decryption routines

38
00:01:38.660 --> 00:01:41.524
so that when we pull
out the encrypted text

39
00:01:41.524 --> 00:01:43.190
we would then convert
the encrypted text

40
00:01:43.190 --> 00:01:46.730
into a decrypted text within
our application layer.

41
00:01:46.730 --> 00:01:49.340
As of MongoDB
Enterprise 3.2, we've

42
00:01:49.340 --> 00:01:52.670
introduced a native encryption
option for the WiredTiger

43
00:01:52.670 --> 00:01:54.620
storage engine.

44
00:01:54.620 --> 00:01:57.990
This feature allows MongoDB
to encrypt data files such

45
00:01:57.990 --> 00:02:00.710
that only parties with
the decryption key

46
00:02:00.710 --> 00:02:02.510
can decode and read the data.

47
00:02:02.510 --> 00:02:04.970
Again, I like to emphasize
that this feature is

48
00:02:04.970 --> 00:02:08.419
only available for Enterprise
versions of MongoDB 3.2,

49
00:02:08.419 --> 00:02:11.510
and only exist for the
WiredTiger storage engine.

50
00:02:11.510 --> 00:02:13.970
But basically, what
you can see here

51
00:02:13.970 --> 00:02:18.200
is that our data lives in
RAM as unencrypted text.

52
00:02:18.200 --> 00:02:20.600
And then whenever
MongoDB decides

53
00:02:20.600 --> 00:02:22.940
to write that
information to disk

54
00:02:22.940 --> 00:02:26.180
it will then encrypt
the information in RAM

55
00:02:26.180 --> 00:02:29.420
and then store that encrypted
information in disk.

56
00:02:29.420 --> 00:02:33.590
Storage engine encryption with
MongoDB is a four step process.

57
00:02:33.590 --> 00:02:35.810
All the steps are
abstracted away from you

58
00:02:35.810 --> 00:02:37.590
as a database
administrator, but are

59
00:02:37.590 --> 00:02:39.140
important to
understand to deliver

60
00:02:39.140 --> 00:02:40.800
a secure implementation.

61
00:02:40.800 --> 00:02:43.580
First, a master
key is generated.

62
00:02:43.580 --> 00:02:48.080
This key will be used to encrypt
each individual database key.

63
00:02:48.080 --> 00:02:50.900
The second step, like I
mentioned in the last step,

64
00:02:50.900 --> 00:02:54.860
is to generate a key
for each database.

65
00:02:54.860 --> 00:02:57.800
After a key has been generated
for a particular database,

66
00:02:57.800 --> 00:03:01.550
that key can be used to
encrypt that actual database.

67
00:03:01.550 --> 00:03:03.260
After all databases
have been encrypted

68
00:03:03.260 --> 00:03:05.390
with their respective
keys, each key

69
00:03:05.390 --> 00:03:07.250
is then encrypted
with the master key

70
00:03:07.250 --> 00:03:09.290
that we got from step 1.

71
00:03:09.290 --> 00:03:12.560
It's important to note that
each database key is actually

72
00:03:12.560 --> 00:03:16.850
stored within MongoDB, which
is why the master key exists

73
00:03:16.850 --> 00:03:18.830
outside of MongoDB.

74
00:03:18.830 --> 00:03:21.170
Only the master key is
external to the server

75
00:03:21.170 --> 00:03:23.450
and requires
external management.

76
00:03:23.450 --> 00:03:26.100
To manage the master key,
MongoDB's encrypted storage

77
00:03:26.100 --> 00:03:29.520
engine supports two
key management options.

78
00:03:29.520 --> 00:03:32.000
The first and recommend
option is an integration

79
00:03:32.000 --> 00:03:34.850
with a third party key
management appliance

80
00:03:34.850 --> 00:03:39.020
via the Key Management
Interoperability Protocol,

81
00:03:39.020 --> 00:03:41.870
commonly referred to as KMIP.

82
00:03:41.870 --> 00:03:44.810
Your other option is to
use local key management

83
00:03:44.810 --> 00:03:46.340
via a key file.

84
00:03:46.340 --> 00:03:49.540
We do not recommend local
key file management.

85
00:03:49.540 --> 00:03:51.800
enabling the encrypted
storage engine

86
00:03:51.800 --> 00:03:54.440
is relatively
straightforward in practice.

87
00:03:54.440 --> 00:03:55.940
For the sake of
simplicity, we're

88
00:03:55.940 --> 00:03:57.950
going to start with
the not recommended

89
00:03:57.950 --> 00:04:02.090
option of using local key
management via a key file.

90
00:04:02.090 --> 00:04:04.160
We'll first need to
generate a master key

91
00:04:04.160 --> 00:04:06.170
and place it in a key file.

92
00:04:06.170 --> 00:04:11.450
Here I'm using open SSL
passing in Rand base64

93
00:04:11.450 --> 00:04:13.280
giving it a length
of 32 and then

94
00:04:13.280 --> 00:04:16.680
redirecting that output to a
file called MongoDB-keyfile.

95
00:04:16.680 --> 00:04:18.620
This will generate
a random assortment

96
00:04:18.620 --> 00:04:21.429
of base 64 characters
to act as our key file.

97
00:04:21.429 --> 00:04:23.720
Now that that key file has
been created, let's go ahead

98
00:04:23.720 --> 00:04:25.700
and put the correct
permissions on the file

99
00:04:25.700 --> 00:04:27.740
so that MongoDB
can read from it.

100
00:04:27.740 --> 00:04:31.910
Here I'm saying chmod
600 and our file,

101
00:04:31.910 --> 00:04:33.890
and we now have good
permissions for MongoDB

102
00:04:33.890 --> 00:04:36.057
to read our key file.

103
00:04:36.057 --> 00:04:37.640
And from here it's
as easy as starting

104
00:04:37.640 --> 00:04:41.210
mongod with our storage
engine encryption enabled.

105
00:04:41.210 --> 00:04:44.240
After creating our key file and
putting the correct permissions

106
00:04:44.240 --> 00:04:47.420
on it, starting a mongod
instance with storage engine

107
00:04:47.420 --> 00:04:50.950
encryption enabled is as
easy as passing the dash dash

108
00:04:50.950 --> 00:04:53.750
encryption option and
a dash dash encryption

109
00:04:53.750 --> 00:04:56.852
key file option with a
MongoDB key file argument.

110
00:04:56.852 --> 00:04:58.890
And it really is that simple.

111
00:04:58.890 --> 00:05:02.830
Now our server is waiting for
connections on port 27 0 17.