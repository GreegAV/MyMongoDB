
1
00:00:00.000 --> 00:00:00.600


2
00:00:00.600 --> 00:00:03.840
In this video we're going to
talk about what privileges

3
00:00:03.840 --> 00:00:06.440
look like in MongoDB.

4
00:00:06.440 --> 00:00:09.410
We've already talked
about the set of actions

5
00:00:09.410 --> 00:00:11.330
that a user can perform.

6
00:00:11.330 --> 00:00:13.890
And we've also talked
about the resources

7
00:00:13.890 --> 00:00:16.309
that those actions
can operate on.

8
00:00:16.309 --> 00:00:18.190
We're finally in
a place where we

9
00:00:18.190 --> 00:00:22.740
can look at what privileges
look like in MongoDB.

10
00:00:22.740 --> 00:00:26.890
Privileges are defined by
using a privileged document.

11
00:00:26.890 --> 00:00:30.790
In this document,
we define a resource

12
00:00:30.790 --> 00:00:35.700
and the actions that are able
to operate on that resource.

13
00:00:35.700 --> 00:00:38.600
The easiest way to understand
how privileged documents can

14
00:00:38.600 --> 00:00:43.990
be used is to see how they are
used to define a built-in role.

15
00:00:43.990 --> 00:00:46.220
Right now I'm in
the Mongo shell.

16
00:00:46.220 --> 00:00:48.340
And I'm connected to a MongoD.

17
00:00:48.340 --> 00:00:50.480
From here we can
go ahead and look

18
00:00:50.480 --> 00:00:53.170
at how built-in
roles are defined

19
00:00:53.170 --> 00:00:55.130
by privileged documents.

20
00:00:55.130 --> 00:00:57.300
Let's take a look at the
simplest of all roles--

21
00:00:57.300 --> 00:00:59.220
the read role.

22
00:00:59.220 --> 00:01:02.250
Here I'm getting ready to
run the db.getRole command.

23
00:01:02.250 --> 00:01:04.920
And I'm passing in
read as a string,

24
00:01:04.920 --> 00:01:08.840
because I want to look at
the built-in role read.

25
00:01:08.840 --> 00:01:11.860
As you can see, I can now
see how this role is defined.

26
00:01:11.860 --> 00:01:14.910
I see the name of the
role, the database that

27
00:01:14.910 --> 00:01:18.120
uniquely associates
itself to this role,

28
00:01:18.120 --> 00:01:21.030
and the array of all
the inherited roles.

29
00:01:21.030 --> 00:01:24.290
But I would expect to also
see all of the privileges that

30
00:01:24.290 --> 00:01:25.630
make up this role.

31
00:01:25.630 --> 00:01:29.430
Well, since a role is often
made up by a lot of privileges,

32
00:01:29.430 --> 00:01:31.770
by default, getRole
won't show you

33
00:01:31.770 --> 00:01:34.070
all of the privileges
that make up a role.

34
00:01:34.070 --> 00:01:37.910
If we want to do that,
we run this command.

35
00:01:37.910 --> 00:01:38.570
db.getRole.

36
00:01:38.570 --> 00:01:40.660
But now we're
passing in a document

37
00:01:40.660 --> 00:01:43.480
saying showPrivileges true.

38
00:01:43.480 --> 00:01:45.350
I'll go ahead and
scroll up a bit

39
00:01:45.350 --> 00:01:48.860
so we can see the command
we ran and see the output.

40
00:01:48.860 --> 00:01:50.440
Here's the command we ran.

41
00:01:50.440 --> 00:01:52.590
And here is the output
that we saw before.

42
00:01:52.590 --> 00:01:55.480
And now we have a new additional
field called privileges,

43
00:01:55.480 --> 00:01:57.160
which has an array on it.

44
00:01:57.160 --> 00:01:59.710
To make things easier to
read, let's assign this object

45
00:01:59.710 --> 00:02:03.160
to a variable so we can look
at each privilege one by one.

46
00:02:03.160 --> 00:02:05.960
Now I can simply do
readRole.privileges

47
00:02:05.960 --> 00:02:08.150
to see all the privileges.

48
00:02:08.150 --> 00:02:10.364
And I can see how
many there are.

49
00:02:10.364 --> 00:02:12.030
So now I know there
are four privileges.

50
00:02:12.030 --> 00:02:13.510
So now I can choose
array notation

51
00:02:13.510 --> 00:02:15.850
to look at each individual one.

52
00:02:15.850 --> 00:02:18.110
Let's take a look at the
first privileged document

53
00:02:18.110 --> 00:02:20.580
that makes up the read role.

54
00:02:20.580 --> 00:02:22.550
As you can see, anyone
with the read role

55
00:02:22.550 --> 00:02:24.870
is allowed to run
collection of stats,

56
00:02:24.870 --> 00:02:30.080
dbHash, find, et cetera on
any collection within the test

57
00:02:30.080 --> 00:02:31.200
database.

58
00:02:31.200 --> 00:02:31.840
Cool.

59
00:02:31.840 --> 00:02:32.850
This makes sense.

60
00:02:32.850 --> 00:02:35.670
But I wonder what the other
privileged documents are for.

61
00:02:35.670 --> 00:02:36.780
Let's check them out.

62
00:02:36.780 --> 00:02:39.080
Here is the second document.

63
00:02:39.080 --> 00:02:40.330
Here is the third document.

64
00:02:40.330 --> 00:02:42.140
And here's the fourth
and final document.

65
00:02:42.140 --> 00:02:45.110
As you can see, all these
other privileged documents

66
00:02:45.110 --> 00:02:48.630
look exactly the same,
except for the collection

67
00:02:48.630 --> 00:02:50.250
that they're talking about.

68
00:02:50.250 --> 00:02:53.420
Each of them talking about a
different system collection.

69
00:02:53.420 --> 00:02:56.870
This is because these
internal system collections

70
00:02:56.870 --> 00:03:00.610
need to be explicitly defined in
a privileged document in order

71
00:03:00.610 --> 00:03:02.445
for a user to access them.

72
00:03:02.445 --> 00:03:04.570
In the case of the read
role, all these collections

73
00:03:04.570 --> 00:03:05.386
make sense.

74
00:03:05.386 --> 00:03:07.260
Let's look at them a
little bit more closely.

75
00:03:07.260 --> 00:03:09.500
Here we're talking
about system.indexes.

76
00:03:09.500 --> 00:03:11.190
It probably makes
sense for us to be

77
00:03:11.190 --> 00:03:15.190
able to look at all of
the indexes on a database.

78
00:03:15.190 --> 00:03:17.230
Here we have system.js.

79
00:03:17.230 --> 00:03:18.950
This holds special
JavaScript code

80
00:03:18.950 --> 00:03:21.060
for use in server
side JavaScript.

81
00:03:21.060 --> 00:03:24.000
This also makes sense for our
users to be able to read from.

82
00:03:24.000 --> 00:03:26.390
And finally, we have
system.namespaces.

83
00:03:26.390 --> 00:03:28.670
And this also makes sense,
because it makes sense

84
00:03:28.670 --> 00:03:31.820
to allow our users to be able
to list all the collections

85
00:03:31.820 --> 00:03:33.750
within a database.

86
00:03:33.750 --> 00:03:37.750
I hope this example illustrates
how actions, resources,

87
00:03:37.750 --> 00:03:42.830
and privileges work together
to define roles in MongoDB.