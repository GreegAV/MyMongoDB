
1
00:00:00.000 --> 00:00:00.520


2
00:00:00.520 --> 00:00:02.630
Sometimes we're in
a situation where

3
00:00:02.630 --> 00:00:05.870
we'll need to run a
mix of TLS connections

4
00:00:05.870 --> 00:00:07.920
and non-TLS connections.

5
00:00:07.920 --> 00:00:10.220
A great example of this
is migrating a replica

6
00:00:10.220 --> 00:00:13.140
set from one that uses
no encryption to one that

7
00:00:13.140 --> 00:00:15.530
uses TLS exclusively.

8
00:00:15.530 --> 00:00:19.200
While we'd love to force all of
our clients to connect via TLS,

9
00:00:19.200 --> 00:00:21.090
sometimes this isn't
easy because we

10
00:00:21.090 --> 00:00:23.050
might need to update
drivers or issue

11
00:00:23.050 --> 00:00:25.010
new certificates to
each individual client

12
00:00:25.010 --> 00:00:26.890
of our database.

13
00:00:26.890 --> 00:00:31.140
In this scenario, we really
want to have all of the members

14
00:00:31.140 --> 00:00:34.330
in between our ReplSet use TLS.

15
00:00:34.330 --> 00:00:37.040
But we would really
like for our clients

16
00:00:37.040 --> 00:00:40.230
to choose between
using TLS and using

17
00:00:40.230 --> 00:00:42.290
an unencrypted connection.

18
00:00:42.290 --> 00:00:45.770
In order to do this, instead of
using our regular old require

19
00:00:45.770 --> 00:00:50.570
SSL mode, we can use
the prefer SSL mode.

20
00:00:50.570 --> 00:00:53.570
And what prefer SSL does is
exactly what I just said.

21
00:00:53.570 --> 00:00:57.650
It will allow us to require
SSL between all the members

22
00:00:57.650 --> 00:00:59.530
of our replica set,
but it will allow

23
00:00:59.530 --> 00:01:05.730
clients to choose to use SSL
or to just connect unencrypted.

24
00:01:05.730 --> 00:01:08.210
Of course, over time
as we eventually

25
00:01:08.210 --> 00:01:10.530
issue these new
certificates to our clients

26
00:01:10.530 --> 00:01:13.610
and as they update their drivers
or their application logic

27
00:01:13.610 --> 00:01:16.290
as necessary, we can then
switch from using prefer

28
00:01:16.290 --> 00:01:18.930
TLS to using require SSL.

29
00:01:18.930 --> 00:01:22.420
So that all connections to our
server, whether it be a member

30
00:01:22.420 --> 00:01:24.660
or whether it be a
client, will require

31
00:01:24.660 --> 00:01:26.400
TLS for all connections.

32
00:01:26.400 --> 00:01:28.780
Let's go ahead and do this.

33
00:01:28.780 --> 00:01:31.034
So this process should be
pretty straightforward.

34
00:01:31.034 --> 00:01:32.700
We're essentially
using the same command

35
00:01:32.700 --> 00:01:36.560
as we did last time, except now
we're using preferSSL instead

36
00:01:36.560 --> 00:01:37.740
of requireSSL.

37
00:01:37.740 --> 00:01:40.261
We've now started the first
member of our replica set.

38
00:01:40.261 --> 00:01:42.760
Here's the command to start the
second member of our replica

39
00:01:42.760 --> 00:01:43.420
set.

40
00:01:43.420 --> 00:01:46.950
The only thing I changed is the
db path, log path, and port.

41
00:01:46.950 --> 00:01:49.760
And finally, here's the third
member of our replica set.

42
00:01:49.760 --> 00:01:53.000
Of course just changing the db
path, log path, and port again.

43
00:01:53.000 --> 00:01:55.060
And unlike before,
now that we're

44
00:01:55.060 --> 00:01:58.000
preferring SSL instead
of requiring it,

45
00:01:58.000 --> 00:02:00.500
I can just run Mongo
instead of running

46
00:02:00.500 --> 00:02:03.090
Mongo with the SSL options
and providing the client

47
00:02:03.090 --> 00:02:04.144
certificate.

48
00:02:04.144 --> 00:02:06.310
And you can see that I've
now successfully connected

49
00:02:06.310 --> 00:02:07.560
to the replica set.

50
00:02:07.560 --> 00:02:10.259
But the replica set
hasn't been initiated.

51
00:02:10.259 --> 00:02:12.180
So let's go ahead and
initiate the ReplSet

52
00:02:12.180 --> 00:02:13.566
with the correct configuration.

53
00:02:13.566 --> 00:02:14.940
And here's the
same configuration

54
00:02:14.940 --> 00:02:16.210
we did as last time.

55
00:02:16.210 --> 00:02:18.310
I'm still using my
encrypted ReplSet

56
00:02:18.310 --> 00:02:21.590
and passing in all the
members specifying localhost

57
00:02:21.590 --> 00:02:24.310
as the host and their
respective ports.

58
00:02:24.310 --> 00:02:25.680
And we get an OK.

59
00:02:25.680 --> 00:02:30.950
So now you can see
members are all using SSL

60
00:02:30.950 --> 00:02:36.634
and clients can choose between
using SSL or not using SSL.

61
00:02:36.634 --> 00:02:38.300
Let's go and verify
that I can still use

62
00:02:38.300 --> 00:02:40.100
SSL to connect to the server.

63
00:02:40.100 --> 00:02:42.280
Server is still
running, and now I

64
00:02:42.280 --> 00:02:45.550
can go ahead and try and
connect actually using SSL.

65
00:02:45.550 --> 00:02:48.030
And now we've
successfully connected.