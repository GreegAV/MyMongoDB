
1
00:00:00.000 --> 00:00:00.987


2
00:00:00.987 --> 00:00:02.820
Now we're going to talk
about authentication

3
00:00:02.820 --> 00:00:04.780
on a sharded cluster.

4
00:00:04.780 --> 00:00:06.380
For the most part,
this is exactly

5
00:00:06.380 --> 00:00:08.900
the same as authentication
on a standalone server.

6
00:00:08.900 --> 00:00:10.740
However, there are a
few key differences

7
00:00:10.740 --> 00:00:13.147
that you should
be made aware of.

8
00:00:13.147 --> 00:00:15.480
First of all, since we're
dealing with a sharded cluster

9
00:00:15.480 --> 00:00:17.260
instead of a standalone
server, we're

10
00:00:17.260 --> 00:00:20.231
going to want to connect to
a mongos instead of a mongod.

11
00:00:20.231 --> 00:00:22.730
Similarly, when our clients
want to authenticate and connect

12
00:00:22.730 --> 00:00:25.063
to our sharded cluster, they'll
connect and authenticate

13
00:00:25.063 --> 00:00:26.402
through a mongos instance.

14
00:00:26.402 --> 00:00:28.610
In order to go ahead and
set up this sharded cluster,

15
00:00:28.610 --> 00:00:30.830
I'm going to use a really
helpful set of tools

16
00:00:30.830 --> 00:00:32.570
called mtools.

17
00:00:32.570 --> 00:00:35.580
Mtools is, as you can see,
a collection of scripts

18
00:00:35.580 --> 00:00:37.410
to set up MongoDB
test environments,

19
00:00:37.410 --> 00:00:40.230
and parse individualized
MongoDB logs.

20
00:00:40.230 --> 00:00:42.720
So in mtools, there's
this handy utility

21
00:00:42.720 --> 00:00:46.270
called mlaunch, which is a
script to quickly spin up

22
00:00:46.270 --> 00:00:48.310
local test environments,
including replica

23
00:00:48.310 --> 00:00:50.250
sets and sharded systems.

24
00:00:50.250 --> 00:00:52.410
So we'll go ahead
and use mlaunch

25
00:00:52.410 --> 00:00:54.440
to set up our replica set.

26
00:00:54.440 --> 00:00:55.925
So you can see here's mlaunch.

27
00:00:55.925 --> 00:00:57.550
And we're saying that
we want to set up

28
00:00:57.550 --> 00:00:59.990
a sharded cluster
with three shards,

29
00:00:59.990 --> 00:01:02.690
each shard being a replica
set with three nodes.

30
00:01:02.690 --> 00:01:04.709
And we want three
configuration servers.

31
00:01:04.709 --> 00:01:06.960
And we want authentication
to be enabled.

32
00:01:06.960 --> 00:01:08.650
So this will set
up that cluster.

33
00:01:08.650 --> 00:01:10.310
It'll take a second.

34
00:01:10.310 --> 00:01:12.650
We can go ahead
and use ps and pipe

35
00:01:12.650 --> 00:01:15.920
the output into grep to
see what commands were ran

36
00:01:15.920 --> 00:01:18.320
to set up this sharded cluster.

37
00:01:18.320 --> 00:01:20.330
And as you can see
here, we're just

38
00:01:20.330 --> 00:01:24.040
setting up nine different
mongods in the typical fashion,

39
00:01:24.040 --> 00:01:26.710
and then specifying that
we want to use keyFile

40
00:01:26.710 --> 00:01:28.550
for internal authentication
between the nine

41
00:01:28.550 --> 00:01:29.660
different mongods.

42
00:01:29.660 --> 00:01:33.370
And of course,
there's also a mongos.

43
00:01:33.370 --> 00:01:36.520
And that mongos passes in the
different configuration data

44
00:01:36.520 --> 00:01:38.340
to the configuration servers.

45
00:01:38.340 --> 00:01:41.630
And that's how
mlaunch set it all up.

46
00:01:41.630 --> 00:01:45.120
But if we want to go ahead
and connect to this server,

47
00:01:45.120 --> 00:01:47.710
we can just run mongo, and
see that we're connected.

48
00:01:47.710 --> 00:01:49.850
Now, when we try
to run show dbs,

49
00:01:49.850 --> 00:01:51.880
we're not authorized
to run this command

50
00:01:51.880 --> 00:01:53.830
because internal
authentication has now

51
00:01:53.830 --> 00:01:55.870
been enabled on the
server because we're

52
00:01:55.870 --> 00:01:57.930
using keyfile-based
authentication, which

53
00:01:57.930 --> 00:02:00.980
uses internal authentication,
which will automatically

54
00:02:00.980 --> 00:02:03.490
enable client authentication.

55
00:02:03.490 --> 00:02:05.760
The localhost exception does
not apply to us right now

56
00:02:05.760 --> 00:02:07.030
because we used mlaunch.

57
00:02:07.030 --> 00:02:09.044
If we would have set up
this cluster on our own,

58
00:02:09.044 --> 00:02:10.210
we wouldn't have this issue.

59
00:02:10.210 --> 00:02:12.730
But mlaunch
actually, by default,

60
00:02:12.730 --> 00:02:15.250
will set up a user
with the name user,

61
00:02:15.250 --> 00:02:16.860
and the password password.

62
00:02:16.860 --> 00:02:19.570
So we can go ahead and
authenticate against that user

63
00:02:19.570 --> 00:02:21.970
right now.

64
00:02:21.970 --> 00:02:24.350
We're now authenticated
to our sharded cluster,

65
00:02:24.350 --> 00:02:30.390
and we can run commands
like db.system.users.find,

66
00:02:30.390 --> 00:02:32.230
and see the different
users in our system.

67
00:02:32.230 --> 00:02:33.938
And that's pretty much
how authentication

68
00:02:33.938 --> 00:02:35.100
works on a sharded cluster.

69
00:02:35.100 --> 00:02:38.110
Basically, what we do is we
use internal authentication

70
00:02:38.110 --> 00:02:41.100
to automatically enable
client-based authentication

71
00:02:41.100 --> 00:02:43.644
on the sharded cluster.

72
00:02:43.644 --> 00:02:45.560
So there's something I
want to point out here.

73
00:02:45.560 --> 00:02:48.940
As of MongoDB 2.6, user
information like this

74
00:02:48.940 --> 00:02:51.980
is no longer stored
on either the mongos

75
00:02:51.980 --> 00:02:53.780
or on any of our three shards.

76
00:02:53.780 --> 00:02:56.580
This information is actually
all stored on our configuration

77
00:02:56.580 --> 00:02:57.470
servers.

78
00:02:57.470 --> 00:02:59.574
So that's really
important to keep in mind.

79
00:02:59.574 --> 00:03:00.990
So there's another
important thing

80
00:03:00.990 --> 00:03:02.540
I want to point out
to you, and that

81
00:03:02.540 --> 00:03:03.915
is that we still
have the ability

82
00:03:03.915 --> 00:03:07.562
to connect directly to a
mongod in our sharded cluster.

83
00:03:07.562 --> 00:03:09.020
And you're going
to want to do this

84
00:03:09.020 --> 00:03:12.410
at times when you need to
do administrative task,

85
00:03:12.410 --> 00:03:15.450
like cleaning up orphans
or compacting your data

86
00:03:15.450 --> 00:03:17.842
or reconfiguring a
replica set or something.

87
00:03:17.842 --> 00:03:19.550
But this is really
important to point out

88
00:03:19.550 --> 00:03:22.110
because while
authentication is still

89
00:03:22.110 --> 00:03:25.710
applicable on this
individual mongod

90
00:03:25.710 --> 00:03:28.210
because we're using internal
authentication, which

91
00:03:28.210 --> 00:03:30.130
as we know,
automatically enables

92
00:03:30.130 --> 00:03:33.360
client-based authentication,
which prevents me from running

93
00:03:33.360 --> 00:03:36.619
show dbs-- I'm not authorized
to execute this command-- it's

94
00:03:36.619 --> 00:03:38.910
important to realize that
the localhost exception still

95
00:03:38.910 --> 00:03:40.210
applies.

96
00:03:40.210 --> 00:03:43.500
So there are no users on this
individual mongod because,

97
00:03:43.500 --> 00:03:46.410
like I said before, all
the user data is stored

98
00:03:46.410 --> 00:03:48.000
on the configuration servers.

99
00:03:48.000 --> 00:03:49.980
There are no users on
this individual mongod.

100
00:03:49.980 --> 00:03:51.980
So that means that the
localhost exception still

101
00:03:51.980 --> 00:03:54.680
applies if I'm
connected locally, which

102
00:03:54.680 --> 00:03:57.210
means I can just create a user.

103
00:03:57.210 --> 00:03:59.600
So in this case, I can just
create this localAdmin user,

104
00:03:59.600 --> 00:04:01.670
who is a root user.

105
00:04:01.670 --> 00:04:05.360
And now I can
authenticate against them.

106
00:04:05.360 --> 00:04:07.150
And now I have access
to any information

107
00:04:07.150 --> 00:04:09.790
that I want on this shard.

108
00:04:09.790 --> 00:04:13.420
It's important to realize
that this gotcha exists,

109
00:04:13.420 --> 00:04:17.459
and it's probably a good idea to
disable the localhost exception

110
00:04:17.459 --> 00:04:20.000
on your individual shards.

111
00:04:20.000 --> 00:04:22.070
So if you wanted
to do this, you'd

112
00:04:22.070 --> 00:04:25.160
do it via a
setParameter for mongod.

113
00:04:25.160 --> 00:04:27.350
So to show you what
that looks like,

114
00:04:27.350 --> 00:04:29.460
that would look like this.

115
00:04:29.460 --> 00:04:32.710
You would say mongod
--setParameter

116
00:04:32.710 --> 00:04:36.530
enableLocalhostAuthBypass, and
you'd set it equal to false.

117
00:04:36.530 --> 00:04:38.030
And then, of course,
you would still

118
00:04:38.030 --> 00:04:40.987
pass in keyFile and
all the other stuff

119
00:04:40.987 --> 00:04:43.070
that you would use to set
up your sharded cluster.

120
00:04:43.070 --> 00:04:44.869
I'm assuming you're
not using mlaunch.

121
00:04:44.869 --> 00:04:46.660
It's important to
realize that you probably

122
00:04:46.660 --> 00:04:49.780
are going to want to disable
the localhost exception

123
00:04:49.780 --> 00:04:52.980
on your individual mongods
in your sharded cluster

124
00:04:52.980 --> 00:04:55.480
to prevent the risk that
somebody could directly connect

125
00:04:55.480 --> 00:04:58.060
to one of them, and then
do whatever they wanted

126
00:04:58.060 --> 00:05:00.450
on that individual mongod.