
1
00:00:00.000 --> 00:00:00.072


2
00:00:00.072 --> 00:00:01.530
In this lesson,
we're going to talk

3
00:00:01.530 --> 00:00:03.865
about increasing your write
performance with sharding.

4
00:00:03.865 --> 00:00:05.740
First, we're going to
discuss the differences

5
00:00:05.740 --> 00:00:08.590
between horizontal
and vertical scaling.

6
00:00:08.590 --> 00:00:10.510
After that, we'll
talk about rules

7
00:00:10.510 --> 00:00:12.430
for picking a good shard key.

8
00:00:12.430 --> 00:00:14.845
And finally, we'll spend
some time talking about bulk

9
00:00:14.845 --> 00:00:17.914
write operations in
a sharded cluster.

10
00:00:17.914 --> 00:00:20.330
So there are going to be times
when you have too much data

11
00:00:20.330 --> 00:00:23.790
or too much throughput for
your database to handle.

12
00:00:23.790 --> 00:00:25.770
And this problem is
solved by scaling.

13
00:00:25.770 --> 00:00:27.270
And there are two
schools of thought

14
00:00:27.270 --> 00:00:28.580
when it comes to scaling.

15
00:00:28.580 --> 00:00:32.729
There's vertical scaling, and
there's horizontal scaling.

16
00:00:32.729 --> 00:00:33.990
With vertical scaling.

17
00:00:33.990 --> 00:00:37.230
The idea is that your current
server has too few resources

18
00:00:37.230 --> 00:00:38.730
and is being overworked.

19
00:00:38.730 --> 00:00:40.230
And to fix that
issue, you're just

20
00:00:40.230 --> 00:00:43.440
going to buy a bigger, faster
machine with more CPU, RAM,

21
00:00:43.440 --> 00:00:45.340
and disk.

22
00:00:45.340 --> 00:00:47.450
This approach will
eventually reach a limit.

23
00:00:47.450 --> 00:00:49.420
There's a ceiling to
how much CPU, RAM,

24
00:00:49.420 --> 00:00:52.840
and disk one single
physical machine can have.

25
00:00:52.840 --> 00:00:55.870
Moreover, the cost to scale
your machine vertically

26
00:00:55.870 --> 00:00:57.130
is not linear.

27
00:00:57.130 --> 00:00:59.830
When we buy a machine that
is twice as fast and powerful

28
00:00:59.830 --> 00:01:02.590
as our current server,
our cost doesn't double,

29
00:01:02.590 --> 00:01:05.650
it normally quadruples
or even worse.

30
00:01:05.650 --> 00:01:07.930
With horizontal scaling,
on the other hand,

31
00:01:07.930 --> 00:01:10.600
instead of increasing the
resources of your server

32
00:01:10.600 --> 00:01:13.720
you just increase the
total number of servers,

33
00:01:13.720 --> 00:01:15.760
effectively splitting
the workload

34
00:01:15.760 --> 00:01:18.070
between many different machines.

35
00:01:18.070 --> 00:01:20.140
When we reach the limit
of our current setup,

36
00:01:20.140 --> 00:01:22.510
we just add more machines.

37
00:01:22.510 --> 00:01:25.090
This is nice because we can
use commodity machines, where

38
00:01:25.090 --> 00:01:27.700
we're simply buying more
of the same machine.

39
00:01:27.700 --> 00:01:30.670
When we do this, our costs
scale nice and linearly

40
00:01:30.670 --> 00:01:32.326
with our performance
requirements.

41
00:01:32.326 --> 00:01:33.700
Now, it's important
to understand

42
00:01:33.700 --> 00:01:36.580
that with a sharded cluster,
all of our reads and writes

43
00:01:36.580 --> 00:01:38.800
are going to go into a mongos.

44
00:01:38.800 --> 00:01:41.830
This is important to realize
because this mongos needs

45
00:01:41.830 --> 00:01:45.400
to be able to determine where
to send the reads and writes.

46
00:01:45.400 --> 00:01:48.130
This is achieved
with a shard key.

47
00:01:48.130 --> 00:01:51.100
The shard key defines how
our data is partitioned

48
00:01:51.100 --> 00:01:53.650
across different machines.

49
00:01:53.650 --> 00:01:57.160
The shard key is either an
index field or an index compound

50
00:01:57.160 --> 00:02:00.850
of fields that exist in every
document in the collection.

51
00:02:00.850 --> 00:02:03.460
Now it's very important that
we evenly distribute our data

52
00:02:03.460 --> 00:02:05.620
across these shards
so that we can evenly

53
00:02:05.620 --> 00:02:07.220
distribute their load.

54
00:02:07.220 --> 00:02:09.130
This is why picking
a good shard key

55
00:02:09.130 --> 00:02:11.230
is the most important
part of sharding.

56
00:02:11.230 --> 00:02:13.420
With a shard key, our
data is divided up

57
00:02:13.420 --> 00:02:16.660
into bite size
pieces called chunks.

58
00:02:16.660 --> 00:02:20.200
Each chunk has an inclusive
lower bound and exclusive

59
00:02:20.200 --> 00:02:21.550
upper bound.

60
00:02:21.550 --> 00:02:24.610
In this hypothetical example,
we defined a shard key

61
00:02:24.610 --> 00:02:29.180
on last name and we
created three chunks.

62
00:02:29.180 --> 00:02:31.170
The first chunk has a
lower bound of Abbott

63
00:02:31.170 --> 00:02:33.700
and has an upper bound Fisher.

64
00:02:33.700 --> 00:02:35.470
Now in reality,
with sharding, we'd

65
00:02:35.470 --> 00:02:37.540
have far more chunks than this.

66
00:02:37.540 --> 00:02:41.560
By default, a chunk's
maximum size is 64 megabytes.

67
00:02:41.560 --> 00:02:43.430
Chunks will grow
close to this value,

68
00:02:43.430 --> 00:02:45.140
and then they will be split.

69
00:02:45.140 --> 00:02:47.050
So there are many
chunks existing on each

70
00:02:47.050 --> 00:02:49.040
of the shards in a cluster.

71
00:02:49.040 --> 00:02:50.710
Now in order for
our write throughput

72
00:02:50.710 --> 00:02:53.740
to truly scale linearly
as we add shards,

73
00:02:53.740 --> 00:02:56.380
we need to ensure that
these chunks are evenly

74
00:02:56.380 --> 00:02:59.290
distributed across each shard.

75
00:02:59.290 --> 00:03:01.390
To achieve this, there
are three key things

76
00:03:01.390 --> 00:03:04.110
to keep in mind when
designing a shard key.

77
00:03:04.110 --> 00:03:07.490
There is carnality,
frequency, and rate of change.

78
00:03:07.490 --> 00:03:09.220
Let's take a look
at each of these.

79
00:03:09.220 --> 00:03:10.780
With cardinality,
we're referring

80
00:03:10.780 --> 00:03:14.350
to the number of distinct
values for a given shard key.

81
00:03:14.350 --> 00:03:16.840
We want high cardinality.

82
00:03:16.840 --> 00:03:20.230
The cardinality of our shard key
determines the maximum number

83
00:03:20.230 --> 00:03:23.110
of chunks that can
exist in our cluster.

84
00:03:23.110 --> 00:03:25.390
If, for instance, we were
to build an application that

85
00:03:25.390 --> 00:03:27.760
was used only by people
who live in New York City,

86
00:03:27.760 --> 00:03:29.630
and we were sharding
on state, then we

87
00:03:29.630 --> 00:03:31.780
could have a maximum
of one chunk,

88
00:03:31.780 --> 00:03:34.390
because both the upper and
lower bound of this chunk

89
00:03:34.390 --> 00:03:36.150
would be New York.

90
00:03:36.150 --> 00:03:37.810
And since we only
have one chunk,

91
00:03:37.810 --> 00:03:40.340
this means we can
only have one shard.

92
00:03:40.340 --> 00:03:43.630
So we want to ensure that our
shard key has high cardinality.

93
00:03:43.630 --> 00:03:45.970
If you can't use a field
that has higher cardinality,

94
00:03:45.970 --> 00:03:48.370
you can increase the
cardinality of your shard key

95
00:03:48.370 --> 00:03:51.100
by creating a
compound shard key.

96
00:03:51.100 --> 00:03:54.130
Now instead of having the
range of values just on state,

97
00:03:54.130 --> 00:03:57.130
we have a range of values
for every state and last name

98
00:03:57.130 --> 00:03:58.380
combination.