
1
00:00:00.000 --> 00:00:00.500


2
00:00:00.500 --> 00:00:02.299
Welcome to the
chapter on indexes.

3
00:00:02.299 --> 00:00:03.840
In this chapter,
we're going to cover

4
00:00:03.840 --> 00:00:06.840
some of the different
indexes supported by MongoDB

5
00:00:06.840 --> 00:00:08.910
and we'll also discuss
the different properties

6
00:00:08.910 --> 00:00:10.770
that those indexes have.

7
00:00:10.770 --> 00:00:14.370
In this first video, we're going
to examine what indexes are,

8
00:00:14.370 --> 00:00:15.564
and how they work.

9
00:00:15.564 --> 00:00:16.980
And to answer this
first question,

10
00:00:16.980 --> 00:00:18.690
I think it's helpful
to ask the question.

11
00:00:18.690 --> 00:00:21.060
What problem do
indexes try to solve?

12
00:00:21.060 --> 00:00:23.726
And that is, slow queries.

13
00:00:23.726 --> 00:00:25.350
Let's use a quick
analogy to illustrate

14
00:00:25.350 --> 00:00:26.740
what I'm talking about.

15
00:00:26.740 --> 00:00:29.490
Let's say we're looking for
some content on bedspreads

16
00:00:29.490 --> 00:00:30.958
in a book about interior design.

17
00:00:30.958 --> 00:00:32.624
One way that I can
find this information

18
00:00:32.624 --> 00:00:34.320
is if I went through
the book page

19
00:00:34.320 --> 00:00:37.560
by page looking for
information on bedspreads.

20
00:00:37.560 --> 00:00:39.287
But this would not be very fast.

21
00:00:39.287 --> 00:00:41.245
I could find this
information much more quickly

22
00:00:41.245 --> 00:00:44.280
if I went to the back of
the book to the index,

23
00:00:44.280 --> 00:00:46.650
where I can quickly search
for the word bedspread

24
00:00:46.650 --> 00:00:48.950
because the index is
ordered alphabetically.

25
00:00:48.950 --> 00:00:51.770
I'll then find what page
talks about bedspreads,

26
00:00:51.770 --> 00:00:53.640
and I can go directly
to that page.

27
00:00:53.640 --> 00:00:56.370
And this is essentially
how database indexes work.

28
00:00:56.370 --> 00:01:00.030
Working off the book analogy,
a book, in the context MongoDB,

29
00:01:00.030 --> 00:01:01.740
would be a collection.

30
00:01:01.740 --> 00:01:04.239
If you don't use an index
when we query our collection,

31
00:01:04.239 --> 00:01:06.900
then the database will have to
look at every single document.

32
00:01:06.900 --> 00:01:09.840
Creatively we call
this a collection scan,

33
00:01:09.840 --> 00:01:11.941
which means that as our
collection grows in size,

34
00:01:11.941 --> 00:01:14.190
we will have to search through
more and more documents

35
00:01:14.190 --> 00:01:15.840
to satisfy our query.

36
00:01:15.840 --> 00:01:19.320
In computer science we call
this an order of N operation,

37
00:01:19.320 --> 00:01:21.870
commonly referred
to as big O of N,

38
00:01:21.870 --> 00:01:23.730
or having a linear running time.

39
00:01:23.730 --> 00:01:26.130
And that's because the
running time of our query

40
00:01:26.130 --> 00:01:29.460
is linearly proportional to
the number of documents--

41
00:01:29.460 --> 00:01:32.290
N-- that we have
in our collection.

42
00:01:32.290 --> 00:01:34.650
But we can do much better
if we have an index.

43
00:01:34.650 --> 00:01:37.200
Like in the book analogy,
we can use an index

44
00:01:37.200 --> 00:01:38.910
to limit our search space.

45
00:01:38.910 --> 00:01:40.980
Rather than searching
through every document,

46
00:01:40.980 --> 00:01:44.190
we can search through
the ordered index first.

47
00:01:44.190 --> 00:01:46.470
The MongoDB index
keeps a reference

48
00:01:46.470 --> 00:01:48.320
to every document
in our collection.

49
00:01:48.320 --> 00:01:51.600
Think of this index as a
list of key value pairs,

50
00:01:51.600 --> 00:01:54.330
where the key is the
value of the field

51
00:01:54.330 --> 00:01:58.200
that we've indexed on,
and the value of the key

52
00:01:58.200 --> 00:02:00.690
is the actual document itself.

53
00:02:00.690 --> 00:02:03.240
I like to point out that this
means an index is associated

54
00:02:03.240 --> 00:02:04.920
with one or more fields.

55
00:02:04.920 --> 00:02:06.420
This means when we
create our index,

56
00:02:06.420 --> 00:02:08.729
we have to specify which
fields on the documents

57
00:02:08.729 --> 00:02:11.310
in our collection
we want to index on.

58
00:02:11.310 --> 00:02:15.750
For example, _id field is
automatically indexed for us.

59
00:02:15.750 --> 00:02:19.680
But if I were to write a query
that didn't use the _id field,

60
00:02:19.680 --> 00:02:22.890
I wouldn't be able search
the _id index and find

61
00:02:22.890 --> 00:02:24.750
the reference to my documents.

62
00:02:24.750 --> 00:02:28.230
And it is possible to have many
indexes on the same collection.

63
00:02:28.230 --> 00:02:31.380
I might create multiple
indexes on different fields

64
00:02:31.380 --> 00:02:34.980
if I find that I have different
queries for different fields.

65
00:02:34.980 --> 00:02:37.230
Like the index at
the back of a book,

66
00:02:37.230 --> 00:02:40.170
the index keys are
stored in an order.

67
00:02:40.170 --> 00:02:43.590
Because of this, we don't have
to look at every single index

68
00:02:43.590 --> 00:02:45.580
entry in or to find it.

69
00:02:45.580 --> 00:02:48.450
MongoDB uses a data
structure called a b-tree

70
00:02:48.450 --> 00:02:50.100
to store its indexes.

71
00:02:50.100 --> 00:02:52.740
B-trees can be used
to find target values

72
00:02:52.740 --> 00:02:55.050
with very few comparisons.

73
00:02:55.050 --> 00:02:57.630
With a collection scan,
each new insertion

74
00:02:57.630 --> 00:02:59.460
creates an extra comparison.

75
00:02:59.460 --> 00:03:01.650
But with a b-tree,
each new insertion

76
00:03:01.650 --> 00:03:04.650
doesn't necessarily mean
an extra comparison.

77
00:03:04.650 --> 00:03:08.190
For example, if I was
searching for the value of 15,

78
00:03:08.190 --> 00:03:12.610
my search wouldn't change if
I inserted the value of 5.

79
00:03:12.610 --> 00:03:14.380
We can plot a chart
to get an idea

80
00:03:14.380 --> 00:03:16.330
of how many fewer
documents we need

81
00:03:16.330 --> 00:03:18.610
to examine when using an index.

82
00:03:18.610 --> 00:03:20.680
You can see that when
we don't have an index,

83
00:03:20.680 --> 00:03:23.770
we have a very linear function
of number of comparisons.

84
00:03:23.770 --> 00:03:26.190
But when we do have
an index, we need

85
00:03:26.190 --> 00:03:28.690
to examine far fewer documents.

86
00:03:28.690 --> 00:03:30.340
Before I finish
this video, I would

87
00:03:30.340 --> 00:03:34.420
to discuss one last topic,
which is index overhead.

88
00:03:34.420 --> 00:03:38.110
The awesome query performance
gain that we get with indexes

89
00:03:38.110 --> 00:03:39.550
doesn't come for free.

90
00:03:39.550 --> 00:03:42.700
With each additional index,
we decrease our write speed

91
00:03:42.700 --> 00:03:43.880
for a collection.

92
00:03:43.880 --> 00:03:45.790
Every time there's a
new document inserted

93
00:03:45.790 --> 00:03:48.370
into collection, a
collections indexes

94
00:03:48.370 --> 00:03:50.050
might need to be updated.

95
00:03:50.050 --> 00:03:52.840
Similarly, if a
document were to change,

96
00:03:52.840 --> 00:03:55.990
or if it was completely removed,
one or more of our b-trees

97
00:03:55.990 --> 00:03:57.860
might need to be balanced.

98
00:03:57.860 --> 00:04:00.670
This means that we need to be
careful when creating indexes.

99
00:04:00.670 --> 00:04:03.144
We don't want to have too
many unnecessary indexes

100
00:04:03.144 --> 00:04:04.810
in a collection because
there would then

101
00:04:04.810 --> 00:04:07.720
be an unnecessary loss in
insert, update, and delete

102
00:04:07.720 --> 00:04:09.010
performance.

103
00:04:09.010 --> 00:04:11.130
You should have a good
idea of what indexes are,

104
00:04:11.130 --> 00:04:14.370
their pros and cons,
and how they work.